(function(window, angular, undefined) {'use strict';

var urlBase = "/api";
var authHeader = 'authorization';

/**
 * @ngdoc overview
 * @name lbServices
 * @module
 * @description
 *
 * The `lbServices` module provides services for interacting with
 * the models exposed by the LoopBack server via the REST API.
 *
 */
var module = angular.module("lbServices", ['ngResource']);

/**
 * @ngdoc object
 * @name lbServices.User
 * @header lbServices.User
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `User` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "User",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/Users/:id",
      { 'id': '@id' },
      {

        /**
         * @ngdoc method
         * @name lbServices.User#prototype$__findById__accessTokens
         * @methodOf lbServices.User
         *
         * @description
         *
         * Find a related item by id for accessTokens.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for accessTokens
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        "prototype$__findById__accessTokens": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/Users/:id/accessTokens/:fk",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.User#prototype$__destroyById__accessTokens
         * @methodOf lbServices.User
         *
         * @description
         *
         * Delete a related item by id for accessTokens.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for accessTokens
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "prototype$__destroyById__accessTokens": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/Users/:id/accessTokens/:fk",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.User#prototype$__updateById__accessTokens
         * @methodOf lbServices.User
         *
         * @description
         *
         * Update a related item by id for accessTokens.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for accessTokens
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        "prototype$__updateById__accessTokens": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/Users/:id/accessTokens/:fk",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.User#prototype$__get__accessTokens
         * @methodOf lbServices.User
         *
         * @description
         *
         * Queries accessTokens of User.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        "prototype$__get__accessTokens": {
          isArray: true,
          url: urlBase + "/Users/:id/accessTokens",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.User#prototype$__create__accessTokens
         * @methodOf lbServices.User
         *
         * @description
         *
         * Creates a new instance in accessTokens of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        "prototype$__create__accessTokens": {
          url: urlBase + "/Users/:id/accessTokens",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.User#prototype$__delete__accessTokens
         * @methodOf lbServices.User
         *
         * @description
         *
         * Deletes all accessTokens of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "prototype$__delete__accessTokens": {
          url: urlBase + "/Users/:id/accessTokens",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.User#prototype$__count__accessTokens
         * @methodOf lbServices.User
         *
         * @description
         *
         * Counts accessTokens of User.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "prototype$__count__accessTokens": {
          url: urlBase + "/Users/:id/accessTokens/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.User#create
         * @methodOf lbServices.User
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/Users",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.User#createMany
         * @methodOf lbServices.User
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/Users",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.User#upsert
         * @methodOf lbServices.User
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/Users",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.User#exists
         * @methodOf lbServices.User
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/Users/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.User#findById
         * @methodOf lbServices.User
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/Users/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.User#find
         * @methodOf lbServices.User
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/Users",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.User#findOne
         * @methodOf lbServices.User
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/Users/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.User#updateAll
         * @methodOf lbServices.User
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "updateAll": {
          url: urlBase + "/Users/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.User#deleteById
         * @methodOf lbServices.User
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "deleteById": {
          url: urlBase + "/Users/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.User#count
         * @methodOf lbServices.User
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/Users/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.User#prototype$updateAttributes
         * @methodOf lbServices.User
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/Users/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.User#createChangeStream
         * @methodOf lbServices.User
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/Users/change-stream",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.User#login
         * @methodOf lbServices.User
         *
         * @description
         *
         * Login a user with username/email and password.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `include` – `{string=}` - Related objects to include in the response. See the description of return value for more details.
         *   Default value: `user`.
         *
         *  - `rememberMe` - `boolean` - Whether the authentication credentials
         *     should be remembered in localStorage across app/browser restarts.
         *     Default: `true`.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The response body contains properties of the AccessToken created on login.
         * Depending on the value of `include` parameter, the body may contain additional properties:
         * 
         *   - `user` - `{User}` - Data of the currently logged in user. (`include=user`)
         * 
         *
         */
        "login": {
          params: {
            include: "user"
          },
          interceptor: {
            response: function(response) {
              var accessToken = response.data;
              LoopBackAuth.setUser(accessToken.id, accessToken.userId, accessToken.user);
              LoopBackAuth.rememberMe = response.config.params.rememberMe !== false;
              LoopBackAuth.save();
              return response.resource;
            }
          },
          url: urlBase + "/Users/login",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.User#logout
         * @methodOf lbServices.User
         *
         * @description
         *
         * Logout a user with access token
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `access_token` – `{string}` - Do not supply this argument, it is automatically extracted from request headers.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "logout": {
          interceptor: {
            response: function(response) {
              LoopBackAuth.clearUser();
              LoopBackAuth.clearStorage();
              return response.resource;
            }
          },
          url: urlBase + "/Users/logout",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.User#confirm
         * @methodOf lbServices.User
         *
         * @description
         *
         * Confirm a user registration with email verification token
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `uid` – `{string}` - 
         *
         *  - `token` – `{string}` - 
         *
         *  - `redirect` – `{string=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "confirm": {
          url: urlBase + "/Users/confirm",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.User#resetPassword
         * @methodOf lbServices.User
         *
         * @description
         *
         * Reset password for a user with email
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "resetPassword": {
          url: urlBase + "/Users/reset",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.User#getCurrent
         * @methodOf lbServices.User
         *
         * @description
         *
         * Get data of the currently logged user. Fail with HTTP result 401
         * when there is no user logged in.
         *
         * @param {function(Object,Object)=} successCb
         *    Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *    `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         */
        "getCurrent": {
           url: urlBase + "/Users" + "/:id",
           method: "GET",
           params: {
             id: function() {
              var id = LoopBackAuth.currentUserId;
              if (id == null) id = '__anonymous__';
              return id;
            },
          },
          interceptor: {
            response: function(response) {
              LoopBackAuth.currentUserData = response.data;
              return response.resource;
            }
          },
          __isGetCurrentUser__ : true
        }
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.User#updateOrCreate
         * @methodOf lbServices.User
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.User#update
         * @methodOf lbServices.User
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.User#destroyById
         * @methodOf lbServices.User
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.User#removeById
         * @methodOf lbServices.User
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["removeById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.User#getCachedCurrent
         * @methodOf lbServices.User
         *
         * @description
         *
         * Get data of the currently logged user that was returned by the last
         * call to {@link lbServices.User#login} or
         * {@link lbServices.User#getCurrent}. Return null when there
         * is no user logged in or the data of the current user were not fetched
         * yet.
         *
         * @returns {Object} A User instance.
         */
        R.getCachedCurrent = function() {
          var data = LoopBackAuth.currentUserData;
          return data ? new R(data) : null;
        };

        /**
         * @ngdoc method
         * @name lbServices.User#isAuthenticated
         * @methodOf lbServices.User
         *
         * @returns {boolean} True if the current user is authenticated (logged in).
         */
        R.isAuthenticated = function() {
          return this.getCurrentId() != null;
        };

        /**
         * @ngdoc method
         * @name lbServices.User#getCurrentId
         * @methodOf lbServices.User
         *
         * @returns {Object} Id of the currently logged-in user or null.
         */
        R.getCurrentId = function() {
          return LoopBackAuth.currentUserId;
        };

    /**
    * @ngdoc property
    * @name lbServices.User#modelName
    * @propertyOf lbServices.User
    * @description
    * The name of the model represented by this $resource,
    * i.e. `User`.
    */
    R.modelName = "User";


    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.UserType
 * @header lbServices.UserType
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `UserType` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "UserType",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/userTypes/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use UserType.userDetails.findById() instead.
        "prototype$__findById__userDetails": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userTypes/:id/userDetails/:fk",
          method: "GET"
        },

        // INTERNAL. Use UserType.userDetails.destroyById() instead.
        "prototype$__destroyById__userDetails": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userTypes/:id/userDetails/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use UserType.userDetails.updateById() instead.
        "prototype$__updateById__userDetails": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userTypes/:id/userDetails/:fk",
          method: "PUT"
        },

        // INTERNAL. Use UserType.userDetails() instead.
        "prototype$__get__userDetails": {
          isArray: true,
          url: urlBase + "/userTypes/:id/userDetails",
          method: "GET"
        },

        // INTERNAL. Use UserType.userDetails.create() instead.
        "prototype$__create__userDetails": {
          url: urlBase + "/userTypes/:id/userDetails",
          method: "POST"
        },

        // INTERNAL. Use UserType.userDetails.destroyAll() instead.
        "prototype$__delete__userDetails": {
          url: urlBase + "/userTypes/:id/userDetails",
          method: "DELETE"
        },

        // INTERNAL. Use UserType.userDetails.count() instead.
        "prototype$__count__userDetails": {
          url: urlBase + "/userTypes/:id/userDetails/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.UserType#create
         * @methodOf lbServices.UserType
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserType` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/userTypes",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.UserType#createMany
         * @methodOf lbServices.UserType
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserType` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/userTypes",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.UserType#upsert
         * @methodOf lbServices.UserType
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserType` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/userTypes",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.UserType#exists
         * @methodOf lbServices.UserType
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/userTypes/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.UserType#findById
         * @methodOf lbServices.UserType
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserType` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/userTypes/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.UserType#find
         * @methodOf lbServices.UserType
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserType` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/userTypes",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.UserType#findOne
         * @methodOf lbServices.UserType
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserType` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/userTypes/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.UserType#updateAll
         * @methodOf lbServices.UserType
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "updateAll": {
          url: urlBase + "/userTypes/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.UserType#deleteById
         * @methodOf lbServices.UserType
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "deleteById": {
          url: urlBase + "/userTypes/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.UserType#count
         * @methodOf lbServices.UserType
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/userTypes/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.UserType#prototype$updateAttributes
         * @methodOf lbServices.UserType
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserType` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/userTypes/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.UserType#createChangeStream
         * @methodOf lbServices.UserType
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/userTypes/change-stream",
          method: "POST"
        },

        // INTERNAL. Use UserDetail.userType() instead.
        "::get::userDetail::userType": {
          url: urlBase + "/userDetails/:id/userType",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.UserType#updateOrCreate
         * @methodOf lbServices.UserType
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserType` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.UserType#update
         * @methodOf lbServices.UserType
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.UserType#destroyById
         * @methodOf lbServices.UserType
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.UserType#removeById
         * @methodOf lbServices.UserType
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.UserType#modelName
    * @propertyOf lbServices.UserType
    * @description
    * The name of the model represented by this $resource,
    * i.e. `UserType`.
    */
    R.modelName = "UserType";

    /**
     * @ngdoc object
     * @name lbServices.UserType.userDetails
     * @header lbServices.UserType.userDetails
     * @object
     * @description
     *
     * The object `UserType.userDetails` groups methods
     * manipulating `UserDetail` instances related to `UserType`.
     *
     * Call {@link lbServices.UserType#userDetails UserType.userDetails()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.UserType#userDetails
         * @methodOf lbServices.UserType
         *
         * @description
         *
         * Queries userDetails of userType.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserDetail` object.)
         * </em>
         */
        R.userDetails = function() {
          var TargetResource = $injector.get("UserDetail");
          var action = TargetResource["::get::userType::userDetails"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserType.userDetails#count
         * @methodOf lbServices.UserType.userDetails
         *
         * @description
         *
         * Counts userDetails of userType.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.userDetails.count = function() {
          var TargetResource = $injector.get("UserDetail");
          var action = TargetResource["::count::userType::userDetails"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserType.userDetails#create
         * @methodOf lbServices.UserType.userDetails
         *
         * @description
         *
         * Creates a new instance in userDetails of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserDetail` object.)
         * </em>
         */
        R.userDetails.create = function() {
          var TargetResource = $injector.get("UserDetail");
          var action = TargetResource["::create::userType::userDetails"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserType.userDetails#createMany
         * @methodOf lbServices.UserType.userDetails
         *
         * @description
         *
         * Creates a new instance in userDetails of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserDetail` object.)
         * </em>
         */
        R.userDetails.createMany = function() {
          var TargetResource = $injector.get("UserDetail");
          var action = TargetResource["::createMany::userType::userDetails"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserType.userDetails#destroyAll
         * @methodOf lbServices.UserType.userDetails
         *
         * @description
         *
         * Deletes all userDetails of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.userDetails.destroyAll = function() {
          var TargetResource = $injector.get("UserDetail");
          var action = TargetResource["::delete::userType::userDetails"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserType.userDetails#destroyById
         * @methodOf lbServices.UserType.userDetails
         *
         * @description
         *
         * Delete a related item by id for userDetails.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for userDetails
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.userDetails.destroyById = function() {
          var TargetResource = $injector.get("UserDetail");
          var action = TargetResource["::destroyById::userType::userDetails"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserType.userDetails#findById
         * @methodOf lbServices.UserType.userDetails
         *
         * @description
         *
         * Find a related item by id for userDetails.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for userDetails
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserDetail` object.)
         * </em>
         */
        R.userDetails.findById = function() {
          var TargetResource = $injector.get("UserDetail");
          var action = TargetResource["::findById::userType::userDetails"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserType.userDetails#updateById
         * @methodOf lbServices.UserType.userDetails
         *
         * @description
         *
         * Update a related item by id for userDetails.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for userDetails
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserDetail` object.)
         * </em>
         */
        R.userDetails.updateById = function() {
          var TargetResource = $injector.get("UserDetail");
          var action = TargetResource["::updateById::userType::userDetails"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.Email
 * @header lbServices.Email
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Email` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "Email",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/Emails/:id",
      { 'id': '@id' },
      {
      }
    );




    /**
    * @ngdoc property
    * @name lbServices.Email#modelName
    * @propertyOf lbServices.Email
    * @description
    * The name of the model represented by this $resource,
    * i.e. `Email`.
    */
    R.modelName = "Email";


    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.UserDetail
 * @header lbServices.UserDetail
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `UserDetail` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "UserDetail",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/userDetails/:id",
      { 'id': '@id' },
      {

        /**
         * @ngdoc method
         * @name lbServices.UserDetail#prototype$__findById__accessTokens
         * @methodOf lbServices.UserDetail
         *
         * @description
         *
         * Find a related item by id for accessTokens.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for accessTokens
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserDetail` object.)
         * </em>
         */
        "prototype$__findById__accessTokens": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/accessTokens/:fk",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.UserDetail#prototype$__destroyById__accessTokens
         * @methodOf lbServices.UserDetail
         *
         * @description
         *
         * Delete a related item by id for accessTokens.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for accessTokens
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "prototype$__destroyById__accessTokens": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/accessTokens/:fk",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.UserDetail#prototype$__updateById__accessTokens
         * @methodOf lbServices.UserDetail
         *
         * @description
         *
         * Update a related item by id for accessTokens.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for accessTokens
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserDetail` object.)
         * </em>
         */
        "prototype$__updateById__accessTokens": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/accessTokens/:fk",
          method: "PUT"
        },

        // INTERNAL. Use UserDetail.userType() instead.
        "prototype$__get__userType": {
          url: urlBase + "/userDetails/:id/userType",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.userProfiles.findById() instead.
        "prototype$__findById__userProfiles": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/userProfiles/:fk",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.userProfiles.destroyById() instead.
        "prototype$__destroyById__userProfiles": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/userProfiles/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use UserDetail.userProfiles.updateById() instead.
        "prototype$__updateById__userProfiles": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/userProfiles/:fk",
          method: "PUT"
        },

        // INTERNAL. Use UserDetail.endorsements.findById() instead.
        "prototype$__findById__endorsements": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/endorsements/:fk",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.endorsements.destroyById() instead.
        "prototype$__destroyById__endorsements": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/endorsements/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use UserDetail.endorsements.updateById() instead.
        "prototype$__updateById__endorsements": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/endorsements/:fk",
          method: "PUT"
        },

        // INTERNAL. Use UserDetail.endorsementRequests.findById() instead.
        "prototype$__findById__endorsementRequests": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/endorsementRequests/:fk",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.endorsementRequests.destroyById() instead.
        "prototype$__destroyById__endorsementRequests": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/endorsementRequests/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use UserDetail.endorsementRequests.updateById() instead.
        "prototype$__updateById__endorsementRequests": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/endorsementRequests/:fk",
          method: "PUT"
        },

        // INTERNAL. Use UserDetail.hrQuestions.findById() instead.
        "prototype$__findById__hrQuestions": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/hrQuestions/:fk",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.hrQuestions.destroyById() instead.
        "prototype$__destroyById__hrQuestions": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/hrQuestions/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use UserDetail.hrQuestions.updateById() instead.
        "prototype$__updateById__hrQuestions": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/hrQuestions/:fk",
          method: "PUT"
        },

        // INTERNAL. Use UserDetail.endorserQuestions.findById() instead.
        "prototype$__findById__endorserQuestions": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/endorserQuestions/:fk",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.endorserQuestions.destroyById() instead.
        "prototype$__destroyById__endorserQuestions": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/endorserQuestions/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use UserDetail.endorserQuestions.updateById() instead.
        "prototype$__updateById__endorserQuestions": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/endorserQuestions/:fk",
          method: "PUT"
        },

        // INTERNAL. Use UserDetail.company() instead.
        "prototype$__get__company": {
          url: urlBase + "/userDetails/:id/company",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.company.create() instead.
        "prototype$__create__company": {
          url: urlBase + "/userDetails/:id/company",
          method: "POST"
        },

        // INTERNAL. Use UserDetail.company.update() instead.
        "prototype$__update__company": {
          url: urlBase + "/userDetails/:id/company",
          method: "PUT"
        },

        // INTERNAL. Use UserDetail.company.destroy() instead.
        "prototype$__destroy__company": {
          url: urlBase + "/userDetails/:id/company",
          method: "DELETE"
        },

        // INTERNAL. Use UserDetail.endorsementSkills.findById() instead.
        "prototype$__findById__endorsementSkills": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/endorsementSkills/:fk",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.endorsementSkills.destroyById() instead.
        "prototype$__destroyById__endorsementSkills": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/endorsementSkills/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use UserDetail.endorsementSkills.updateById() instead.
        "prototype$__updateById__endorsementSkills": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/endorsementSkills/:fk",
          method: "PUT"
        },

        // INTERNAL. Use UserDetail.hrFeedbacks.findById() instead.
        "prototype$__findById__hrFeedbacks": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/hrFeedbacks/:fk",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.hrFeedbacks.destroyById() instead.
        "prototype$__destroyById__hrFeedbacks": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/hrFeedbacks/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use UserDetail.hrFeedbacks.updateById() instead.
        "prototype$__updateById__hrFeedbacks": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/hrFeedbacks/:fk",
          method: "PUT"
        },

        // INTERNAL. Use UserDetail.userFeedbacks.findById() instead.
        "prototype$__findById__userFeedbacks": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/userFeedbacks/:fk",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.userFeedbacks.destroyById() instead.
        "prototype$__destroyById__userFeedbacks": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/userFeedbacks/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use UserDetail.userFeedbacks.updateById() instead.
        "prototype$__updateById__userFeedbacks": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/userFeedbacks/:fk",
          method: "PUT"
        },

        // INTERNAL. Use UserDetail.userIdentities.findById() instead.
        "prototype$__findById__userIdentities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/userIdentities/:fk",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.userIdentities.destroyById() instead.
        "prototype$__destroyById__userIdentities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/userIdentities/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use UserDetail.userIdentities.updateById() instead.
        "prototype$__updateById__userIdentities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/userIdentities/:fk",
          method: "PUT"
        },

        // INTERNAL. Use UserDetail.jobPosts.findById() instead.
        "prototype$__findById__jobPosts": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/jobPosts/:fk",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.jobPosts.destroyById() instead.
        "prototype$__destroyById__jobPosts": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/jobPosts/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use UserDetail.jobPosts.updateById() instead.
        "prototype$__updateById__jobPosts": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/jobPosts/:fk",
          method: "PUT"
        },

        // INTERNAL. Use UserDetail.endorsets.findById() instead.
        "prototype$__findById__endorsets": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/endorsets/:fk",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.endorsets.destroyById() instead.
        "prototype$__destroyById__endorsets": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/endorsets/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use UserDetail.endorsets.updateById() instead.
        "prototype$__updateById__endorsets": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/endorsets/:fk",
          method: "PUT"
        },

        // INTERNAL. Use UserDetail.endorsetSkills.findById() instead.
        "prototype$__findById__endorsetSkills": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/endorsetSkills/:fk",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.endorsetSkills.destroyById() instead.
        "prototype$__destroyById__endorsetSkills": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/endorsetSkills/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use UserDetail.endorsetSkills.updateById() instead.
        "prototype$__updateById__endorsetSkills": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/endorsetSkills/:fk",
          method: "PUT"
        },

        // INTERNAL. Use UserDetail.endorserEndorsements.findById() instead.
        "prototype$__findById__endorserEndorsements": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/endorserEndorsements/:fk",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.endorserEndorsements.destroyById() instead.
        "prototype$__destroyById__endorserEndorsements": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/endorserEndorsements/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use UserDetail.endorserEndorsements.updateById() instead.
        "prototype$__updateById__endorserEndorsements": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/endorserEndorsements/:fk",
          method: "PUT"
        },

        // INTERNAL. Use UserDetail.companyRequests.findById() instead.
        "prototype$__findById__companyRequests": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/companyRequests/:fk",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.companyRequests.destroyById() instead.
        "prototype$__destroyById__companyRequests": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/companyRequests/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use UserDetail.companyRequests.updateById() instead.
        "prototype$__updateById__companyRequests": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/companyRequests/:fk",
          method: "PUT"
        },

        // INTERNAL. Use UserDetail.endorsetSents.findById() instead.
        "prototype$__findById__endorsetSents": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/endorsetSents/:fk",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.endorsetSents.destroyById() instead.
        "prototype$__destroyById__endorsetSents": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/endorsetSents/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use UserDetail.endorsetSents.updateById() instead.
        "prototype$__updateById__endorsetSents": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/endorsetSents/:fk",
          method: "PUT"
        },

        // INTERNAL. Use UserDetail.endorsetReceiveds.findById() instead.
        "prototype$__findById__endorsetReceiveds": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/endorsetReceiveds/:fk",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.endorsetReceiveds.destroyById() instead.
        "prototype$__destroyById__endorsetReceiveds": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/endorsetReceiveds/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use UserDetail.endorsetReceiveds.updateById() instead.
        "prototype$__updateById__endorsetReceiveds": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/endorsetReceiveds/:fk",
          method: "PUT"
        },

        // INTERNAL. Use UserDetail.notifications.findById() instead.
        "prototype$__findById__notifications": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/notifications/:fk",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.notifications.destroyById() instead.
        "prototype$__destroyById__notifications": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/notifications/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use UserDetail.notifications.updateById() instead.
        "prototype$__updateById__notifications": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/notifications/:fk",
          method: "PUT"
        },

        // INTERNAL. Use UserDetail.invitedUsers.findById() instead.
        "prototype$__findById__invitedUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/invitedUsers/:fk",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.invitedUsers.destroyById() instead.
        "prototype$__destroyById__invitedUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/invitedUsers/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use UserDetail.invitedUsers.updateById() instead.
        "prototype$__updateById__invitedUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/invitedUsers/:fk",
          method: "PUT"
        },

        // INTERNAL. Use UserDetail.invitations.findById() instead.
        "prototype$__findById__invitations": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/invitations/:fk",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.invitations.destroyById() instead.
        "prototype$__destroyById__invitations": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/invitations/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use UserDetail.invitations.updateById() instead.
        "prototype$__updateById__invitations": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/invitations/:fk",
          method: "PUT"
        },

        // INTERNAL. Use UserDetail.assignEndorsets.findById() instead.
        "prototype$__findById__assignEndorsets": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/assignEndorsets/:fk",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.assignEndorsets.destroyById() instead.
        "prototype$__destroyById__assignEndorsets": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/assignEndorsets/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use UserDetail.assignEndorsets.updateById() instead.
        "prototype$__updateById__assignEndorsets": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/assignEndorsets/:fk",
          method: "PUT"
        },

        // INTERNAL. Use UserDetail.assignedEndorsets.findById() instead.
        "prototype$__findById__assignedEndorsets": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/assignedEndorsets/:fk",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.assignedEndorsets.destroyById() instead.
        "prototype$__destroyById__assignedEndorsets": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/assignedEndorsets/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use UserDetail.assignedEndorsets.updateById() instead.
        "prototype$__updateById__assignedEndorsets": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/assignedEndorsets/:fk",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.UserDetail#prototype$__get__accessTokens
         * @methodOf lbServices.UserDetail
         *
         * @description
         *
         * Queries accessTokens of userDetail.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserDetail` object.)
         * </em>
         */
        "prototype$__get__accessTokens": {
          isArray: true,
          url: urlBase + "/userDetails/:id/accessTokens",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.UserDetail#prototype$__create__accessTokens
         * @methodOf lbServices.UserDetail
         *
         * @description
         *
         * Creates a new instance in accessTokens of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserDetail` object.)
         * </em>
         */
        "prototype$__create__accessTokens": {
          url: urlBase + "/userDetails/:id/accessTokens",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.UserDetail#prototype$__delete__accessTokens
         * @methodOf lbServices.UserDetail
         *
         * @description
         *
         * Deletes all accessTokens of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "prototype$__delete__accessTokens": {
          url: urlBase + "/userDetails/:id/accessTokens",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.UserDetail#prototype$__count__accessTokens
         * @methodOf lbServices.UserDetail
         *
         * @description
         *
         * Counts accessTokens of userDetail.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "prototype$__count__accessTokens": {
          url: urlBase + "/userDetails/:id/accessTokens/count",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.userProfiles() instead.
        "prototype$__get__userProfiles": {
          isArray: true,
          url: urlBase + "/userDetails/:id/userProfiles",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.userProfiles.create() instead.
        "prototype$__create__userProfiles": {
          url: urlBase + "/userDetails/:id/userProfiles",
          method: "POST"
        },

        // INTERNAL. Use UserDetail.userProfiles.destroyAll() instead.
        "prototype$__delete__userProfiles": {
          url: urlBase + "/userDetails/:id/userProfiles",
          method: "DELETE"
        },

        // INTERNAL. Use UserDetail.userProfiles.count() instead.
        "prototype$__count__userProfiles": {
          url: urlBase + "/userDetails/:id/userProfiles/count",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.endorsements() instead.
        "prototype$__get__endorsements": {
          isArray: true,
          url: urlBase + "/userDetails/:id/endorsements",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.endorsements.create() instead.
        "prototype$__create__endorsements": {
          url: urlBase + "/userDetails/:id/endorsements",
          method: "POST"
        },

        // INTERNAL. Use UserDetail.endorsements.destroyAll() instead.
        "prototype$__delete__endorsements": {
          url: urlBase + "/userDetails/:id/endorsements",
          method: "DELETE"
        },

        // INTERNAL. Use UserDetail.endorsements.count() instead.
        "prototype$__count__endorsements": {
          url: urlBase + "/userDetails/:id/endorsements/count",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.endorsementRequests() instead.
        "prototype$__get__endorsementRequests": {
          isArray: true,
          url: urlBase + "/userDetails/:id/endorsementRequests",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.endorsementRequests.create() instead.
        "prototype$__create__endorsementRequests": {
          url: urlBase + "/userDetails/:id/endorsementRequests",
          method: "POST"
        },

        // INTERNAL. Use UserDetail.endorsementRequests.destroyAll() instead.
        "prototype$__delete__endorsementRequests": {
          url: urlBase + "/userDetails/:id/endorsementRequests",
          method: "DELETE"
        },

        // INTERNAL. Use UserDetail.endorsementRequests.count() instead.
        "prototype$__count__endorsementRequests": {
          url: urlBase + "/userDetails/:id/endorsementRequests/count",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.hrQuestions() instead.
        "prototype$__get__hrQuestions": {
          isArray: true,
          url: urlBase + "/userDetails/:id/hrQuestions",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.hrQuestions.create() instead.
        "prototype$__create__hrQuestions": {
          url: urlBase + "/userDetails/:id/hrQuestions",
          method: "POST"
        },

        // INTERNAL. Use UserDetail.hrQuestions.destroyAll() instead.
        "prototype$__delete__hrQuestions": {
          url: urlBase + "/userDetails/:id/hrQuestions",
          method: "DELETE"
        },

        // INTERNAL. Use UserDetail.hrQuestions.count() instead.
        "prototype$__count__hrQuestions": {
          url: urlBase + "/userDetails/:id/hrQuestions/count",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.endorserQuestions() instead.
        "prototype$__get__endorserQuestions": {
          isArray: true,
          url: urlBase + "/userDetails/:id/endorserQuestions",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.endorserQuestions.create() instead.
        "prototype$__create__endorserQuestions": {
          url: urlBase + "/userDetails/:id/endorserQuestions",
          method: "POST"
        },

        // INTERNAL. Use UserDetail.endorserQuestions.destroyAll() instead.
        "prototype$__delete__endorserQuestions": {
          url: urlBase + "/userDetails/:id/endorserQuestions",
          method: "DELETE"
        },

        // INTERNAL. Use UserDetail.endorserQuestions.count() instead.
        "prototype$__count__endorserQuestions": {
          url: urlBase + "/userDetails/:id/endorserQuestions/count",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.endorsementSkills() instead.
        "prototype$__get__endorsementSkills": {
          isArray: true,
          url: urlBase + "/userDetails/:id/endorsementSkills",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.endorsementSkills.create() instead.
        "prototype$__create__endorsementSkills": {
          url: urlBase + "/userDetails/:id/endorsementSkills",
          method: "POST"
        },

        // INTERNAL. Use UserDetail.endorsementSkills.destroyAll() instead.
        "prototype$__delete__endorsementSkills": {
          url: urlBase + "/userDetails/:id/endorsementSkills",
          method: "DELETE"
        },

        // INTERNAL. Use UserDetail.endorsementSkills.count() instead.
        "prototype$__count__endorsementSkills": {
          url: urlBase + "/userDetails/:id/endorsementSkills/count",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.hrFeedbacks() instead.
        "prototype$__get__hrFeedbacks": {
          isArray: true,
          url: urlBase + "/userDetails/:id/hrFeedbacks",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.hrFeedbacks.create() instead.
        "prototype$__create__hrFeedbacks": {
          url: urlBase + "/userDetails/:id/hrFeedbacks",
          method: "POST"
        },

        // INTERNAL. Use UserDetail.hrFeedbacks.destroyAll() instead.
        "prototype$__delete__hrFeedbacks": {
          url: urlBase + "/userDetails/:id/hrFeedbacks",
          method: "DELETE"
        },

        // INTERNAL. Use UserDetail.hrFeedbacks.count() instead.
        "prototype$__count__hrFeedbacks": {
          url: urlBase + "/userDetails/:id/hrFeedbacks/count",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.userFeedbacks() instead.
        "prototype$__get__userFeedbacks": {
          isArray: true,
          url: urlBase + "/userDetails/:id/userFeedbacks",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.userFeedbacks.create() instead.
        "prototype$__create__userFeedbacks": {
          url: urlBase + "/userDetails/:id/userFeedbacks",
          method: "POST"
        },

        // INTERNAL. Use UserDetail.userFeedbacks.destroyAll() instead.
        "prototype$__delete__userFeedbacks": {
          url: urlBase + "/userDetails/:id/userFeedbacks",
          method: "DELETE"
        },

        // INTERNAL. Use UserDetail.userFeedbacks.count() instead.
        "prototype$__count__userFeedbacks": {
          url: urlBase + "/userDetails/:id/userFeedbacks/count",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.userIdentities() instead.
        "prototype$__get__userIdentities": {
          isArray: true,
          url: urlBase + "/userDetails/:id/userIdentities",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.userIdentities.create() instead.
        "prototype$__create__userIdentities": {
          url: urlBase + "/userDetails/:id/userIdentities",
          method: "POST"
        },

        // INTERNAL. Use UserDetail.userIdentities.destroyAll() instead.
        "prototype$__delete__userIdentities": {
          url: urlBase + "/userDetails/:id/userIdentities",
          method: "DELETE"
        },

        // INTERNAL. Use UserDetail.userIdentities.count() instead.
        "prototype$__count__userIdentities": {
          url: urlBase + "/userDetails/:id/userIdentities/count",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.jobPosts() instead.
        "prototype$__get__jobPosts": {
          isArray: true,
          url: urlBase + "/userDetails/:id/jobPosts",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.jobPosts.create() instead.
        "prototype$__create__jobPosts": {
          url: urlBase + "/userDetails/:id/jobPosts",
          method: "POST"
        },

        // INTERNAL. Use UserDetail.jobPosts.destroyAll() instead.
        "prototype$__delete__jobPosts": {
          url: urlBase + "/userDetails/:id/jobPosts",
          method: "DELETE"
        },

        // INTERNAL. Use UserDetail.jobPosts.count() instead.
        "prototype$__count__jobPosts": {
          url: urlBase + "/userDetails/:id/jobPosts/count",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.endorsets() instead.
        "prototype$__get__endorsets": {
          isArray: true,
          url: urlBase + "/userDetails/:id/endorsets",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.endorsets.create() instead.
        "prototype$__create__endorsets": {
          url: urlBase + "/userDetails/:id/endorsets",
          method: "POST"
        },

        // INTERNAL. Use UserDetail.endorsets.destroyAll() instead.
        "prototype$__delete__endorsets": {
          url: urlBase + "/userDetails/:id/endorsets",
          method: "DELETE"
        },

        // INTERNAL. Use UserDetail.endorsets.count() instead.
        "prototype$__count__endorsets": {
          url: urlBase + "/userDetails/:id/endorsets/count",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.endorsetSkills() instead.
        "prototype$__get__endorsetSkills": {
          isArray: true,
          url: urlBase + "/userDetails/:id/endorsetSkills",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.endorsetSkills.create() instead.
        "prototype$__create__endorsetSkills": {
          url: urlBase + "/userDetails/:id/endorsetSkills",
          method: "POST"
        },

        // INTERNAL. Use UserDetail.endorsetSkills.destroyAll() instead.
        "prototype$__delete__endorsetSkills": {
          url: urlBase + "/userDetails/:id/endorsetSkills",
          method: "DELETE"
        },

        // INTERNAL. Use UserDetail.endorsetSkills.count() instead.
        "prototype$__count__endorsetSkills": {
          url: urlBase + "/userDetails/:id/endorsetSkills/count",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.endorserEndorsements() instead.
        "prototype$__get__endorserEndorsements": {
          isArray: true,
          url: urlBase + "/userDetails/:id/endorserEndorsements",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.endorserEndorsements.create() instead.
        "prototype$__create__endorserEndorsements": {
          url: urlBase + "/userDetails/:id/endorserEndorsements",
          method: "POST"
        },

        // INTERNAL. Use UserDetail.endorserEndorsements.destroyAll() instead.
        "prototype$__delete__endorserEndorsements": {
          url: urlBase + "/userDetails/:id/endorserEndorsements",
          method: "DELETE"
        },

        // INTERNAL. Use UserDetail.endorserEndorsements.count() instead.
        "prototype$__count__endorserEndorsements": {
          url: urlBase + "/userDetails/:id/endorserEndorsements/count",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.companyRequests() instead.
        "prototype$__get__companyRequests": {
          isArray: true,
          url: urlBase + "/userDetails/:id/companyRequests",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.companyRequests.create() instead.
        "prototype$__create__companyRequests": {
          url: urlBase + "/userDetails/:id/companyRequests",
          method: "POST"
        },

        // INTERNAL. Use UserDetail.companyRequests.destroyAll() instead.
        "prototype$__delete__companyRequests": {
          url: urlBase + "/userDetails/:id/companyRequests",
          method: "DELETE"
        },

        // INTERNAL. Use UserDetail.companyRequests.count() instead.
        "prototype$__count__companyRequests": {
          url: urlBase + "/userDetails/:id/companyRequests/count",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.endorsetSents() instead.
        "prototype$__get__endorsetSents": {
          isArray: true,
          url: urlBase + "/userDetails/:id/endorsetSents",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.endorsetSents.create() instead.
        "prototype$__create__endorsetSents": {
          url: urlBase + "/userDetails/:id/endorsetSents",
          method: "POST"
        },

        // INTERNAL. Use UserDetail.endorsetSents.destroyAll() instead.
        "prototype$__delete__endorsetSents": {
          url: urlBase + "/userDetails/:id/endorsetSents",
          method: "DELETE"
        },

        // INTERNAL. Use UserDetail.endorsetSents.count() instead.
        "prototype$__count__endorsetSents": {
          url: urlBase + "/userDetails/:id/endorsetSents/count",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.endorsetReceiveds() instead.
        "prototype$__get__endorsetReceiveds": {
          isArray: true,
          url: urlBase + "/userDetails/:id/endorsetReceiveds",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.endorsetReceiveds.create() instead.
        "prototype$__create__endorsetReceiveds": {
          url: urlBase + "/userDetails/:id/endorsetReceiveds",
          method: "POST"
        },

        // INTERNAL. Use UserDetail.endorsetReceiveds.destroyAll() instead.
        "prototype$__delete__endorsetReceiveds": {
          url: urlBase + "/userDetails/:id/endorsetReceiveds",
          method: "DELETE"
        },

        // INTERNAL. Use UserDetail.endorsetReceiveds.count() instead.
        "prototype$__count__endorsetReceiveds": {
          url: urlBase + "/userDetails/:id/endorsetReceiveds/count",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.notifications() instead.
        "prototype$__get__notifications": {
          isArray: true,
          url: urlBase + "/userDetails/:id/notifications",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.notifications.create() instead.
        "prototype$__create__notifications": {
          url: urlBase + "/userDetails/:id/notifications",
          method: "POST"
        },

        // INTERNAL. Use UserDetail.notifications.destroyAll() instead.
        "prototype$__delete__notifications": {
          url: urlBase + "/userDetails/:id/notifications",
          method: "DELETE"
        },

        // INTERNAL. Use UserDetail.notifications.count() instead.
        "prototype$__count__notifications": {
          url: urlBase + "/userDetails/:id/notifications/count",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.invitedUsers() instead.
        "prototype$__get__invitedUsers": {
          isArray: true,
          url: urlBase + "/userDetails/:id/invitedUsers",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.invitedUsers.create() instead.
        "prototype$__create__invitedUsers": {
          url: urlBase + "/userDetails/:id/invitedUsers",
          method: "POST"
        },

        // INTERNAL. Use UserDetail.invitedUsers.destroyAll() instead.
        "prototype$__delete__invitedUsers": {
          url: urlBase + "/userDetails/:id/invitedUsers",
          method: "DELETE"
        },

        // INTERNAL. Use UserDetail.invitedUsers.count() instead.
        "prototype$__count__invitedUsers": {
          url: urlBase + "/userDetails/:id/invitedUsers/count",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.invitations() instead.
        "prototype$__get__invitations": {
          isArray: true,
          url: urlBase + "/userDetails/:id/invitations",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.invitations.create() instead.
        "prototype$__create__invitations": {
          url: urlBase + "/userDetails/:id/invitations",
          method: "POST"
        },

        // INTERNAL. Use UserDetail.invitations.destroyAll() instead.
        "prototype$__delete__invitations": {
          url: urlBase + "/userDetails/:id/invitations",
          method: "DELETE"
        },

        // INTERNAL. Use UserDetail.invitations.count() instead.
        "prototype$__count__invitations": {
          url: urlBase + "/userDetails/:id/invitations/count",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.assignEndorsets() instead.
        "prototype$__get__assignEndorsets": {
          isArray: true,
          url: urlBase + "/userDetails/:id/assignEndorsets",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.assignEndorsets.create() instead.
        "prototype$__create__assignEndorsets": {
          url: urlBase + "/userDetails/:id/assignEndorsets",
          method: "POST"
        },

        // INTERNAL. Use UserDetail.assignEndorsets.destroyAll() instead.
        "prototype$__delete__assignEndorsets": {
          url: urlBase + "/userDetails/:id/assignEndorsets",
          method: "DELETE"
        },

        // INTERNAL. Use UserDetail.assignEndorsets.count() instead.
        "prototype$__count__assignEndorsets": {
          url: urlBase + "/userDetails/:id/assignEndorsets/count",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.assignedEndorsets() instead.
        "prototype$__get__assignedEndorsets": {
          isArray: true,
          url: urlBase + "/userDetails/:id/assignedEndorsets",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.assignedEndorsets.create() instead.
        "prototype$__create__assignedEndorsets": {
          url: urlBase + "/userDetails/:id/assignedEndorsets",
          method: "POST"
        },

        // INTERNAL. Use UserDetail.assignedEndorsets.destroyAll() instead.
        "prototype$__delete__assignedEndorsets": {
          url: urlBase + "/userDetails/:id/assignedEndorsets",
          method: "DELETE"
        },

        // INTERNAL. Use UserDetail.assignedEndorsets.count() instead.
        "prototype$__count__assignedEndorsets": {
          url: urlBase + "/userDetails/:id/assignedEndorsets/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.UserDetail#create
         * @methodOf lbServices.UserDetail
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserDetail` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/userDetails",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.UserDetail#createMany
         * @methodOf lbServices.UserDetail
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserDetail` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/userDetails",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.UserDetail#upsert
         * @methodOf lbServices.UserDetail
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserDetail` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/userDetails",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.UserDetail#exists
         * @methodOf lbServices.UserDetail
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/userDetails/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.UserDetail#findById
         * @methodOf lbServices.UserDetail
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserDetail` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/userDetails/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.UserDetail#find
         * @methodOf lbServices.UserDetail
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserDetail` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/userDetails",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.UserDetail#findOne
         * @methodOf lbServices.UserDetail
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserDetail` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/userDetails/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.UserDetail#updateAll
         * @methodOf lbServices.UserDetail
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "updateAll": {
          url: urlBase + "/userDetails/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.UserDetail#deleteById
         * @methodOf lbServices.UserDetail
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "deleteById": {
          url: urlBase + "/userDetails/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.UserDetail#count
         * @methodOf lbServices.UserDetail
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/userDetails/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.UserDetail#prototype$updateAttributes
         * @methodOf lbServices.UserDetail
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserDetail` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/userDetails/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.UserDetail#createChangeStream
         * @methodOf lbServices.UserDetail
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/userDetails/change-stream",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.UserDetail#login
         * @methodOf lbServices.UserDetail
         *
         * @description
         *
         * Login a user with username/email and password.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `include` – `{string=}` - Related objects to include in the response. See the description of return value for more details.
         *   Default value: `user`.
         *
         *  - `rememberMe` - `boolean` - Whether the authentication credentials
         *     should be remembered in localStorage across app/browser restarts.
         *     Default: `true`.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The response body contains properties of the AccessToken created on login.
         * Depending on the value of `include` parameter, the body may contain additional properties:
         * 
         *   - `user` - `{User}` - Data of the currently logged in user. (`include=user`)
         * 
         *
         */
        "login": {
          params: {
            include: "user"
          },
          interceptor: {
            response: function(response) {
              var accessToken = response.data;
              LoopBackAuth.setUser(accessToken.id, accessToken.userId, accessToken.user);
              LoopBackAuth.rememberMe = response.config.params.rememberMe !== false;
              LoopBackAuth.save();
              return response.resource;
            }
          },
          url: urlBase + "/userDetails/login",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.UserDetail#logout
         * @methodOf lbServices.UserDetail
         *
         * @description
         *
         * Logout a user with access token
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `access_token` – `{string}` - Do not supply this argument, it is automatically extracted from request headers.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "logout": {
          interceptor: {
            response: function(response) {
              LoopBackAuth.clearUser();
              LoopBackAuth.clearStorage();
              return response.resource;
            }
          },
          url: urlBase + "/userDetails/logout",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.UserDetail#confirm
         * @methodOf lbServices.UserDetail
         *
         * @description
         *
         * Confirm a user registration with email verification token
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `uid` – `{string}` - 
         *
         *  - `token` – `{string}` - 
         *
         *  - `redirect` – `{string=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "confirm": {
          url: urlBase + "/userDetails/confirm",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.UserDetail#resetPassword
         * @methodOf lbServices.UserDetail
         *
         * @description
         *
         * Reset password for a user with email
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "resetPassword": {
          url: urlBase + "/userDetails/reset",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.UserDetail#upload
         * @methodOf lbServices.UserDetail
         *
         * @description
         *
         * Uploads a file
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {Object} postData Request data.
         *
         *  - `ctx` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserDetail` object.)
         * </em>
         */
        "upload": {
          url: urlBase + "/userDetails/upload",
          method: "POST"
        },

        // INTERNAL. Use UserType.userDetails.findById() instead.
        "::findById::userType::userDetails": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userTypes/:id/userDetails/:fk",
          method: "GET"
        },

        // INTERNAL. Use UserType.userDetails.destroyById() instead.
        "::destroyById::userType::userDetails": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userTypes/:id/userDetails/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use UserType.userDetails.updateById() instead.
        "::updateById::userType::userDetails": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userTypes/:id/userDetails/:fk",
          method: "PUT"
        },

        // INTERNAL. Use UserType.userDetails() instead.
        "::get::userType::userDetails": {
          isArray: true,
          url: urlBase + "/userTypes/:id/userDetails",
          method: "GET"
        },

        // INTERNAL. Use UserType.userDetails.create() instead.
        "::create::userType::userDetails": {
          url: urlBase + "/userTypes/:id/userDetails",
          method: "POST"
        },

        // INTERNAL. Use UserType.userDetails.createMany() instead.
        "::createMany::userType::userDetails": {
          isArray: true,
          url: urlBase + "/userTypes/:id/userDetails",
          method: "POST"
        },

        // INTERNAL. Use UserType.userDetails.destroyAll() instead.
        "::delete::userType::userDetails": {
          url: urlBase + "/userTypes/:id/userDetails",
          method: "DELETE"
        },

        // INTERNAL. Use UserType.userDetails.count() instead.
        "::count::userType::userDetails": {
          url: urlBase + "/userTypes/:id/userDetails/count",
          method: "GET"
        },

        // INTERNAL. Use UserProfile.userDetail() instead.
        "::get::userProfile::userDetail": {
          url: urlBase + "/profiles/:id/userDetail",
          method: "GET"
        },

        // INTERNAL. Use Endorsement.userDetail() instead.
        "::get::endorsement::userDetail": {
          url: urlBase + "/endorsements/:id/userDetail",
          method: "GET"
        },

        // INTERNAL. Use Endorsement.endorserUser() instead.
        "::get::endorsement::endorserUser": {
          url: urlBase + "/endorsements/:id/endorserUser",
          method: "GET"
        },

        // INTERNAL. Use Question.hrDetail() instead.
        "::get::question::hrDetail": {
          url: urlBase + "/questions/:id/hrDetail",
          method: "GET"
        },

        // INTERNAL. Use Question.endorser() instead.
        "::get::question::endorser": {
          url: urlBase + "/questions/:id/endorser",
          method: "GET"
        },

        // INTERNAL. Use Company.userDetail() instead.
        "::get::company::userDetail": {
          url: urlBase + "/companies/:id/userDetail",
          method: "GET"
        },

        // INTERNAL. Use EndorsementSkill.userDetail() instead.
        "::get::endorsementSkill::userDetail": {
          url: urlBase + "/endorsementSkills/:id/userDetail",
          method: "GET"
        },

        // INTERNAL. Use HrFeedback.userDetail() instead.
        "::get::hrFeedback::userDetail": {
          url: urlBase + "/hrFeedbacks/:id/userDetail",
          method: "GET"
        },

        // INTERNAL. Use HrFeedback.hr() instead.
        "::get::hrFeedback::hr": {
          url: urlBase + "/hrFeedbacks/:id/hr",
          method: "GET"
        },

        // INTERNAL. Use UserIdentity.userDetail() instead.
        "::get::userIdentity::userDetail": {
          url: urlBase + "/userIdentities/:id/userDetail",
          method: "GET"
        },

        // INTERNAL. Use JobPost.userDetail() instead.
        "::get::jobPost::userDetail": {
          url: urlBase + "/jobPosts/:id/userDetail",
          method: "GET"
        },

        // INTERNAL. Use Endorset.userDetail() instead.
        "::get::endorset::userDetail": {
          url: urlBase + "/endorsets/:id/userDetail",
          method: "GET"
        },

        // INTERNAL. Use EndorsetSkill.userDetail() instead.
        "::get::endorsetSkill::userDetail": {
          url: urlBase + "/endorsetSkills/:id/userDetail",
          method: "GET"
        },

        // INTERNAL. Use Vote.hr() instead.
        "::get::vote::hr": {
          url: urlBase + "/votes/:id/hr",
          method: "GET"
        },

        // INTERNAL. Use EndorserEndorsement.userDetail() instead.
        "::get::endorserEndorsement::userDetail": {
          url: urlBase + "/endorserEndorsements/:id/userDetail",
          method: "GET"
        },

        // INTERNAL. Use CompanyRequest.userDetail() instead.
        "::get::companyRequest::userDetail": {
          url: urlBase + "/companyRequests/:id/userDetail",
          method: "GET"
        },

        // INTERNAL. Use CompanyRequest.professionalUser() instead.
        "::get::companyRequest::professionalUser": {
          url: urlBase + "/companyRequests/:id/professionalUser",
          method: "GET"
        },

        // INTERNAL. Use EndorsetSent.userDetail() instead.
        "::get::endorsetSent::userDetail": {
          url: urlBase + "/endorsetSents/:id/userDetail",
          method: "GET"
        },

        // INTERNAL. Use EndorsetSent.companyUser() instead.
        "::get::endorsetSent::companyUser": {
          url: urlBase + "/endorsetSents/:id/companyUser",
          method: "GET"
        },

        // INTERNAL. Use Notification.userDetail() instead.
        "::get::notification::userDetail": {
          url: urlBase + "/notifications/:id/userDetail",
          method: "GET"
        },

        // INTERNAL. Use Notification.createdByUser() instead.
        "::get::notification::createdByUser": {
          url: urlBase + "/notifications/:id/createdByUser",
          method: "GET"
        },

        // INTERNAL. Use Notification.createManydByUser() instead.
        "::get::notification::createManydByUser": {
          isArray: true,
          url: urlBase + "/notifications/:id/createdByUser",
          method: "GET"
        },

        // INTERNAL. Use InviteUser.adminUser() instead.
        "::get::inviteUser::adminUser": {
          url: urlBase + "/inviteUsers/:id/adminUser",
          method: "GET"
        },

        // INTERNAL. Use InviteUser.userDetail() instead.
        "::get::inviteUser::userDetail": {
          url: urlBase + "/inviteUsers/:id/userDetail",
          method: "GET"
        },

        // INTERNAL. Use AssignEndorsets.userDetail() instead.
        "::get::assignEndorsets::userDetail": {
          url: urlBase + "/assignEndorsets/:id/userDetail",
          method: "GET"
        },

        // INTERNAL. Use AssignEndorsets.companyUser() instead.
        "::get::assignEndorsets::companyUser": {
          url: urlBase + "/assignEndorsets/:id/companyUser",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.UserDetail#getCurrent
         * @methodOf lbServices.UserDetail
         *
         * @description
         *
         * Get data of the currently logged user. Fail with HTTP result 401
         * when there is no user logged in.
         *
         * @param {function(Object,Object)=} successCb
         *    Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *    `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         */
        "getCurrent": {
           url: urlBase + "/userDetails" + "/:id",
           method: "GET",
           params: {
             id: function() {
              var id = LoopBackAuth.currentUserId;
              if (id == null) id = '__anonymous__';
              return id;
            },
          },
          interceptor: {
            response: function(response) {
              LoopBackAuth.currentUserData = response.data;
              return response.resource;
            }
          },
          __isGetCurrentUser__ : true
        }
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.UserDetail#updateOrCreate
         * @methodOf lbServices.UserDetail
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserDetail` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.UserDetail#update
         * @methodOf lbServices.UserDetail
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.UserDetail#destroyById
         * @methodOf lbServices.UserDetail
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.UserDetail#removeById
         * @methodOf lbServices.UserDetail
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["removeById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.UserDetail#getCachedCurrent
         * @methodOf lbServices.UserDetail
         *
         * @description
         *
         * Get data of the currently logged user that was returned by the last
         * call to {@link lbServices.UserDetail#login} or
         * {@link lbServices.UserDetail#getCurrent}. Return null when there
         * is no user logged in or the data of the current user were not fetched
         * yet.
         *
         * @returns {Object} A UserDetail instance.
         */
        R.getCachedCurrent = function() {
          var data = LoopBackAuth.currentUserData;
          return data ? new R(data) : null;
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail#isAuthenticated
         * @methodOf lbServices.UserDetail
         *
         * @returns {boolean} True if the current user is authenticated (logged in).
         */
        R.isAuthenticated = function() {
          return this.getCurrentId() != null;
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail#getCurrentId
         * @methodOf lbServices.UserDetail
         *
         * @returns {Object} Id of the currently logged-in user or null.
         */
        R.getCurrentId = function() {
          return LoopBackAuth.currentUserId;
        };

    /**
    * @ngdoc property
    * @name lbServices.UserDetail#modelName
    * @propertyOf lbServices.UserDetail
    * @description
    * The name of the model represented by this $resource,
    * i.e. `UserDetail`.
    */
    R.modelName = "UserDetail";


        /**
         * @ngdoc method
         * @name lbServices.UserDetail#userType
         * @methodOf lbServices.UserDetail
         *
         * @description
         *
         * Fetches belongsTo relation userType.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserType` object.)
         * </em>
         */
        R.userType = function() {
          var TargetResource = $injector.get("UserType");
          var action = TargetResource["::get::userDetail::userType"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.UserDetail.userProfiles
     * @header lbServices.UserDetail.userProfiles
     * @object
     * @description
     *
     * The object `UserDetail.userProfiles` groups methods
     * manipulating `UserProfile` instances related to `UserDetail`.
     *
     * Call {@link lbServices.UserDetail#userProfiles UserDetail.userProfiles()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.UserDetail#userProfiles
         * @methodOf lbServices.UserDetail
         *
         * @description
         *
         * Queries userProfiles of userDetail.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserProfile` object.)
         * </em>
         */
        R.userProfiles = function() {
          var TargetResource = $injector.get("UserProfile");
          var action = TargetResource["::get::userDetail::userProfiles"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.userProfiles#count
         * @methodOf lbServices.UserDetail.userProfiles
         *
         * @description
         *
         * Counts userProfiles of userDetail.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.userProfiles.count = function() {
          var TargetResource = $injector.get("UserProfile");
          var action = TargetResource["::count::userDetail::userProfiles"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.userProfiles#create
         * @methodOf lbServices.UserDetail.userProfiles
         *
         * @description
         *
         * Creates a new instance in userProfiles of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserProfile` object.)
         * </em>
         */
        R.userProfiles.create = function() {
          var TargetResource = $injector.get("UserProfile");
          var action = TargetResource["::create::userDetail::userProfiles"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.userProfiles#createMany
         * @methodOf lbServices.UserDetail.userProfiles
         *
         * @description
         *
         * Creates a new instance in userProfiles of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserProfile` object.)
         * </em>
         */
        R.userProfiles.createMany = function() {
          var TargetResource = $injector.get("UserProfile");
          var action = TargetResource["::createMany::userDetail::userProfiles"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.userProfiles#destroyAll
         * @methodOf lbServices.UserDetail.userProfiles
         *
         * @description
         *
         * Deletes all userProfiles of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.userProfiles.destroyAll = function() {
          var TargetResource = $injector.get("UserProfile");
          var action = TargetResource["::delete::userDetail::userProfiles"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.userProfiles#destroyById
         * @methodOf lbServices.UserDetail.userProfiles
         *
         * @description
         *
         * Delete a related item by id for userProfiles.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for userProfiles
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.userProfiles.destroyById = function() {
          var TargetResource = $injector.get("UserProfile");
          var action = TargetResource["::destroyById::userDetail::userProfiles"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.userProfiles#findById
         * @methodOf lbServices.UserDetail.userProfiles
         *
         * @description
         *
         * Find a related item by id for userProfiles.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for userProfiles
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserProfile` object.)
         * </em>
         */
        R.userProfiles.findById = function() {
          var TargetResource = $injector.get("UserProfile");
          var action = TargetResource["::findById::userDetail::userProfiles"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.userProfiles#updateById
         * @methodOf lbServices.UserDetail.userProfiles
         *
         * @description
         *
         * Update a related item by id for userProfiles.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for userProfiles
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserProfile` object.)
         * </em>
         */
        R.userProfiles.updateById = function() {
          var TargetResource = $injector.get("UserProfile");
          var action = TargetResource["::updateById::userDetail::userProfiles"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.UserDetail.endorsements
     * @header lbServices.UserDetail.endorsements
     * @object
     * @description
     *
     * The object `UserDetail.endorsements` groups methods
     * manipulating `Endorsement` instances related to `UserDetail`.
     *
     * Call {@link lbServices.UserDetail#endorsements UserDetail.endorsements()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.UserDetail#endorsements
         * @methodOf lbServices.UserDetail
         *
         * @description
         *
         * Queries endorsements of userDetail.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Endorsement` object.)
         * </em>
         */
        R.endorsements = function() {
          var TargetResource = $injector.get("Endorsement");
          var action = TargetResource["::get::userDetail::endorsements"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.endorsements#count
         * @methodOf lbServices.UserDetail.endorsements
         *
         * @description
         *
         * Counts endorsements of userDetail.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.endorsements.count = function() {
          var TargetResource = $injector.get("Endorsement");
          var action = TargetResource["::count::userDetail::endorsements"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.endorsements#create
         * @methodOf lbServices.UserDetail.endorsements
         *
         * @description
         *
         * Creates a new instance in endorsements of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Endorsement` object.)
         * </em>
         */
        R.endorsements.create = function() {
          var TargetResource = $injector.get("Endorsement");
          var action = TargetResource["::create::userDetail::endorsements"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.endorsements#createMany
         * @methodOf lbServices.UserDetail.endorsements
         *
         * @description
         *
         * Creates a new instance in endorsements of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Endorsement` object.)
         * </em>
         */
        R.endorsements.createMany = function() {
          var TargetResource = $injector.get("Endorsement");
          var action = TargetResource["::createMany::userDetail::endorsements"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.endorsements#destroyAll
         * @methodOf lbServices.UserDetail.endorsements
         *
         * @description
         *
         * Deletes all endorsements of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.endorsements.destroyAll = function() {
          var TargetResource = $injector.get("Endorsement");
          var action = TargetResource["::delete::userDetail::endorsements"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.endorsements#destroyById
         * @methodOf lbServices.UserDetail.endorsements
         *
         * @description
         *
         * Delete a related item by id for endorsements.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for endorsements
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.endorsements.destroyById = function() {
          var TargetResource = $injector.get("Endorsement");
          var action = TargetResource["::destroyById::userDetail::endorsements"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.endorsements#findById
         * @methodOf lbServices.UserDetail.endorsements
         *
         * @description
         *
         * Find a related item by id for endorsements.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for endorsements
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Endorsement` object.)
         * </em>
         */
        R.endorsements.findById = function() {
          var TargetResource = $injector.get("Endorsement");
          var action = TargetResource["::findById::userDetail::endorsements"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.endorsements#updateById
         * @methodOf lbServices.UserDetail.endorsements
         *
         * @description
         *
         * Update a related item by id for endorsements.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for endorsements
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Endorsement` object.)
         * </em>
         */
        R.endorsements.updateById = function() {
          var TargetResource = $injector.get("Endorsement");
          var action = TargetResource["::updateById::userDetail::endorsements"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.UserDetail.endorsementRequests
     * @header lbServices.UserDetail.endorsementRequests
     * @object
     * @description
     *
     * The object `UserDetail.endorsementRequests` groups methods
     * manipulating `Endorsement` instances related to `UserDetail`.
     *
     * Call {@link lbServices.UserDetail#endorsementRequests UserDetail.endorsementRequests()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.UserDetail#endorsementRequests
         * @methodOf lbServices.UserDetail
         *
         * @description
         *
         * Queries endorsementRequests of userDetail.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Endorsement` object.)
         * </em>
         */
        R.endorsementRequests = function() {
          var TargetResource = $injector.get("Endorsement");
          var action = TargetResource["::get::userDetail::endorsementRequests"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.endorsementRequests#count
         * @methodOf lbServices.UserDetail.endorsementRequests
         *
         * @description
         *
         * Counts endorsementRequests of userDetail.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.endorsementRequests.count = function() {
          var TargetResource = $injector.get("Endorsement");
          var action = TargetResource["::count::userDetail::endorsementRequests"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.endorsementRequests#create
         * @methodOf lbServices.UserDetail.endorsementRequests
         *
         * @description
         *
         * Creates a new instance in endorsementRequests of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Endorsement` object.)
         * </em>
         */
        R.endorsementRequests.create = function() {
          var TargetResource = $injector.get("Endorsement");
          var action = TargetResource["::create::userDetail::endorsementRequests"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.endorsementRequests#createMany
         * @methodOf lbServices.UserDetail.endorsementRequests
         *
         * @description
         *
         * Creates a new instance in endorsementRequests of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Endorsement` object.)
         * </em>
         */
        R.endorsementRequests.createMany = function() {
          var TargetResource = $injector.get("Endorsement");
          var action = TargetResource["::createMany::userDetail::endorsementRequests"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.endorsementRequests#destroyAll
         * @methodOf lbServices.UserDetail.endorsementRequests
         *
         * @description
         *
         * Deletes all endorsementRequests of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.endorsementRequests.destroyAll = function() {
          var TargetResource = $injector.get("Endorsement");
          var action = TargetResource["::delete::userDetail::endorsementRequests"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.endorsementRequests#destroyById
         * @methodOf lbServices.UserDetail.endorsementRequests
         *
         * @description
         *
         * Delete a related item by id for endorsementRequests.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for endorsementRequests
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.endorsementRequests.destroyById = function() {
          var TargetResource = $injector.get("Endorsement");
          var action = TargetResource["::destroyById::userDetail::endorsementRequests"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.endorsementRequests#findById
         * @methodOf lbServices.UserDetail.endorsementRequests
         *
         * @description
         *
         * Find a related item by id for endorsementRequests.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for endorsementRequests
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Endorsement` object.)
         * </em>
         */
        R.endorsementRequests.findById = function() {
          var TargetResource = $injector.get("Endorsement");
          var action = TargetResource["::findById::userDetail::endorsementRequests"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.endorsementRequests#updateById
         * @methodOf lbServices.UserDetail.endorsementRequests
         *
         * @description
         *
         * Update a related item by id for endorsementRequests.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for endorsementRequests
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Endorsement` object.)
         * </em>
         */
        R.endorsementRequests.updateById = function() {
          var TargetResource = $injector.get("Endorsement");
          var action = TargetResource["::updateById::userDetail::endorsementRequests"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.UserDetail.hrQuestions
     * @header lbServices.UserDetail.hrQuestions
     * @object
     * @description
     *
     * The object `UserDetail.hrQuestions` groups methods
     * manipulating `Question` instances related to `UserDetail`.
     *
     * Call {@link lbServices.UserDetail#hrQuestions UserDetail.hrQuestions()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.UserDetail#hrQuestions
         * @methodOf lbServices.UserDetail
         *
         * @description
         *
         * Queries hrQuestions of userDetail.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Question` object.)
         * </em>
         */
        R.hrQuestions = function() {
          var TargetResource = $injector.get("Question");
          var action = TargetResource["::get::userDetail::hrQuestions"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.hrQuestions#count
         * @methodOf lbServices.UserDetail.hrQuestions
         *
         * @description
         *
         * Counts hrQuestions of userDetail.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.hrQuestions.count = function() {
          var TargetResource = $injector.get("Question");
          var action = TargetResource["::count::userDetail::hrQuestions"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.hrQuestions#create
         * @methodOf lbServices.UserDetail.hrQuestions
         *
         * @description
         *
         * Creates a new instance in hrQuestions of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Question` object.)
         * </em>
         */
        R.hrQuestions.create = function() {
          var TargetResource = $injector.get("Question");
          var action = TargetResource["::create::userDetail::hrQuestions"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.hrQuestions#createMany
         * @methodOf lbServices.UserDetail.hrQuestions
         *
         * @description
         *
         * Creates a new instance in hrQuestions of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Question` object.)
         * </em>
         */
        R.hrQuestions.createMany = function() {
          var TargetResource = $injector.get("Question");
          var action = TargetResource["::createMany::userDetail::hrQuestions"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.hrQuestions#destroyAll
         * @methodOf lbServices.UserDetail.hrQuestions
         *
         * @description
         *
         * Deletes all hrQuestions of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.hrQuestions.destroyAll = function() {
          var TargetResource = $injector.get("Question");
          var action = TargetResource["::delete::userDetail::hrQuestions"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.hrQuestions#destroyById
         * @methodOf lbServices.UserDetail.hrQuestions
         *
         * @description
         *
         * Delete a related item by id for hrQuestions.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for hrQuestions
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.hrQuestions.destroyById = function() {
          var TargetResource = $injector.get("Question");
          var action = TargetResource["::destroyById::userDetail::hrQuestions"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.hrQuestions#findById
         * @methodOf lbServices.UserDetail.hrQuestions
         *
         * @description
         *
         * Find a related item by id for hrQuestions.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for hrQuestions
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Question` object.)
         * </em>
         */
        R.hrQuestions.findById = function() {
          var TargetResource = $injector.get("Question");
          var action = TargetResource["::findById::userDetail::hrQuestions"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.hrQuestions#updateById
         * @methodOf lbServices.UserDetail.hrQuestions
         *
         * @description
         *
         * Update a related item by id for hrQuestions.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for hrQuestions
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Question` object.)
         * </em>
         */
        R.hrQuestions.updateById = function() {
          var TargetResource = $injector.get("Question");
          var action = TargetResource["::updateById::userDetail::hrQuestions"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.UserDetail.endorserQuestions
     * @header lbServices.UserDetail.endorserQuestions
     * @object
     * @description
     *
     * The object `UserDetail.endorserQuestions` groups methods
     * manipulating `Question` instances related to `UserDetail`.
     *
     * Call {@link lbServices.UserDetail#endorserQuestions UserDetail.endorserQuestions()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.UserDetail#endorserQuestions
         * @methodOf lbServices.UserDetail
         *
         * @description
         *
         * Queries endorserQuestions of userDetail.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Question` object.)
         * </em>
         */
        R.endorserQuestions = function() {
          var TargetResource = $injector.get("Question");
          var action = TargetResource["::get::userDetail::endorserQuestions"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.endorserQuestions#count
         * @methodOf lbServices.UserDetail.endorserQuestions
         *
         * @description
         *
         * Counts endorserQuestions of userDetail.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.endorserQuestions.count = function() {
          var TargetResource = $injector.get("Question");
          var action = TargetResource["::count::userDetail::endorserQuestions"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.endorserQuestions#create
         * @methodOf lbServices.UserDetail.endorserQuestions
         *
         * @description
         *
         * Creates a new instance in endorserQuestions of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Question` object.)
         * </em>
         */
        R.endorserQuestions.create = function() {
          var TargetResource = $injector.get("Question");
          var action = TargetResource["::create::userDetail::endorserQuestions"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.endorserQuestions#createMany
         * @methodOf lbServices.UserDetail.endorserQuestions
         *
         * @description
         *
         * Creates a new instance in endorserQuestions of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Question` object.)
         * </em>
         */
        R.endorserQuestions.createMany = function() {
          var TargetResource = $injector.get("Question");
          var action = TargetResource["::createMany::userDetail::endorserQuestions"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.endorserQuestions#destroyAll
         * @methodOf lbServices.UserDetail.endorserQuestions
         *
         * @description
         *
         * Deletes all endorserQuestions of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.endorserQuestions.destroyAll = function() {
          var TargetResource = $injector.get("Question");
          var action = TargetResource["::delete::userDetail::endorserQuestions"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.endorserQuestions#destroyById
         * @methodOf lbServices.UserDetail.endorserQuestions
         *
         * @description
         *
         * Delete a related item by id for endorserQuestions.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for endorserQuestions
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.endorserQuestions.destroyById = function() {
          var TargetResource = $injector.get("Question");
          var action = TargetResource["::destroyById::userDetail::endorserQuestions"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.endorserQuestions#findById
         * @methodOf lbServices.UserDetail.endorserQuestions
         *
         * @description
         *
         * Find a related item by id for endorserQuestions.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for endorserQuestions
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Question` object.)
         * </em>
         */
        R.endorserQuestions.findById = function() {
          var TargetResource = $injector.get("Question");
          var action = TargetResource["::findById::userDetail::endorserQuestions"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.endorserQuestions#updateById
         * @methodOf lbServices.UserDetail.endorserQuestions
         *
         * @description
         *
         * Update a related item by id for endorserQuestions.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for endorserQuestions
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Question` object.)
         * </em>
         */
        R.endorserQuestions.updateById = function() {
          var TargetResource = $injector.get("Question");
          var action = TargetResource["::updateById::userDetail::endorserQuestions"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.UserDetail.company
     * @header lbServices.UserDetail.company
     * @object
     * @description
     *
     * The object `UserDetail.company` groups methods
     * manipulating `Company` instances related to `UserDetail`.
     *
     * Call {@link lbServices.UserDetail#company UserDetail.company()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.UserDetail#company
         * @methodOf lbServices.UserDetail
         *
         * @description
         *
         * Fetches hasOne relation company.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Company` object.)
         * </em>
         */
        R.company = function() {
          var TargetResource = $injector.get("Company");
          var action = TargetResource["::get::userDetail::company"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.company#create
         * @methodOf lbServices.UserDetail.company
         *
         * @description
         *
         * Creates a new instance in company of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Company` object.)
         * </em>
         */
        R.company.create = function() {
          var TargetResource = $injector.get("Company");
          var action = TargetResource["::create::userDetail::company"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.company#createMany
         * @methodOf lbServices.UserDetail.company
         *
         * @description
         *
         * Creates a new instance in company of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Company` object.)
         * </em>
         */
        R.company.createMany = function() {
          var TargetResource = $injector.get("Company");
          var action = TargetResource["::createMany::userDetail::company"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.company#destroy
         * @methodOf lbServices.UserDetail.company
         *
         * @description
         *
         * Deletes company of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.company.destroy = function() {
          var TargetResource = $injector.get("Company");
          var action = TargetResource["::destroy::userDetail::company"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.company#update
         * @methodOf lbServices.UserDetail.company
         *
         * @description
         *
         * Update company of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Company` object.)
         * </em>
         */
        R.company.update = function() {
          var TargetResource = $injector.get("Company");
          var action = TargetResource["::update::userDetail::company"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.UserDetail.endorsementSkills
     * @header lbServices.UserDetail.endorsementSkills
     * @object
     * @description
     *
     * The object `UserDetail.endorsementSkills` groups methods
     * manipulating `EndorsementSkill` instances related to `UserDetail`.
     *
     * Call {@link lbServices.UserDetail#endorsementSkills UserDetail.endorsementSkills()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.UserDetail#endorsementSkills
         * @methodOf lbServices.UserDetail
         *
         * @description
         *
         * Queries endorsementSkills of userDetail.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsementSkill` object.)
         * </em>
         */
        R.endorsementSkills = function() {
          var TargetResource = $injector.get("EndorsementSkill");
          var action = TargetResource["::get::userDetail::endorsementSkills"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.endorsementSkills#count
         * @methodOf lbServices.UserDetail.endorsementSkills
         *
         * @description
         *
         * Counts endorsementSkills of userDetail.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.endorsementSkills.count = function() {
          var TargetResource = $injector.get("EndorsementSkill");
          var action = TargetResource["::count::userDetail::endorsementSkills"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.endorsementSkills#create
         * @methodOf lbServices.UserDetail.endorsementSkills
         *
         * @description
         *
         * Creates a new instance in endorsementSkills of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsementSkill` object.)
         * </em>
         */
        R.endorsementSkills.create = function() {
          var TargetResource = $injector.get("EndorsementSkill");
          var action = TargetResource["::create::userDetail::endorsementSkills"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.endorsementSkills#createMany
         * @methodOf lbServices.UserDetail.endorsementSkills
         *
         * @description
         *
         * Creates a new instance in endorsementSkills of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsementSkill` object.)
         * </em>
         */
        R.endorsementSkills.createMany = function() {
          var TargetResource = $injector.get("EndorsementSkill");
          var action = TargetResource["::createMany::userDetail::endorsementSkills"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.endorsementSkills#destroyAll
         * @methodOf lbServices.UserDetail.endorsementSkills
         *
         * @description
         *
         * Deletes all endorsementSkills of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.endorsementSkills.destroyAll = function() {
          var TargetResource = $injector.get("EndorsementSkill");
          var action = TargetResource["::delete::userDetail::endorsementSkills"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.endorsementSkills#destroyById
         * @methodOf lbServices.UserDetail.endorsementSkills
         *
         * @description
         *
         * Delete a related item by id for endorsementSkills.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for endorsementSkills
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.endorsementSkills.destroyById = function() {
          var TargetResource = $injector.get("EndorsementSkill");
          var action = TargetResource["::destroyById::userDetail::endorsementSkills"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.endorsementSkills#findById
         * @methodOf lbServices.UserDetail.endorsementSkills
         *
         * @description
         *
         * Find a related item by id for endorsementSkills.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for endorsementSkills
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsementSkill` object.)
         * </em>
         */
        R.endorsementSkills.findById = function() {
          var TargetResource = $injector.get("EndorsementSkill");
          var action = TargetResource["::findById::userDetail::endorsementSkills"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.endorsementSkills#updateById
         * @methodOf lbServices.UserDetail.endorsementSkills
         *
         * @description
         *
         * Update a related item by id for endorsementSkills.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for endorsementSkills
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsementSkill` object.)
         * </em>
         */
        R.endorsementSkills.updateById = function() {
          var TargetResource = $injector.get("EndorsementSkill");
          var action = TargetResource["::updateById::userDetail::endorsementSkills"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.UserDetail.hrFeedbacks
     * @header lbServices.UserDetail.hrFeedbacks
     * @object
     * @description
     *
     * The object `UserDetail.hrFeedbacks` groups methods
     * manipulating `HrFeedback` instances related to `UserDetail`.
     *
     * Call {@link lbServices.UserDetail#hrFeedbacks UserDetail.hrFeedbacks()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.UserDetail#hrFeedbacks
         * @methodOf lbServices.UserDetail
         *
         * @description
         *
         * Queries hrFeedbacks of userDetail.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `HrFeedback` object.)
         * </em>
         */
        R.hrFeedbacks = function() {
          var TargetResource = $injector.get("HrFeedback");
          var action = TargetResource["::get::userDetail::hrFeedbacks"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.hrFeedbacks#count
         * @methodOf lbServices.UserDetail.hrFeedbacks
         *
         * @description
         *
         * Counts hrFeedbacks of userDetail.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.hrFeedbacks.count = function() {
          var TargetResource = $injector.get("HrFeedback");
          var action = TargetResource["::count::userDetail::hrFeedbacks"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.hrFeedbacks#create
         * @methodOf lbServices.UserDetail.hrFeedbacks
         *
         * @description
         *
         * Creates a new instance in hrFeedbacks of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `HrFeedback` object.)
         * </em>
         */
        R.hrFeedbacks.create = function() {
          var TargetResource = $injector.get("HrFeedback");
          var action = TargetResource["::create::userDetail::hrFeedbacks"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.hrFeedbacks#createMany
         * @methodOf lbServices.UserDetail.hrFeedbacks
         *
         * @description
         *
         * Creates a new instance in hrFeedbacks of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `HrFeedback` object.)
         * </em>
         */
        R.hrFeedbacks.createMany = function() {
          var TargetResource = $injector.get("HrFeedback");
          var action = TargetResource["::createMany::userDetail::hrFeedbacks"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.hrFeedbacks#destroyAll
         * @methodOf lbServices.UserDetail.hrFeedbacks
         *
         * @description
         *
         * Deletes all hrFeedbacks of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.hrFeedbacks.destroyAll = function() {
          var TargetResource = $injector.get("HrFeedback");
          var action = TargetResource["::delete::userDetail::hrFeedbacks"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.hrFeedbacks#destroyById
         * @methodOf lbServices.UserDetail.hrFeedbacks
         *
         * @description
         *
         * Delete a related item by id for hrFeedbacks.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for hrFeedbacks
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.hrFeedbacks.destroyById = function() {
          var TargetResource = $injector.get("HrFeedback");
          var action = TargetResource["::destroyById::userDetail::hrFeedbacks"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.hrFeedbacks#findById
         * @methodOf lbServices.UserDetail.hrFeedbacks
         *
         * @description
         *
         * Find a related item by id for hrFeedbacks.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for hrFeedbacks
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `HrFeedback` object.)
         * </em>
         */
        R.hrFeedbacks.findById = function() {
          var TargetResource = $injector.get("HrFeedback");
          var action = TargetResource["::findById::userDetail::hrFeedbacks"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.hrFeedbacks#updateById
         * @methodOf lbServices.UserDetail.hrFeedbacks
         *
         * @description
         *
         * Update a related item by id for hrFeedbacks.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for hrFeedbacks
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `HrFeedback` object.)
         * </em>
         */
        R.hrFeedbacks.updateById = function() {
          var TargetResource = $injector.get("HrFeedback");
          var action = TargetResource["::updateById::userDetail::hrFeedbacks"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.UserDetail.userFeedbacks
     * @header lbServices.UserDetail.userFeedbacks
     * @object
     * @description
     *
     * The object `UserDetail.userFeedbacks` groups methods
     * manipulating `HrFeedback` instances related to `UserDetail`.
     *
     * Call {@link lbServices.UserDetail#userFeedbacks UserDetail.userFeedbacks()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.UserDetail#userFeedbacks
         * @methodOf lbServices.UserDetail
         *
         * @description
         *
         * Queries userFeedbacks of userDetail.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `HrFeedback` object.)
         * </em>
         */
        R.userFeedbacks = function() {
          var TargetResource = $injector.get("HrFeedback");
          var action = TargetResource["::get::userDetail::userFeedbacks"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.userFeedbacks#count
         * @methodOf lbServices.UserDetail.userFeedbacks
         *
         * @description
         *
         * Counts userFeedbacks of userDetail.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.userFeedbacks.count = function() {
          var TargetResource = $injector.get("HrFeedback");
          var action = TargetResource["::count::userDetail::userFeedbacks"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.userFeedbacks#create
         * @methodOf lbServices.UserDetail.userFeedbacks
         *
         * @description
         *
         * Creates a new instance in userFeedbacks of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `HrFeedback` object.)
         * </em>
         */
        R.userFeedbacks.create = function() {
          var TargetResource = $injector.get("HrFeedback");
          var action = TargetResource["::create::userDetail::userFeedbacks"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.userFeedbacks#createMany
         * @methodOf lbServices.UserDetail.userFeedbacks
         *
         * @description
         *
         * Creates a new instance in userFeedbacks of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `HrFeedback` object.)
         * </em>
         */
        R.userFeedbacks.createMany = function() {
          var TargetResource = $injector.get("HrFeedback");
          var action = TargetResource["::createMany::userDetail::userFeedbacks"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.userFeedbacks#destroyAll
         * @methodOf lbServices.UserDetail.userFeedbacks
         *
         * @description
         *
         * Deletes all userFeedbacks of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.userFeedbacks.destroyAll = function() {
          var TargetResource = $injector.get("HrFeedback");
          var action = TargetResource["::delete::userDetail::userFeedbacks"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.userFeedbacks#destroyById
         * @methodOf lbServices.UserDetail.userFeedbacks
         *
         * @description
         *
         * Delete a related item by id for userFeedbacks.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for userFeedbacks
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.userFeedbacks.destroyById = function() {
          var TargetResource = $injector.get("HrFeedback");
          var action = TargetResource["::destroyById::userDetail::userFeedbacks"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.userFeedbacks#findById
         * @methodOf lbServices.UserDetail.userFeedbacks
         *
         * @description
         *
         * Find a related item by id for userFeedbacks.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for userFeedbacks
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `HrFeedback` object.)
         * </em>
         */
        R.userFeedbacks.findById = function() {
          var TargetResource = $injector.get("HrFeedback");
          var action = TargetResource["::findById::userDetail::userFeedbacks"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.userFeedbacks#updateById
         * @methodOf lbServices.UserDetail.userFeedbacks
         *
         * @description
         *
         * Update a related item by id for userFeedbacks.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for userFeedbacks
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `HrFeedback` object.)
         * </em>
         */
        R.userFeedbacks.updateById = function() {
          var TargetResource = $injector.get("HrFeedback");
          var action = TargetResource["::updateById::userDetail::userFeedbacks"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.UserDetail.userIdentities
     * @header lbServices.UserDetail.userIdentities
     * @object
     * @description
     *
     * The object `UserDetail.userIdentities` groups methods
     * manipulating `UserIdentity` instances related to `UserDetail`.
     *
     * Call {@link lbServices.UserDetail#userIdentities UserDetail.userIdentities()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.UserDetail#userIdentities
         * @methodOf lbServices.UserDetail
         *
         * @description
         *
         * Queries userIdentities of userDetail.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserIdentity` object.)
         * </em>
         */
        R.userIdentities = function() {
          var TargetResource = $injector.get("UserIdentity");
          var action = TargetResource["::get::userDetail::userIdentities"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.userIdentities#count
         * @methodOf lbServices.UserDetail.userIdentities
         *
         * @description
         *
         * Counts userIdentities of userDetail.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.userIdentities.count = function() {
          var TargetResource = $injector.get("UserIdentity");
          var action = TargetResource["::count::userDetail::userIdentities"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.userIdentities#create
         * @methodOf lbServices.UserDetail.userIdentities
         *
         * @description
         *
         * Creates a new instance in userIdentities of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserIdentity` object.)
         * </em>
         */
        R.userIdentities.create = function() {
          var TargetResource = $injector.get("UserIdentity");
          var action = TargetResource["::create::userDetail::userIdentities"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.userIdentities#createMany
         * @methodOf lbServices.UserDetail.userIdentities
         *
         * @description
         *
         * Creates a new instance in userIdentities of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserIdentity` object.)
         * </em>
         */
        R.userIdentities.createMany = function() {
          var TargetResource = $injector.get("UserIdentity");
          var action = TargetResource["::createMany::userDetail::userIdentities"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.userIdentities#destroyAll
         * @methodOf lbServices.UserDetail.userIdentities
         *
         * @description
         *
         * Deletes all userIdentities of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.userIdentities.destroyAll = function() {
          var TargetResource = $injector.get("UserIdentity");
          var action = TargetResource["::delete::userDetail::userIdentities"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.userIdentities#destroyById
         * @methodOf lbServices.UserDetail.userIdentities
         *
         * @description
         *
         * Delete a related item by id for userIdentities.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for userIdentities
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.userIdentities.destroyById = function() {
          var TargetResource = $injector.get("UserIdentity");
          var action = TargetResource["::destroyById::userDetail::userIdentities"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.userIdentities#findById
         * @methodOf lbServices.UserDetail.userIdentities
         *
         * @description
         *
         * Find a related item by id for userIdentities.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for userIdentities
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserIdentity` object.)
         * </em>
         */
        R.userIdentities.findById = function() {
          var TargetResource = $injector.get("UserIdentity");
          var action = TargetResource["::findById::userDetail::userIdentities"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.userIdentities#updateById
         * @methodOf lbServices.UserDetail.userIdentities
         *
         * @description
         *
         * Update a related item by id for userIdentities.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for userIdentities
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserIdentity` object.)
         * </em>
         */
        R.userIdentities.updateById = function() {
          var TargetResource = $injector.get("UserIdentity");
          var action = TargetResource["::updateById::userDetail::userIdentities"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.UserDetail.jobPosts
     * @header lbServices.UserDetail.jobPosts
     * @object
     * @description
     *
     * The object `UserDetail.jobPosts` groups methods
     * manipulating `JobPost` instances related to `UserDetail`.
     *
     * Call {@link lbServices.UserDetail#jobPosts UserDetail.jobPosts()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.UserDetail#jobPosts
         * @methodOf lbServices.UserDetail
         *
         * @description
         *
         * Queries jobPosts of userDetail.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `JobPost` object.)
         * </em>
         */
        R.jobPosts = function() {
          var TargetResource = $injector.get("JobPost");
          var action = TargetResource["::get::userDetail::jobPosts"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.jobPosts#count
         * @methodOf lbServices.UserDetail.jobPosts
         *
         * @description
         *
         * Counts jobPosts of userDetail.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.jobPosts.count = function() {
          var TargetResource = $injector.get("JobPost");
          var action = TargetResource["::count::userDetail::jobPosts"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.jobPosts#create
         * @methodOf lbServices.UserDetail.jobPosts
         *
         * @description
         *
         * Creates a new instance in jobPosts of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `JobPost` object.)
         * </em>
         */
        R.jobPosts.create = function() {
          var TargetResource = $injector.get("JobPost");
          var action = TargetResource["::create::userDetail::jobPosts"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.jobPosts#createMany
         * @methodOf lbServices.UserDetail.jobPosts
         *
         * @description
         *
         * Creates a new instance in jobPosts of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `JobPost` object.)
         * </em>
         */
        R.jobPosts.createMany = function() {
          var TargetResource = $injector.get("JobPost");
          var action = TargetResource["::createMany::userDetail::jobPosts"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.jobPosts#destroyAll
         * @methodOf lbServices.UserDetail.jobPosts
         *
         * @description
         *
         * Deletes all jobPosts of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.jobPosts.destroyAll = function() {
          var TargetResource = $injector.get("JobPost");
          var action = TargetResource["::delete::userDetail::jobPosts"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.jobPosts#destroyById
         * @methodOf lbServices.UserDetail.jobPosts
         *
         * @description
         *
         * Delete a related item by id for jobPosts.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for jobPosts
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.jobPosts.destroyById = function() {
          var TargetResource = $injector.get("JobPost");
          var action = TargetResource["::destroyById::userDetail::jobPosts"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.jobPosts#findById
         * @methodOf lbServices.UserDetail.jobPosts
         *
         * @description
         *
         * Find a related item by id for jobPosts.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for jobPosts
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `JobPost` object.)
         * </em>
         */
        R.jobPosts.findById = function() {
          var TargetResource = $injector.get("JobPost");
          var action = TargetResource["::findById::userDetail::jobPosts"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.jobPosts#updateById
         * @methodOf lbServices.UserDetail.jobPosts
         *
         * @description
         *
         * Update a related item by id for jobPosts.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for jobPosts
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `JobPost` object.)
         * </em>
         */
        R.jobPosts.updateById = function() {
          var TargetResource = $injector.get("JobPost");
          var action = TargetResource["::updateById::userDetail::jobPosts"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.UserDetail.endorsets
     * @header lbServices.UserDetail.endorsets
     * @object
     * @description
     *
     * The object `UserDetail.endorsets` groups methods
     * manipulating `Endorset` instances related to `UserDetail`.
     *
     * Call {@link lbServices.UserDetail#endorsets UserDetail.endorsets()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.UserDetail#endorsets
         * @methodOf lbServices.UserDetail
         *
         * @description
         *
         * Queries endorsets of userDetail.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Endorset` object.)
         * </em>
         */
        R.endorsets = function() {
          var TargetResource = $injector.get("Endorset");
          var action = TargetResource["::get::userDetail::endorsets"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.endorsets#count
         * @methodOf lbServices.UserDetail.endorsets
         *
         * @description
         *
         * Counts endorsets of userDetail.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.endorsets.count = function() {
          var TargetResource = $injector.get("Endorset");
          var action = TargetResource["::count::userDetail::endorsets"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.endorsets#create
         * @methodOf lbServices.UserDetail.endorsets
         *
         * @description
         *
         * Creates a new instance in endorsets of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Endorset` object.)
         * </em>
         */
        R.endorsets.create = function() {
          var TargetResource = $injector.get("Endorset");
          var action = TargetResource["::create::userDetail::endorsets"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.endorsets#createMany
         * @methodOf lbServices.UserDetail.endorsets
         *
         * @description
         *
         * Creates a new instance in endorsets of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Endorset` object.)
         * </em>
         */
        R.endorsets.createMany = function() {
          var TargetResource = $injector.get("Endorset");
          var action = TargetResource["::createMany::userDetail::endorsets"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.endorsets#destroyAll
         * @methodOf lbServices.UserDetail.endorsets
         *
         * @description
         *
         * Deletes all endorsets of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.endorsets.destroyAll = function() {
          var TargetResource = $injector.get("Endorset");
          var action = TargetResource["::delete::userDetail::endorsets"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.endorsets#destroyById
         * @methodOf lbServices.UserDetail.endorsets
         *
         * @description
         *
         * Delete a related item by id for endorsets.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for endorsets
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.endorsets.destroyById = function() {
          var TargetResource = $injector.get("Endorset");
          var action = TargetResource["::destroyById::userDetail::endorsets"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.endorsets#findById
         * @methodOf lbServices.UserDetail.endorsets
         *
         * @description
         *
         * Find a related item by id for endorsets.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for endorsets
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Endorset` object.)
         * </em>
         */
        R.endorsets.findById = function() {
          var TargetResource = $injector.get("Endorset");
          var action = TargetResource["::findById::userDetail::endorsets"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.endorsets#updateById
         * @methodOf lbServices.UserDetail.endorsets
         *
         * @description
         *
         * Update a related item by id for endorsets.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for endorsets
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Endorset` object.)
         * </em>
         */
        R.endorsets.updateById = function() {
          var TargetResource = $injector.get("Endorset");
          var action = TargetResource["::updateById::userDetail::endorsets"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.UserDetail.endorsetSkills
     * @header lbServices.UserDetail.endorsetSkills
     * @object
     * @description
     *
     * The object `UserDetail.endorsetSkills` groups methods
     * manipulating `EndorsetSkill` instances related to `UserDetail`.
     *
     * Call {@link lbServices.UserDetail#endorsetSkills UserDetail.endorsetSkills()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.UserDetail#endorsetSkills
         * @methodOf lbServices.UserDetail
         *
         * @description
         *
         * Queries endorsetSkills of userDetail.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsetSkill` object.)
         * </em>
         */
        R.endorsetSkills = function() {
          var TargetResource = $injector.get("EndorsetSkill");
          var action = TargetResource["::get::userDetail::endorsetSkills"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.endorsetSkills#count
         * @methodOf lbServices.UserDetail.endorsetSkills
         *
         * @description
         *
         * Counts endorsetSkills of userDetail.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.endorsetSkills.count = function() {
          var TargetResource = $injector.get("EndorsetSkill");
          var action = TargetResource["::count::userDetail::endorsetSkills"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.endorsetSkills#create
         * @methodOf lbServices.UserDetail.endorsetSkills
         *
         * @description
         *
         * Creates a new instance in endorsetSkills of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsetSkill` object.)
         * </em>
         */
        R.endorsetSkills.create = function() {
          var TargetResource = $injector.get("EndorsetSkill");
          var action = TargetResource["::create::userDetail::endorsetSkills"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.endorsetSkills#createMany
         * @methodOf lbServices.UserDetail.endorsetSkills
         *
         * @description
         *
         * Creates a new instance in endorsetSkills of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsetSkill` object.)
         * </em>
         */
        R.endorsetSkills.createMany = function() {
          var TargetResource = $injector.get("EndorsetSkill");
          var action = TargetResource["::createMany::userDetail::endorsetSkills"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.endorsetSkills#destroyAll
         * @methodOf lbServices.UserDetail.endorsetSkills
         *
         * @description
         *
         * Deletes all endorsetSkills of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.endorsetSkills.destroyAll = function() {
          var TargetResource = $injector.get("EndorsetSkill");
          var action = TargetResource["::delete::userDetail::endorsetSkills"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.endorsetSkills#destroyById
         * @methodOf lbServices.UserDetail.endorsetSkills
         *
         * @description
         *
         * Delete a related item by id for endorsetSkills.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for endorsetSkills
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.endorsetSkills.destroyById = function() {
          var TargetResource = $injector.get("EndorsetSkill");
          var action = TargetResource["::destroyById::userDetail::endorsetSkills"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.endorsetSkills#findById
         * @methodOf lbServices.UserDetail.endorsetSkills
         *
         * @description
         *
         * Find a related item by id for endorsetSkills.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for endorsetSkills
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsetSkill` object.)
         * </em>
         */
        R.endorsetSkills.findById = function() {
          var TargetResource = $injector.get("EndorsetSkill");
          var action = TargetResource["::findById::userDetail::endorsetSkills"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.endorsetSkills#updateById
         * @methodOf lbServices.UserDetail.endorsetSkills
         *
         * @description
         *
         * Update a related item by id for endorsetSkills.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for endorsetSkills
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsetSkill` object.)
         * </em>
         */
        R.endorsetSkills.updateById = function() {
          var TargetResource = $injector.get("EndorsetSkill");
          var action = TargetResource["::updateById::userDetail::endorsetSkills"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.UserDetail.endorserEndorsements
     * @header lbServices.UserDetail.endorserEndorsements
     * @object
     * @description
     *
     * The object `UserDetail.endorserEndorsements` groups methods
     * manipulating `EndorserEndorsement` instances related to `UserDetail`.
     *
     * Call {@link lbServices.UserDetail#endorserEndorsements UserDetail.endorserEndorsements()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.UserDetail#endorserEndorsements
         * @methodOf lbServices.UserDetail
         *
         * @description
         *
         * Queries endorserEndorsements of userDetail.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorserEndorsement` object.)
         * </em>
         */
        R.endorserEndorsements = function() {
          var TargetResource = $injector.get("EndorserEndorsement");
          var action = TargetResource["::get::userDetail::endorserEndorsements"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.endorserEndorsements#count
         * @methodOf lbServices.UserDetail.endorserEndorsements
         *
         * @description
         *
         * Counts endorserEndorsements of userDetail.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.endorserEndorsements.count = function() {
          var TargetResource = $injector.get("EndorserEndorsement");
          var action = TargetResource["::count::userDetail::endorserEndorsements"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.endorserEndorsements#create
         * @methodOf lbServices.UserDetail.endorserEndorsements
         *
         * @description
         *
         * Creates a new instance in endorserEndorsements of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorserEndorsement` object.)
         * </em>
         */
        R.endorserEndorsements.create = function() {
          var TargetResource = $injector.get("EndorserEndorsement");
          var action = TargetResource["::create::userDetail::endorserEndorsements"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.endorserEndorsements#createMany
         * @methodOf lbServices.UserDetail.endorserEndorsements
         *
         * @description
         *
         * Creates a new instance in endorserEndorsements of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorserEndorsement` object.)
         * </em>
         */
        R.endorserEndorsements.createMany = function() {
          var TargetResource = $injector.get("EndorserEndorsement");
          var action = TargetResource["::createMany::userDetail::endorserEndorsements"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.endorserEndorsements#destroyAll
         * @methodOf lbServices.UserDetail.endorserEndorsements
         *
         * @description
         *
         * Deletes all endorserEndorsements of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.endorserEndorsements.destroyAll = function() {
          var TargetResource = $injector.get("EndorserEndorsement");
          var action = TargetResource["::delete::userDetail::endorserEndorsements"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.endorserEndorsements#destroyById
         * @methodOf lbServices.UserDetail.endorserEndorsements
         *
         * @description
         *
         * Delete a related item by id for endorserEndorsements.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for endorserEndorsements
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.endorserEndorsements.destroyById = function() {
          var TargetResource = $injector.get("EndorserEndorsement");
          var action = TargetResource["::destroyById::userDetail::endorserEndorsements"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.endorserEndorsements#findById
         * @methodOf lbServices.UserDetail.endorserEndorsements
         *
         * @description
         *
         * Find a related item by id for endorserEndorsements.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for endorserEndorsements
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorserEndorsement` object.)
         * </em>
         */
        R.endorserEndorsements.findById = function() {
          var TargetResource = $injector.get("EndorserEndorsement");
          var action = TargetResource["::findById::userDetail::endorserEndorsements"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.endorserEndorsements#updateById
         * @methodOf lbServices.UserDetail.endorserEndorsements
         *
         * @description
         *
         * Update a related item by id for endorserEndorsements.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for endorserEndorsements
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorserEndorsement` object.)
         * </em>
         */
        R.endorserEndorsements.updateById = function() {
          var TargetResource = $injector.get("EndorserEndorsement");
          var action = TargetResource["::updateById::userDetail::endorserEndorsements"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.UserDetail.companyRequests
     * @header lbServices.UserDetail.companyRequests
     * @object
     * @description
     *
     * The object `UserDetail.companyRequests` groups methods
     * manipulating `CompanyRequest` instances related to `UserDetail`.
     *
     * Call {@link lbServices.UserDetail#companyRequests UserDetail.companyRequests()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.UserDetail#companyRequests
         * @methodOf lbServices.UserDetail
         *
         * @description
         *
         * Queries companyRequests of userDetail.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `CompanyRequest` object.)
         * </em>
         */
        R.companyRequests = function() {
          var TargetResource = $injector.get("CompanyRequest");
          var action = TargetResource["::get::userDetail::companyRequests"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.companyRequests#count
         * @methodOf lbServices.UserDetail.companyRequests
         *
         * @description
         *
         * Counts companyRequests of userDetail.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.companyRequests.count = function() {
          var TargetResource = $injector.get("CompanyRequest");
          var action = TargetResource["::count::userDetail::companyRequests"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.companyRequests#create
         * @methodOf lbServices.UserDetail.companyRequests
         *
         * @description
         *
         * Creates a new instance in companyRequests of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `CompanyRequest` object.)
         * </em>
         */
        R.companyRequests.create = function() {
          var TargetResource = $injector.get("CompanyRequest");
          var action = TargetResource["::create::userDetail::companyRequests"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.companyRequests#createMany
         * @methodOf lbServices.UserDetail.companyRequests
         *
         * @description
         *
         * Creates a new instance in companyRequests of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `CompanyRequest` object.)
         * </em>
         */
        R.companyRequests.createMany = function() {
          var TargetResource = $injector.get("CompanyRequest");
          var action = TargetResource["::createMany::userDetail::companyRequests"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.companyRequests#destroyAll
         * @methodOf lbServices.UserDetail.companyRequests
         *
         * @description
         *
         * Deletes all companyRequests of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.companyRequests.destroyAll = function() {
          var TargetResource = $injector.get("CompanyRequest");
          var action = TargetResource["::delete::userDetail::companyRequests"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.companyRequests#destroyById
         * @methodOf lbServices.UserDetail.companyRequests
         *
         * @description
         *
         * Delete a related item by id for companyRequests.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for companyRequests
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.companyRequests.destroyById = function() {
          var TargetResource = $injector.get("CompanyRequest");
          var action = TargetResource["::destroyById::userDetail::companyRequests"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.companyRequests#findById
         * @methodOf lbServices.UserDetail.companyRequests
         *
         * @description
         *
         * Find a related item by id for companyRequests.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for companyRequests
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `CompanyRequest` object.)
         * </em>
         */
        R.companyRequests.findById = function() {
          var TargetResource = $injector.get("CompanyRequest");
          var action = TargetResource["::findById::userDetail::companyRequests"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.companyRequests#updateById
         * @methodOf lbServices.UserDetail.companyRequests
         *
         * @description
         *
         * Update a related item by id for companyRequests.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for companyRequests
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `CompanyRequest` object.)
         * </em>
         */
        R.companyRequests.updateById = function() {
          var TargetResource = $injector.get("CompanyRequest");
          var action = TargetResource["::updateById::userDetail::companyRequests"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.UserDetail.endorsetSents
     * @header lbServices.UserDetail.endorsetSents
     * @object
     * @description
     *
     * The object `UserDetail.endorsetSents` groups methods
     * manipulating `EndorsetSent` instances related to `UserDetail`.
     *
     * Call {@link lbServices.UserDetail#endorsetSents UserDetail.endorsetSents()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.UserDetail#endorsetSents
         * @methodOf lbServices.UserDetail
         *
         * @description
         *
         * Queries endorsetSents of userDetail.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsetSent` object.)
         * </em>
         */
        R.endorsetSents = function() {
          var TargetResource = $injector.get("EndorsetSent");
          var action = TargetResource["::get::userDetail::endorsetSents"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.endorsetSents#count
         * @methodOf lbServices.UserDetail.endorsetSents
         *
         * @description
         *
         * Counts endorsetSents of userDetail.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.endorsetSents.count = function() {
          var TargetResource = $injector.get("EndorsetSent");
          var action = TargetResource["::count::userDetail::endorsetSents"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.endorsetSents#create
         * @methodOf lbServices.UserDetail.endorsetSents
         *
         * @description
         *
         * Creates a new instance in endorsetSents of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsetSent` object.)
         * </em>
         */
        R.endorsetSents.create = function() {
          var TargetResource = $injector.get("EndorsetSent");
          var action = TargetResource["::create::userDetail::endorsetSents"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.endorsetSents#createMany
         * @methodOf lbServices.UserDetail.endorsetSents
         *
         * @description
         *
         * Creates a new instance in endorsetSents of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsetSent` object.)
         * </em>
         */
        R.endorsetSents.createMany = function() {
          var TargetResource = $injector.get("EndorsetSent");
          var action = TargetResource["::createMany::userDetail::endorsetSents"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.endorsetSents#destroyAll
         * @methodOf lbServices.UserDetail.endorsetSents
         *
         * @description
         *
         * Deletes all endorsetSents of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.endorsetSents.destroyAll = function() {
          var TargetResource = $injector.get("EndorsetSent");
          var action = TargetResource["::delete::userDetail::endorsetSents"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.endorsetSents#destroyById
         * @methodOf lbServices.UserDetail.endorsetSents
         *
         * @description
         *
         * Delete a related item by id for endorsetSents.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for endorsetSents
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.endorsetSents.destroyById = function() {
          var TargetResource = $injector.get("EndorsetSent");
          var action = TargetResource["::destroyById::userDetail::endorsetSents"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.endorsetSents#findById
         * @methodOf lbServices.UserDetail.endorsetSents
         *
         * @description
         *
         * Find a related item by id for endorsetSents.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for endorsetSents
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsetSent` object.)
         * </em>
         */
        R.endorsetSents.findById = function() {
          var TargetResource = $injector.get("EndorsetSent");
          var action = TargetResource["::findById::userDetail::endorsetSents"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.endorsetSents#updateById
         * @methodOf lbServices.UserDetail.endorsetSents
         *
         * @description
         *
         * Update a related item by id for endorsetSents.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for endorsetSents
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsetSent` object.)
         * </em>
         */
        R.endorsetSents.updateById = function() {
          var TargetResource = $injector.get("EndorsetSent");
          var action = TargetResource["::updateById::userDetail::endorsetSents"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.UserDetail.endorsetReceiveds
     * @header lbServices.UserDetail.endorsetReceiveds
     * @object
     * @description
     *
     * The object `UserDetail.endorsetReceiveds` groups methods
     * manipulating `EndorsetSent` instances related to `UserDetail`.
     *
     * Call {@link lbServices.UserDetail#endorsetReceiveds UserDetail.endorsetReceiveds()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.UserDetail#endorsetReceiveds
         * @methodOf lbServices.UserDetail
         *
         * @description
         *
         * Queries endorsetReceiveds of userDetail.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsetSent` object.)
         * </em>
         */
        R.endorsetReceiveds = function() {
          var TargetResource = $injector.get("EndorsetSent");
          var action = TargetResource["::get::userDetail::endorsetReceiveds"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.endorsetReceiveds#count
         * @methodOf lbServices.UserDetail.endorsetReceiveds
         *
         * @description
         *
         * Counts endorsetReceiveds of userDetail.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.endorsetReceiveds.count = function() {
          var TargetResource = $injector.get("EndorsetSent");
          var action = TargetResource["::count::userDetail::endorsetReceiveds"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.endorsetReceiveds#create
         * @methodOf lbServices.UserDetail.endorsetReceiveds
         *
         * @description
         *
         * Creates a new instance in endorsetReceiveds of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsetSent` object.)
         * </em>
         */
        R.endorsetReceiveds.create = function() {
          var TargetResource = $injector.get("EndorsetSent");
          var action = TargetResource["::create::userDetail::endorsetReceiveds"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.endorsetReceiveds#createMany
         * @methodOf lbServices.UserDetail.endorsetReceiveds
         *
         * @description
         *
         * Creates a new instance in endorsetReceiveds of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsetSent` object.)
         * </em>
         */
        R.endorsetReceiveds.createMany = function() {
          var TargetResource = $injector.get("EndorsetSent");
          var action = TargetResource["::createMany::userDetail::endorsetReceiveds"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.endorsetReceiveds#destroyAll
         * @methodOf lbServices.UserDetail.endorsetReceiveds
         *
         * @description
         *
         * Deletes all endorsetReceiveds of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.endorsetReceiveds.destroyAll = function() {
          var TargetResource = $injector.get("EndorsetSent");
          var action = TargetResource["::delete::userDetail::endorsetReceiveds"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.endorsetReceiveds#destroyById
         * @methodOf lbServices.UserDetail.endorsetReceiveds
         *
         * @description
         *
         * Delete a related item by id for endorsetReceiveds.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for endorsetReceiveds
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.endorsetReceiveds.destroyById = function() {
          var TargetResource = $injector.get("EndorsetSent");
          var action = TargetResource["::destroyById::userDetail::endorsetReceiveds"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.endorsetReceiveds#findById
         * @methodOf lbServices.UserDetail.endorsetReceiveds
         *
         * @description
         *
         * Find a related item by id for endorsetReceiveds.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for endorsetReceiveds
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsetSent` object.)
         * </em>
         */
        R.endorsetReceiveds.findById = function() {
          var TargetResource = $injector.get("EndorsetSent");
          var action = TargetResource["::findById::userDetail::endorsetReceiveds"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.endorsetReceiveds#updateById
         * @methodOf lbServices.UserDetail.endorsetReceiveds
         *
         * @description
         *
         * Update a related item by id for endorsetReceiveds.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for endorsetReceiveds
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsetSent` object.)
         * </em>
         */
        R.endorsetReceiveds.updateById = function() {
          var TargetResource = $injector.get("EndorsetSent");
          var action = TargetResource["::updateById::userDetail::endorsetReceiveds"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.UserDetail.notifications
     * @header lbServices.UserDetail.notifications
     * @object
     * @description
     *
     * The object `UserDetail.notifications` groups methods
     * manipulating `Notification` instances related to `UserDetail`.
     *
     * Call {@link lbServices.UserDetail#notifications UserDetail.notifications()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.UserDetail#notifications
         * @methodOf lbServices.UserDetail
         *
         * @description
         *
         * Queries notifications of userDetail.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Notification` object.)
         * </em>
         */
        R.notifications = function() {
          var TargetResource = $injector.get("Notification");
          var action = TargetResource["::get::userDetail::notifications"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.notifications#count
         * @methodOf lbServices.UserDetail.notifications
         *
         * @description
         *
         * Counts notifications of userDetail.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.notifications.count = function() {
          var TargetResource = $injector.get("Notification");
          var action = TargetResource["::count::userDetail::notifications"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.notifications#create
         * @methodOf lbServices.UserDetail.notifications
         *
         * @description
         *
         * Creates a new instance in notifications of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Notification` object.)
         * </em>
         */
        R.notifications.create = function() {
          var TargetResource = $injector.get("Notification");
          var action = TargetResource["::create::userDetail::notifications"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.notifications#createMany
         * @methodOf lbServices.UserDetail.notifications
         *
         * @description
         *
         * Creates a new instance in notifications of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Notification` object.)
         * </em>
         */
        R.notifications.createMany = function() {
          var TargetResource = $injector.get("Notification");
          var action = TargetResource["::createMany::userDetail::notifications"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.notifications#destroyAll
         * @methodOf lbServices.UserDetail.notifications
         *
         * @description
         *
         * Deletes all notifications of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.notifications.destroyAll = function() {
          var TargetResource = $injector.get("Notification");
          var action = TargetResource["::delete::userDetail::notifications"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.notifications#destroyById
         * @methodOf lbServices.UserDetail.notifications
         *
         * @description
         *
         * Delete a related item by id for notifications.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for notifications
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.notifications.destroyById = function() {
          var TargetResource = $injector.get("Notification");
          var action = TargetResource["::destroyById::userDetail::notifications"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.notifications#findById
         * @methodOf lbServices.UserDetail.notifications
         *
         * @description
         *
         * Find a related item by id for notifications.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for notifications
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Notification` object.)
         * </em>
         */
        R.notifications.findById = function() {
          var TargetResource = $injector.get("Notification");
          var action = TargetResource["::findById::userDetail::notifications"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.notifications#updateById
         * @methodOf lbServices.UserDetail.notifications
         *
         * @description
         *
         * Update a related item by id for notifications.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for notifications
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Notification` object.)
         * </em>
         */
        R.notifications.updateById = function() {
          var TargetResource = $injector.get("Notification");
          var action = TargetResource["::updateById::userDetail::notifications"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.UserDetail.invitedUsers
     * @header lbServices.UserDetail.invitedUsers
     * @object
     * @description
     *
     * The object `UserDetail.invitedUsers` groups methods
     * manipulating `InviteUser` instances related to `UserDetail`.
     *
     * Call {@link lbServices.UserDetail#invitedUsers UserDetail.invitedUsers()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.UserDetail#invitedUsers
         * @methodOf lbServices.UserDetail
         *
         * @description
         *
         * Queries invitedUsers of userDetail.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `InviteUser` object.)
         * </em>
         */
        R.invitedUsers = function() {
          var TargetResource = $injector.get("InviteUser");
          var action = TargetResource["::get::userDetail::invitedUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.invitedUsers#count
         * @methodOf lbServices.UserDetail.invitedUsers
         *
         * @description
         *
         * Counts invitedUsers of userDetail.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.invitedUsers.count = function() {
          var TargetResource = $injector.get("InviteUser");
          var action = TargetResource["::count::userDetail::invitedUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.invitedUsers#create
         * @methodOf lbServices.UserDetail.invitedUsers
         *
         * @description
         *
         * Creates a new instance in invitedUsers of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `InviteUser` object.)
         * </em>
         */
        R.invitedUsers.create = function() {
          var TargetResource = $injector.get("InviteUser");
          var action = TargetResource["::create::userDetail::invitedUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.invitedUsers#createMany
         * @methodOf lbServices.UserDetail.invitedUsers
         *
         * @description
         *
         * Creates a new instance in invitedUsers of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `InviteUser` object.)
         * </em>
         */
        R.invitedUsers.createMany = function() {
          var TargetResource = $injector.get("InviteUser");
          var action = TargetResource["::createMany::userDetail::invitedUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.invitedUsers#destroyAll
         * @methodOf lbServices.UserDetail.invitedUsers
         *
         * @description
         *
         * Deletes all invitedUsers of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.invitedUsers.destroyAll = function() {
          var TargetResource = $injector.get("InviteUser");
          var action = TargetResource["::delete::userDetail::invitedUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.invitedUsers#destroyById
         * @methodOf lbServices.UserDetail.invitedUsers
         *
         * @description
         *
         * Delete a related item by id for invitedUsers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for invitedUsers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.invitedUsers.destroyById = function() {
          var TargetResource = $injector.get("InviteUser");
          var action = TargetResource["::destroyById::userDetail::invitedUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.invitedUsers#findById
         * @methodOf lbServices.UserDetail.invitedUsers
         *
         * @description
         *
         * Find a related item by id for invitedUsers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for invitedUsers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `InviteUser` object.)
         * </em>
         */
        R.invitedUsers.findById = function() {
          var TargetResource = $injector.get("InviteUser");
          var action = TargetResource["::findById::userDetail::invitedUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.invitedUsers#updateById
         * @methodOf lbServices.UserDetail.invitedUsers
         *
         * @description
         *
         * Update a related item by id for invitedUsers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for invitedUsers
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `InviteUser` object.)
         * </em>
         */
        R.invitedUsers.updateById = function() {
          var TargetResource = $injector.get("InviteUser");
          var action = TargetResource["::updateById::userDetail::invitedUsers"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.UserDetail.invitations
     * @header lbServices.UserDetail.invitations
     * @object
     * @description
     *
     * The object `UserDetail.invitations` groups methods
     * manipulating `InviteUser` instances related to `UserDetail`.
     *
     * Call {@link lbServices.UserDetail#invitations UserDetail.invitations()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.UserDetail#invitations
         * @methodOf lbServices.UserDetail
         *
         * @description
         *
         * Queries invitations of userDetail.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `InviteUser` object.)
         * </em>
         */
        R.invitations = function() {
          var TargetResource = $injector.get("InviteUser");
          var action = TargetResource["::get::userDetail::invitations"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.invitations#count
         * @methodOf lbServices.UserDetail.invitations
         *
         * @description
         *
         * Counts invitations of userDetail.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.invitations.count = function() {
          var TargetResource = $injector.get("InviteUser");
          var action = TargetResource["::count::userDetail::invitations"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.invitations#create
         * @methodOf lbServices.UserDetail.invitations
         *
         * @description
         *
         * Creates a new instance in invitations of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `InviteUser` object.)
         * </em>
         */
        R.invitations.create = function() {
          var TargetResource = $injector.get("InviteUser");
          var action = TargetResource["::create::userDetail::invitations"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.invitations#createMany
         * @methodOf lbServices.UserDetail.invitations
         *
         * @description
         *
         * Creates a new instance in invitations of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `InviteUser` object.)
         * </em>
         */
        R.invitations.createMany = function() {
          var TargetResource = $injector.get("InviteUser");
          var action = TargetResource["::createMany::userDetail::invitations"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.invitations#destroyAll
         * @methodOf lbServices.UserDetail.invitations
         *
         * @description
         *
         * Deletes all invitations of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.invitations.destroyAll = function() {
          var TargetResource = $injector.get("InviteUser");
          var action = TargetResource["::delete::userDetail::invitations"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.invitations#destroyById
         * @methodOf lbServices.UserDetail.invitations
         *
         * @description
         *
         * Delete a related item by id for invitations.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for invitations
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.invitations.destroyById = function() {
          var TargetResource = $injector.get("InviteUser");
          var action = TargetResource["::destroyById::userDetail::invitations"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.invitations#findById
         * @methodOf lbServices.UserDetail.invitations
         *
         * @description
         *
         * Find a related item by id for invitations.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for invitations
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `InviteUser` object.)
         * </em>
         */
        R.invitations.findById = function() {
          var TargetResource = $injector.get("InviteUser");
          var action = TargetResource["::findById::userDetail::invitations"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.invitations#updateById
         * @methodOf lbServices.UserDetail.invitations
         *
         * @description
         *
         * Update a related item by id for invitations.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for invitations
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `InviteUser` object.)
         * </em>
         */
        R.invitations.updateById = function() {
          var TargetResource = $injector.get("InviteUser");
          var action = TargetResource["::updateById::userDetail::invitations"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.UserDetail.assignEndorsets
     * @header lbServices.UserDetail.assignEndorsets
     * @object
     * @description
     *
     * The object `UserDetail.assignEndorsets` groups methods
     * manipulating `AssignEndorsets` instances related to `UserDetail`.
     *
     * Call {@link lbServices.UserDetail#assignEndorsets UserDetail.assignEndorsets()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.UserDetail#assignEndorsets
         * @methodOf lbServices.UserDetail
         *
         * @description
         *
         * Queries assignEndorsets of userDetail.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AssignEndorsets` object.)
         * </em>
         */
        R.assignEndorsets = function() {
          var TargetResource = $injector.get("AssignEndorsets");
          var action = TargetResource["::get::userDetail::assignEndorsets"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.assignEndorsets#count
         * @methodOf lbServices.UserDetail.assignEndorsets
         *
         * @description
         *
         * Counts assignEndorsets of userDetail.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.assignEndorsets.count = function() {
          var TargetResource = $injector.get("AssignEndorsets");
          var action = TargetResource["::count::userDetail::assignEndorsets"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.assignEndorsets#create
         * @methodOf lbServices.UserDetail.assignEndorsets
         *
         * @description
         *
         * Creates a new instance in assignEndorsets of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AssignEndorsets` object.)
         * </em>
         */
        R.assignEndorsets.create = function() {
          var TargetResource = $injector.get("AssignEndorsets");
          var action = TargetResource["::create::userDetail::assignEndorsets"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.assignEndorsets#createMany
         * @methodOf lbServices.UserDetail.assignEndorsets
         *
         * @description
         *
         * Creates a new instance in assignEndorsets of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AssignEndorsets` object.)
         * </em>
         */
        R.assignEndorsets.createMany = function() {
          var TargetResource = $injector.get("AssignEndorsets");
          var action = TargetResource["::createMany::userDetail::assignEndorsets"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.assignEndorsets#destroyAll
         * @methodOf lbServices.UserDetail.assignEndorsets
         *
         * @description
         *
         * Deletes all assignEndorsets of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.assignEndorsets.destroyAll = function() {
          var TargetResource = $injector.get("AssignEndorsets");
          var action = TargetResource["::delete::userDetail::assignEndorsets"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.assignEndorsets#destroyById
         * @methodOf lbServices.UserDetail.assignEndorsets
         *
         * @description
         *
         * Delete a related item by id for assignEndorsets.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for assignEndorsets
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.assignEndorsets.destroyById = function() {
          var TargetResource = $injector.get("AssignEndorsets");
          var action = TargetResource["::destroyById::userDetail::assignEndorsets"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.assignEndorsets#findById
         * @methodOf lbServices.UserDetail.assignEndorsets
         *
         * @description
         *
         * Find a related item by id for assignEndorsets.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for assignEndorsets
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AssignEndorsets` object.)
         * </em>
         */
        R.assignEndorsets.findById = function() {
          var TargetResource = $injector.get("AssignEndorsets");
          var action = TargetResource["::findById::userDetail::assignEndorsets"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.assignEndorsets#updateById
         * @methodOf lbServices.UserDetail.assignEndorsets
         *
         * @description
         *
         * Update a related item by id for assignEndorsets.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for assignEndorsets
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AssignEndorsets` object.)
         * </em>
         */
        R.assignEndorsets.updateById = function() {
          var TargetResource = $injector.get("AssignEndorsets");
          var action = TargetResource["::updateById::userDetail::assignEndorsets"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.UserDetail.assignedEndorsets
     * @header lbServices.UserDetail.assignedEndorsets
     * @object
     * @description
     *
     * The object `UserDetail.assignedEndorsets` groups methods
     * manipulating `AssignEndorsets` instances related to `UserDetail`.
     *
     * Call {@link lbServices.UserDetail#assignedEndorsets UserDetail.assignedEndorsets()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.UserDetail#assignedEndorsets
         * @methodOf lbServices.UserDetail
         *
         * @description
         *
         * Queries assignedEndorsets of userDetail.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AssignEndorsets` object.)
         * </em>
         */
        R.assignedEndorsets = function() {
          var TargetResource = $injector.get("AssignEndorsets");
          var action = TargetResource["::get::userDetail::assignedEndorsets"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.assignedEndorsets#count
         * @methodOf lbServices.UserDetail.assignedEndorsets
         *
         * @description
         *
         * Counts assignedEndorsets of userDetail.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.assignedEndorsets.count = function() {
          var TargetResource = $injector.get("AssignEndorsets");
          var action = TargetResource["::count::userDetail::assignedEndorsets"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.assignedEndorsets#create
         * @methodOf lbServices.UserDetail.assignedEndorsets
         *
         * @description
         *
         * Creates a new instance in assignedEndorsets of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AssignEndorsets` object.)
         * </em>
         */
        R.assignedEndorsets.create = function() {
          var TargetResource = $injector.get("AssignEndorsets");
          var action = TargetResource["::create::userDetail::assignedEndorsets"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.assignedEndorsets#createMany
         * @methodOf lbServices.UserDetail.assignedEndorsets
         *
         * @description
         *
         * Creates a new instance in assignedEndorsets of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AssignEndorsets` object.)
         * </em>
         */
        R.assignedEndorsets.createMany = function() {
          var TargetResource = $injector.get("AssignEndorsets");
          var action = TargetResource["::createMany::userDetail::assignedEndorsets"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.assignedEndorsets#destroyAll
         * @methodOf lbServices.UserDetail.assignedEndorsets
         *
         * @description
         *
         * Deletes all assignedEndorsets of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.assignedEndorsets.destroyAll = function() {
          var TargetResource = $injector.get("AssignEndorsets");
          var action = TargetResource["::delete::userDetail::assignedEndorsets"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.assignedEndorsets#destroyById
         * @methodOf lbServices.UserDetail.assignedEndorsets
         *
         * @description
         *
         * Delete a related item by id for assignedEndorsets.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for assignedEndorsets
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.assignedEndorsets.destroyById = function() {
          var TargetResource = $injector.get("AssignEndorsets");
          var action = TargetResource["::destroyById::userDetail::assignedEndorsets"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.assignedEndorsets#findById
         * @methodOf lbServices.UserDetail.assignedEndorsets
         *
         * @description
         *
         * Find a related item by id for assignedEndorsets.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for assignedEndorsets
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AssignEndorsets` object.)
         * </em>
         */
        R.assignedEndorsets.findById = function() {
          var TargetResource = $injector.get("AssignEndorsets");
          var action = TargetResource["::findById::userDetail::assignedEndorsets"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserDetail.assignedEndorsets#updateById
         * @methodOf lbServices.UserDetail.assignedEndorsets
         *
         * @description
         *
         * Update a related item by id for assignedEndorsets.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for assignedEndorsets
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AssignEndorsets` object.)
         * </em>
         */
        R.assignedEndorsets.updateById = function() {
          var TargetResource = $injector.get("AssignEndorsets");
          var action = TargetResource["::updateById::userDetail::assignedEndorsets"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.UserProfile
 * @header lbServices.UserProfile
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `UserProfile` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "UserProfile",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/profiles/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use UserProfile.userDetail() instead.
        "prototype$__get__userDetail": {
          url: urlBase + "/profiles/:id/userDetail",
          method: "GET"
        },

        // INTERNAL. Use UserProfile.endorsements.findById() instead.
        "prototype$__findById__endorsements": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/profiles/:id/endorsements/:fk",
          method: "GET"
        },

        // INTERNAL. Use UserProfile.endorsements.destroyById() instead.
        "prototype$__destroyById__endorsements": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/profiles/:id/endorsements/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use UserProfile.endorsements.updateById() instead.
        "prototype$__updateById__endorsements": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/profiles/:id/endorsements/:fk",
          method: "PUT"
        },

        // INTERNAL. Use UserProfile.endorsets.findById() instead.
        "prototype$__findById__endorsets": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/profiles/:id/endorsets/:fk",
          method: "GET"
        },

        // INTERNAL. Use UserProfile.endorsets.destroyById() instead.
        "prototype$__destroyById__endorsets": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/profiles/:id/endorsets/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use UserProfile.endorsets.updateById() instead.
        "prototype$__updateById__endorsets": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/profiles/:id/endorsets/:fk",
          method: "PUT"
        },

        // INTERNAL. Use UserProfile.endorserEndorsements.findById() instead.
        "prototype$__findById__endorserEndorsements": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/profiles/:id/endorserEndorsements/:fk",
          method: "GET"
        },

        // INTERNAL. Use UserProfile.endorserEndorsements.destroyById() instead.
        "prototype$__destroyById__endorserEndorsements": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/profiles/:id/endorserEndorsements/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use UserProfile.endorserEndorsements.updateById() instead.
        "prototype$__updateById__endorserEndorsements": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/profiles/:id/endorserEndorsements/:fk",
          method: "PUT"
        },

        // INTERNAL. Use UserProfile.endorsetSents.findById() instead.
        "prototype$__findById__endorsetSents": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/profiles/:id/endorsetSents/:fk",
          method: "GET"
        },

        // INTERNAL. Use UserProfile.endorsetSents.destroyById() instead.
        "prototype$__destroyById__endorsetSents": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/profiles/:id/endorsetSents/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use UserProfile.endorsetSents.updateById() instead.
        "prototype$__updateById__endorsetSents": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/profiles/:id/endorsetSents/:fk",
          method: "PUT"
        },

        // INTERNAL. Use UserProfile.endorsements() instead.
        "prototype$__get__endorsements": {
          isArray: true,
          url: urlBase + "/profiles/:id/endorsements",
          method: "GET"
        },

        // INTERNAL. Use UserProfile.endorsements.create() instead.
        "prototype$__create__endorsements": {
          url: urlBase + "/profiles/:id/endorsements",
          method: "POST"
        },

        // INTERNAL. Use UserProfile.endorsements.destroyAll() instead.
        "prototype$__delete__endorsements": {
          url: urlBase + "/profiles/:id/endorsements",
          method: "DELETE"
        },

        // INTERNAL. Use UserProfile.endorsements.count() instead.
        "prototype$__count__endorsements": {
          url: urlBase + "/profiles/:id/endorsements/count",
          method: "GET"
        },

        // INTERNAL. Use UserProfile.endorsets() instead.
        "prototype$__get__endorsets": {
          isArray: true,
          url: urlBase + "/profiles/:id/endorsets",
          method: "GET"
        },

        // INTERNAL. Use UserProfile.endorsets.create() instead.
        "prototype$__create__endorsets": {
          url: urlBase + "/profiles/:id/endorsets",
          method: "POST"
        },

        // INTERNAL. Use UserProfile.endorsets.destroyAll() instead.
        "prototype$__delete__endorsets": {
          url: urlBase + "/profiles/:id/endorsets",
          method: "DELETE"
        },

        // INTERNAL. Use UserProfile.endorsets.count() instead.
        "prototype$__count__endorsets": {
          url: urlBase + "/profiles/:id/endorsets/count",
          method: "GET"
        },

        // INTERNAL. Use UserProfile.endorserEndorsements() instead.
        "prototype$__get__endorserEndorsements": {
          isArray: true,
          url: urlBase + "/profiles/:id/endorserEndorsements",
          method: "GET"
        },

        // INTERNAL. Use UserProfile.endorserEndorsements.create() instead.
        "prototype$__create__endorserEndorsements": {
          url: urlBase + "/profiles/:id/endorserEndorsements",
          method: "POST"
        },

        // INTERNAL. Use UserProfile.endorserEndorsements.destroyAll() instead.
        "prototype$__delete__endorserEndorsements": {
          url: urlBase + "/profiles/:id/endorserEndorsements",
          method: "DELETE"
        },

        // INTERNAL. Use UserProfile.endorserEndorsements.count() instead.
        "prototype$__count__endorserEndorsements": {
          url: urlBase + "/profiles/:id/endorserEndorsements/count",
          method: "GET"
        },

        // INTERNAL. Use UserProfile.endorsetSents() instead.
        "prototype$__get__endorsetSents": {
          isArray: true,
          url: urlBase + "/profiles/:id/endorsetSents",
          method: "GET"
        },

        // INTERNAL. Use UserProfile.endorsetSents.create() instead.
        "prototype$__create__endorsetSents": {
          url: urlBase + "/profiles/:id/endorsetSents",
          method: "POST"
        },

        // INTERNAL. Use UserProfile.endorsetSents.destroyAll() instead.
        "prototype$__delete__endorsetSents": {
          url: urlBase + "/profiles/:id/endorsetSents",
          method: "DELETE"
        },

        // INTERNAL. Use UserProfile.endorsetSents.count() instead.
        "prototype$__count__endorsetSents": {
          url: urlBase + "/profiles/:id/endorsetSents/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.UserProfile#create
         * @methodOf lbServices.UserProfile
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserProfile` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/profiles",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.UserProfile#createMany
         * @methodOf lbServices.UserProfile
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserProfile` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/profiles",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.UserProfile#upsert
         * @methodOf lbServices.UserProfile
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserProfile` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/profiles",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.UserProfile#exists
         * @methodOf lbServices.UserProfile
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/profiles/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.UserProfile#findById
         * @methodOf lbServices.UserProfile
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserProfile` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/profiles/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.UserProfile#find
         * @methodOf lbServices.UserProfile
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserProfile` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/profiles",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.UserProfile#findOne
         * @methodOf lbServices.UserProfile
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserProfile` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/profiles/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.UserProfile#updateAll
         * @methodOf lbServices.UserProfile
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "updateAll": {
          url: urlBase + "/profiles/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.UserProfile#deleteById
         * @methodOf lbServices.UserProfile
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "deleteById": {
          url: urlBase + "/profiles/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.UserProfile#count
         * @methodOf lbServices.UserProfile
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/profiles/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.UserProfile#prototype$updateAttributes
         * @methodOf lbServices.UserProfile
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserProfile` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/profiles/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.UserProfile#createChangeStream
         * @methodOf lbServices.UserProfile
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/profiles/change-stream",
          method: "POST"
        },

        // INTERNAL. Use UserDetail.userProfiles.findById() instead.
        "::findById::userDetail::userProfiles": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/userProfiles/:fk",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.userProfiles.destroyById() instead.
        "::destroyById::userDetail::userProfiles": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/userProfiles/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use UserDetail.userProfiles.updateById() instead.
        "::updateById::userDetail::userProfiles": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/userProfiles/:fk",
          method: "PUT"
        },

        // INTERNAL. Use UserDetail.userProfiles() instead.
        "::get::userDetail::userProfiles": {
          isArray: true,
          url: urlBase + "/userDetails/:id/userProfiles",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.userProfiles.create() instead.
        "::create::userDetail::userProfiles": {
          url: urlBase + "/userDetails/:id/userProfiles",
          method: "POST"
        },

        // INTERNAL. Use UserDetail.userProfiles.createMany() instead.
        "::createMany::userDetail::userProfiles": {
          isArray: true,
          url: urlBase + "/userDetails/:id/userProfiles",
          method: "POST"
        },

        // INTERNAL. Use UserDetail.userProfiles.destroyAll() instead.
        "::delete::userDetail::userProfiles": {
          url: urlBase + "/userDetails/:id/userProfiles",
          method: "DELETE"
        },

        // INTERNAL. Use UserDetail.userProfiles.count() instead.
        "::count::userDetail::userProfiles": {
          url: urlBase + "/userDetails/:id/userProfiles/count",
          method: "GET"
        },

        // INTERNAL. Use Endorsement.userProfile() instead.
        "::get::endorsement::userProfile": {
          url: urlBase + "/endorsements/:id/userProfile",
          method: "GET"
        },

        // INTERNAL. Use Endorset.userProfile() instead.
        "::get::endorset::userProfile": {
          url: urlBase + "/endorsets/:id/userProfile",
          method: "GET"
        },

        // INTERNAL. Use EndorserEndorsement.userProfile() instead.
        "::get::endorserEndorsement::userProfile": {
          url: urlBase + "/endorserEndorsements/:id/userProfile",
          method: "GET"
        },

        // INTERNAL. Use EndorsetSent.userProfile() instead.
        "::get::endorsetSent::userProfile": {
          url: urlBase + "/endorsetSents/:id/userProfile",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.UserProfile#updateOrCreate
         * @methodOf lbServices.UserProfile
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserProfile` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.UserProfile#update
         * @methodOf lbServices.UserProfile
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.UserProfile#destroyById
         * @methodOf lbServices.UserProfile
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.UserProfile#removeById
         * @methodOf lbServices.UserProfile
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.UserProfile#modelName
    * @propertyOf lbServices.UserProfile
    * @description
    * The name of the model represented by this $resource,
    * i.e. `UserProfile`.
    */
    R.modelName = "UserProfile";


        /**
         * @ngdoc method
         * @name lbServices.UserProfile#userDetail
         * @methodOf lbServices.UserProfile
         *
         * @description
         *
         * Fetches belongsTo relation userDetail.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserDetail` object.)
         * </em>
         */
        R.userDetail = function() {
          var TargetResource = $injector.get("UserDetail");
          var action = TargetResource["::get::userProfile::userDetail"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.UserProfile.endorsements
     * @header lbServices.UserProfile.endorsements
     * @object
     * @description
     *
     * The object `UserProfile.endorsements` groups methods
     * manipulating `Endorsement` instances related to `UserProfile`.
     *
     * Call {@link lbServices.UserProfile#endorsements UserProfile.endorsements()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.UserProfile#endorsements
         * @methodOf lbServices.UserProfile
         *
         * @description
         *
         * Queries endorsements of userProfile.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Endorsement` object.)
         * </em>
         */
        R.endorsements = function() {
          var TargetResource = $injector.get("Endorsement");
          var action = TargetResource["::get::userProfile::endorsements"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserProfile.endorsements#count
         * @methodOf lbServices.UserProfile.endorsements
         *
         * @description
         *
         * Counts endorsements of userProfile.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.endorsements.count = function() {
          var TargetResource = $injector.get("Endorsement");
          var action = TargetResource["::count::userProfile::endorsements"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserProfile.endorsements#create
         * @methodOf lbServices.UserProfile.endorsements
         *
         * @description
         *
         * Creates a new instance in endorsements of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Endorsement` object.)
         * </em>
         */
        R.endorsements.create = function() {
          var TargetResource = $injector.get("Endorsement");
          var action = TargetResource["::create::userProfile::endorsements"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserProfile.endorsements#createMany
         * @methodOf lbServices.UserProfile.endorsements
         *
         * @description
         *
         * Creates a new instance in endorsements of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Endorsement` object.)
         * </em>
         */
        R.endorsements.createMany = function() {
          var TargetResource = $injector.get("Endorsement");
          var action = TargetResource["::createMany::userProfile::endorsements"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserProfile.endorsements#destroyAll
         * @methodOf lbServices.UserProfile.endorsements
         *
         * @description
         *
         * Deletes all endorsements of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.endorsements.destroyAll = function() {
          var TargetResource = $injector.get("Endorsement");
          var action = TargetResource["::delete::userProfile::endorsements"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserProfile.endorsements#destroyById
         * @methodOf lbServices.UserProfile.endorsements
         *
         * @description
         *
         * Delete a related item by id for endorsements.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for endorsements
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.endorsements.destroyById = function() {
          var TargetResource = $injector.get("Endorsement");
          var action = TargetResource["::destroyById::userProfile::endorsements"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserProfile.endorsements#findById
         * @methodOf lbServices.UserProfile.endorsements
         *
         * @description
         *
         * Find a related item by id for endorsements.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for endorsements
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Endorsement` object.)
         * </em>
         */
        R.endorsements.findById = function() {
          var TargetResource = $injector.get("Endorsement");
          var action = TargetResource["::findById::userProfile::endorsements"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserProfile.endorsements#updateById
         * @methodOf lbServices.UserProfile.endorsements
         *
         * @description
         *
         * Update a related item by id for endorsements.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for endorsements
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Endorsement` object.)
         * </em>
         */
        R.endorsements.updateById = function() {
          var TargetResource = $injector.get("Endorsement");
          var action = TargetResource["::updateById::userProfile::endorsements"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.UserProfile.endorsets
     * @header lbServices.UserProfile.endorsets
     * @object
     * @description
     *
     * The object `UserProfile.endorsets` groups methods
     * manipulating `Endorset` instances related to `UserProfile`.
     *
     * Call {@link lbServices.UserProfile#endorsets UserProfile.endorsets()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.UserProfile#endorsets
         * @methodOf lbServices.UserProfile
         *
         * @description
         *
         * Queries endorsets of userProfile.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Endorset` object.)
         * </em>
         */
        R.endorsets = function() {
          var TargetResource = $injector.get("Endorset");
          var action = TargetResource["::get::userProfile::endorsets"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserProfile.endorsets#count
         * @methodOf lbServices.UserProfile.endorsets
         *
         * @description
         *
         * Counts endorsets of userProfile.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.endorsets.count = function() {
          var TargetResource = $injector.get("Endorset");
          var action = TargetResource["::count::userProfile::endorsets"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserProfile.endorsets#create
         * @methodOf lbServices.UserProfile.endorsets
         *
         * @description
         *
         * Creates a new instance in endorsets of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Endorset` object.)
         * </em>
         */
        R.endorsets.create = function() {
          var TargetResource = $injector.get("Endorset");
          var action = TargetResource["::create::userProfile::endorsets"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserProfile.endorsets#createMany
         * @methodOf lbServices.UserProfile.endorsets
         *
         * @description
         *
         * Creates a new instance in endorsets of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Endorset` object.)
         * </em>
         */
        R.endorsets.createMany = function() {
          var TargetResource = $injector.get("Endorset");
          var action = TargetResource["::createMany::userProfile::endorsets"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserProfile.endorsets#destroyAll
         * @methodOf lbServices.UserProfile.endorsets
         *
         * @description
         *
         * Deletes all endorsets of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.endorsets.destroyAll = function() {
          var TargetResource = $injector.get("Endorset");
          var action = TargetResource["::delete::userProfile::endorsets"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserProfile.endorsets#destroyById
         * @methodOf lbServices.UserProfile.endorsets
         *
         * @description
         *
         * Delete a related item by id for endorsets.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for endorsets
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.endorsets.destroyById = function() {
          var TargetResource = $injector.get("Endorset");
          var action = TargetResource["::destroyById::userProfile::endorsets"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserProfile.endorsets#findById
         * @methodOf lbServices.UserProfile.endorsets
         *
         * @description
         *
         * Find a related item by id for endorsets.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for endorsets
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Endorset` object.)
         * </em>
         */
        R.endorsets.findById = function() {
          var TargetResource = $injector.get("Endorset");
          var action = TargetResource["::findById::userProfile::endorsets"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserProfile.endorsets#updateById
         * @methodOf lbServices.UserProfile.endorsets
         *
         * @description
         *
         * Update a related item by id for endorsets.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for endorsets
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Endorset` object.)
         * </em>
         */
        R.endorsets.updateById = function() {
          var TargetResource = $injector.get("Endorset");
          var action = TargetResource["::updateById::userProfile::endorsets"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.UserProfile.endorserEndorsements
     * @header lbServices.UserProfile.endorserEndorsements
     * @object
     * @description
     *
     * The object `UserProfile.endorserEndorsements` groups methods
     * manipulating `EndorserEndorsement` instances related to `UserProfile`.
     *
     * Call {@link lbServices.UserProfile#endorserEndorsements UserProfile.endorserEndorsements()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.UserProfile#endorserEndorsements
         * @methodOf lbServices.UserProfile
         *
         * @description
         *
         * Queries endorserEndorsements of userProfile.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorserEndorsement` object.)
         * </em>
         */
        R.endorserEndorsements = function() {
          var TargetResource = $injector.get("EndorserEndorsement");
          var action = TargetResource["::get::userProfile::endorserEndorsements"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserProfile.endorserEndorsements#count
         * @methodOf lbServices.UserProfile.endorserEndorsements
         *
         * @description
         *
         * Counts endorserEndorsements of userProfile.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.endorserEndorsements.count = function() {
          var TargetResource = $injector.get("EndorserEndorsement");
          var action = TargetResource["::count::userProfile::endorserEndorsements"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserProfile.endorserEndorsements#create
         * @methodOf lbServices.UserProfile.endorserEndorsements
         *
         * @description
         *
         * Creates a new instance in endorserEndorsements of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorserEndorsement` object.)
         * </em>
         */
        R.endorserEndorsements.create = function() {
          var TargetResource = $injector.get("EndorserEndorsement");
          var action = TargetResource["::create::userProfile::endorserEndorsements"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserProfile.endorserEndorsements#createMany
         * @methodOf lbServices.UserProfile.endorserEndorsements
         *
         * @description
         *
         * Creates a new instance in endorserEndorsements of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorserEndorsement` object.)
         * </em>
         */
        R.endorserEndorsements.createMany = function() {
          var TargetResource = $injector.get("EndorserEndorsement");
          var action = TargetResource["::createMany::userProfile::endorserEndorsements"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserProfile.endorserEndorsements#destroyAll
         * @methodOf lbServices.UserProfile.endorserEndorsements
         *
         * @description
         *
         * Deletes all endorserEndorsements of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.endorserEndorsements.destroyAll = function() {
          var TargetResource = $injector.get("EndorserEndorsement");
          var action = TargetResource["::delete::userProfile::endorserEndorsements"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserProfile.endorserEndorsements#destroyById
         * @methodOf lbServices.UserProfile.endorserEndorsements
         *
         * @description
         *
         * Delete a related item by id for endorserEndorsements.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for endorserEndorsements
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.endorserEndorsements.destroyById = function() {
          var TargetResource = $injector.get("EndorserEndorsement");
          var action = TargetResource["::destroyById::userProfile::endorserEndorsements"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserProfile.endorserEndorsements#findById
         * @methodOf lbServices.UserProfile.endorserEndorsements
         *
         * @description
         *
         * Find a related item by id for endorserEndorsements.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for endorserEndorsements
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorserEndorsement` object.)
         * </em>
         */
        R.endorserEndorsements.findById = function() {
          var TargetResource = $injector.get("EndorserEndorsement");
          var action = TargetResource["::findById::userProfile::endorserEndorsements"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserProfile.endorserEndorsements#updateById
         * @methodOf lbServices.UserProfile.endorserEndorsements
         *
         * @description
         *
         * Update a related item by id for endorserEndorsements.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for endorserEndorsements
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorserEndorsement` object.)
         * </em>
         */
        R.endorserEndorsements.updateById = function() {
          var TargetResource = $injector.get("EndorserEndorsement");
          var action = TargetResource["::updateById::userProfile::endorserEndorsements"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.UserProfile.endorsetSents
     * @header lbServices.UserProfile.endorsetSents
     * @object
     * @description
     *
     * The object `UserProfile.endorsetSents` groups methods
     * manipulating `EndorsetSent` instances related to `UserProfile`.
     *
     * Call {@link lbServices.UserProfile#endorsetSents UserProfile.endorsetSents()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.UserProfile#endorsetSents
         * @methodOf lbServices.UserProfile
         *
         * @description
         *
         * Queries endorsetSents of userProfile.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsetSent` object.)
         * </em>
         */
        R.endorsetSents = function() {
          var TargetResource = $injector.get("EndorsetSent");
          var action = TargetResource["::get::userProfile::endorsetSents"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserProfile.endorsetSents#count
         * @methodOf lbServices.UserProfile.endorsetSents
         *
         * @description
         *
         * Counts endorsetSents of userProfile.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.endorsetSents.count = function() {
          var TargetResource = $injector.get("EndorsetSent");
          var action = TargetResource["::count::userProfile::endorsetSents"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserProfile.endorsetSents#create
         * @methodOf lbServices.UserProfile.endorsetSents
         *
         * @description
         *
         * Creates a new instance in endorsetSents of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsetSent` object.)
         * </em>
         */
        R.endorsetSents.create = function() {
          var TargetResource = $injector.get("EndorsetSent");
          var action = TargetResource["::create::userProfile::endorsetSents"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserProfile.endorsetSents#createMany
         * @methodOf lbServices.UserProfile.endorsetSents
         *
         * @description
         *
         * Creates a new instance in endorsetSents of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsetSent` object.)
         * </em>
         */
        R.endorsetSents.createMany = function() {
          var TargetResource = $injector.get("EndorsetSent");
          var action = TargetResource["::createMany::userProfile::endorsetSents"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserProfile.endorsetSents#destroyAll
         * @methodOf lbServices.UserProfile.endorsetSents
         *
         * @description
         *
         * Deletes all endorsetSents of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.endorsetSents.destroyAll = function() {
          var TargetResource = $injector.get("EndorsetSent");
          var action = TargetResource["::delete::userProfile::endorsetSents"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserProfile.endorsetSents#destroyById
         * @methodOf lbServices.UserProfile.endorsetSents
         *
         * @description
         *
         * Delete a related item by id for endorsetSents.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for endorsetSents
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.endorsetSents.destroyById = function() {
          var TargetResource = $injector.get("EndorsetSent");
          var action = TargetResource["::destroyById::userProfile::endorsetSents"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserProfile.endorsetSents#findById
         * @methodOf lbServices.UserProfile.endorsetSents
         *
         * @description
         *
         * Find a related item by id for endorsetSents.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for endorsetSents
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsetSent` object.)
         * </em>
         */
        R.endorsetSents.findById = function() {
          var TargetResource = $injector.get("EndorsetSent");
          var action = TargetResource["::findById::userProfile::endorsetSents"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.UserProfile.endorsetSents#updateById
         * @methodOf lbServices.UserProfile.endorsetSents
         *
         * @description
         *
         * Update a related item by id for endorsetSents.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for endorsetSents
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsetSent` object.)
         * </em>
         */
        R.endorsetSents.updateById = function() {
          var TargetResource = $injector.get("EndorsetSent");
          var action = TargetResource["::updateById::userProfile::endorsetSents"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.Endorsement
 * @header lbServices.Endorsement
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Endorsement` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "Endorsement",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/endorsements/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use Endorsement.userDetail() instead.
        "prototype$__get__userDetail": {
          url: urlBase + "/endorsements/:id/userDetail",
          method: "GET"
        },

        // INTERNAL. Use Endorsement.userProfile() instead.
        "prototype$__get__userProfile": {
          url: urlBase + "/endorsements/:id/userProfile",
          method: "GET"
        },

        // INTERNAL. Use Endorsement.endorserUser() instead.
        "prototype$__get__endorserUser": {
          url: urlBase + "/endorsements/:id/endorserUser",
          method: "GET"
        },

        // INTERNAL. Use Endorsement.endorsementCompanies.findById() instead.
        "prototype$__findById__endorsementCompanies": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/endorsements/:id/endorsementCompanies/:fk",
          method: "GET"
        },

        // INTERNAL. Use Endorsement.endorsementCompanies.destroyById() instead.
        "prototype$__destroyById__endorsementCompanies": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/endorsements/:id/endorsementCompanies/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Endorsement.endorsementCompanies.updateById() instead.
        "prototype$__updateById__endorsementCompanies": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/endorsements/:id/endorsementCompanies/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Endorsement.questions.findById() instead.
        "prototype$__findById__questions": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/endorsements/:id/questions/:fk",
          method: "GET"
        },

        // INTERNAL. Use Endorsement.questions.destroyById() instead.
        "prototype$__destroyById__questions": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/endorsements/:id/questions/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Endorsement.questions.updateById() instead.
        "prototype$__updateById__questions": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/endorsements/:id/questions/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Endorsement.endorsementSkills.findById() instead.
        "prototype$__findById__endorsementSkills": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/endorsements/:id/endorsementSkills/:fk",
          method: "GET"
        },

        // INTERNAL. Use Endorsement.endorsementSkills.destroyById() instead.
        "prototype$__destroyById__endorsementSkills": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/endorsements/:id/endorsementSkills/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Endorsement.endorsementSkills.updateById() instead.
        "prototype$__updateById__endorsementSkills": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/endorsements/:id/endorsementSkills/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Endorsement.hrFeedbacks.findById() instead.
        "prototype$__findById__hrFeedbacks": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/endorsements/:id/hrFeedbacks/:fk",
          method: "GET"
        },

        // INTERNAL. Use Endorsement.hrFeedbacks.destroyById() instead.
        "prototype$__destroyById__hrFeedbacks": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/endorsements/:id/hrFeedbacks/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Endorsement.hrFeedbacks.updateById() instead.
        "prototype$__updateById__hrFeedbacks": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/endorsements/:id/hrFeedbacks/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Endorsement.endorsets.findById() instead.
        "prototype$__findById__endorsets": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/endorsements/:id/endorsets/:fk",
          method: "GET"
        },

        // INTERNAL. Use Endorsement.endorsets.destroyById() instead.
        "prototype$__destroyById__endorsets": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/endorsements/:id/endorsets/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Endorsement.endorsets.updateById() instead.
        "prototype$__updateById__endorsets": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/endorsements/:id/endorsets/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Endorsement.endorserEndorsements.findById() instead.
        "prototype$__findById__endorserEndorsements": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/endorsements/:id/endorserEndorsements/:fk",
          method: "GET"
        },

        // INTERNAL. Use Endorsement.endorserEndorsements.destroyById() instead.
        "prototype$__destroyById__endorserEndorsements": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/endorsements/:id/endorserEndorsements/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Endorsement.endorserEndorsements.updateById() instead.
        "prototype$__updateById__endorserEndorsements": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/endorsements/:id/endorserEndorsements/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Endorsement.endorsementCompanies() instead.
        "prototype$__get__endorsementCompanies": {
          isArray: true,
          url: urlBase + "/endorsements/:id/endorsementCompanies",
          method: "GET"
        },

        // INTERNAL. Use Endorsement.endorsementCompanies.create() instead.
        "prototype$__create__endorsementCompanies": {
          url: urlBase + "/endorsements/:id/endorsementCompanies",
          method: "POST"
        },

        // INTERNAL. Use Endorsement.endorsementCompanies.destroyAll() instead.
        "prototype$__delete__endorsementCompanies": {
          url: urlBase + "/endorsements/:id/endorsementCompanies",
          method: "DELETE"
        },

        // INTERNAL. Use Endorsement.endorsementCompanies.count() instead.
        "prototype$__count__endorsementCompanies": {
          url: urlBase + "/endorsements/:id/endorsementCompanies/count",
          method: "GET"
        },

        // INTERNAL. Use Endorsement.questions() instead.
        "prototype$__get__questions": {
          isArray: true,
          url: urlBase + "/endorsements/:id/questions",
          method: "GET"
        },

        // INTERNAL. Use Endorsement.questions.create() instead.
        "prototype$__create__questions": {
          url: urlBase + "/endorsements/:id/questions",
          method: "POST"
        },

        // INTERNAL. Use Endorsement.questions.destroyAll() instead.
        "prototype$__delete__questions": {
          url: urlBase + "/endorsements/:id/questions",
          method: "DELETE"
        },

        // INTERNAL. Use Endorsement.questions.count() instead.
        "prototype$__count__questions": {
          url: urlBase + "/endorsements/:id/questions/count",
          method: "GET"
        },

        // INTERNAL. Use Endorsement.endorsementSkills() instead.
        "prototype$__get__endorsementSkills": {
          isArray: true,
          url: urlBase + "/endorsements/:id/endorsementSkills",
          method: "GET"
        },

        // INTERNAL. Use Endorsement.endorsementSkills.create() instead.
        "prototype$__create__endorsementSkills": {
          url: urlBase + "/endorsements/:id/endorsementSkills",
          method: "POST"
        },

        // INTERNAL. Use Endorsement.endorsementSkills.destroyAll() instead.
        "prototype$__delete__endorsementSkills": {
          url: urlBase + "/endorsements/:id/endorsementSkills",
          method: "DELETE"
        },

        // INTERNAL. Use Endorsement.endorsementSkills.count() instead.
        "prototype$__count__endorsementSkills": {
          url: urlBase + "/endorsements/:id/endorsementSkills/count",
          method: "GET"
        },

        // INTERNAL. Use Endorsement.hrFeedbacks() instead.
        "prototype$__get__hrFeedbacks": {
          isArray: true,
          url: urlBase + "/endorsements/:id/hrFeedbacks",
          method: "GET"
        },

        // INTERNAL. Use Endorsement.hrFeedbacks.create() instead.
        "prototype$__create__hrFeedbacks": {
          url: urlBase + "/endorsements/:id/hrFeedbacks",
          method: "POST"
        },

        // INTERNAL. Use Endorsement.hrFeedbacks.destroyAll() instead.
        "prototype$__delete__hrFeedbacks": {
          url: urlBase + "/endorsements/:id/hrFeedbacks",
          method: "DELETE"
        },

        // INTERNAL. Use Endorsement.hrFeedbacks.count() instead.
        "prototype$__count__hrFeedbacks": {
          url: urlBase + "/endorsements/:id/hrFeedbacks/count",
          method: "GET"
        },

        // INTERNAL. Use Endorsement.endorsets() instead.
        "prototype$__get__endorsets": {
          isArray: true,
          url: urlBase + "/endorsements/:id/endorsets",
          method: "GET"
        },

        // INTERNAL. Use Endorsement.endorsets.create() instead.
        "prototype$__create__endorsets": {
          url: urlBase + "/endorsements/:id/endorsets",
          method: "POST"
        },

        // INTERNAL. Use Endorsement.endorsets.destroyAll() instead.
        "prototype$__delete__endorsets": {
          url: urlBase + "/endorsements/:id/endorsets",
          method: "DELETE"
        },

        // INTERNAL. Use Endorsement.endorsets.count() instead.
        "prototype$__count__endorsets": {
          url: urlBase + "/endorsements/:id/endorsets/count",
          method: "GET"
        },

        // INTERNAL. Use Endorsement.endorserEndorsements() instead.
        "prototype$__get__endorserEndorsements": {
          isArray: true,
          url: urlBase + "/endorsements/:id/endorserEndorsements",
          method: "GET"
        },

        // INTERNAL. Use Endorsement.endorserEndorsements.create() instead.
        "prototype$__create__endorserEndorsements": {
          url: urlBase + "/endorsements/:id/endorserEndorsements",
          method: "POST"
        },

        // INTERNAL. Use Endorsement.endorserEndorsements.destroyAll() instead.
        "prototype$__delete__endorserEndorsements": {
          url: urlBase + "/endorsements/:id/endorserEndorsements",
          method: "DELETE"
        },

        // INTERNAL. Use Endorsement.endorserEndorsements.count() instead.
        "prototype$__count__endorserEndorsements": {
          url: urlBase + "/endorsements/:id/endorserEndorsements/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Endorsement#create
         * @methodOf lbServices.Endorsement
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Endorsement` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/endorsements",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Endorsement#createMany
         * @methodOf lbServices.Endorsement
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Endorsement` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/endorsements",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Endorsement#upsert
         * @methodOf lbServices.Endorsement
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Endorsement` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/endorsements",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Endorsement#exists
         * @methodOf lbServices.Endorsement
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/endorsements/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Endorsement#findById
         * @methodOf lbServices.Endorsement
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Endorsement` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/endorsements/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Endorsement#find
         * @methodOf lbServices.Endorsement
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Endorsement` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/endorsements",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Endorsement#findOne
         * @methodOf lbServices.Endorsement
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Endorsement` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/endorsements/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Endorsement#updateAll
         * @methodOf lbServices.Endorsement
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "updateAll": {
          url: urlBase + "/endorsements/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Endorsement#deleteById
         * @methodOf lbServices.Endorsement
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "deleteById": {
          url: urlBase + "/endorsements/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Endorsement#count
         * @methodOf lbServices.Endorsement
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/endorsements/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Endorsement#prototype$updateAttributes
         * @methodOf lbServices.Endorsement
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Endorsement` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/endorsements/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Endorsement#createChangeStream
         * @methodOf lbServices.Endorsement
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/endorsements/change-stream",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Endorsement#updateEndorserId
         * @methodOf lbServices.Endorsement
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `msg` – `{string=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `greeting` – `{string=}` - 
         */
        "updateEndorserId": {
          url: urlBase + "/endorsements/updateEndorserId",
          method: "POST"
        },

        // INTERNAL. Use UserDetail.endorsements.findById() instead.
        "::findById::userDetail::endorsements": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/endorsements/:fk",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.endorsements.destroyById() instead.
        "::destroyById::userDetail::endorsements": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/endorsements/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use UserDetail.endorsements.updateById() instead.
        "::updateById::userDetail::endorsements": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/endorsements/:fk",
          method: "PUT"
        },

        // INTERNAL. Use UserDetail.endorsementRequests.findById() instead.
        "::findById::userDetail::endorsementRequests": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/endorsementRequests/:fk",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.endorsementRequests.destroyById() instead.
        "::destroyById::userDetail::endorsementRequests": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/endorsementRequests/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use UserDetail.endorsementRequests.updateById() instead.
        "::updateById::userDetail::endorsementRequests": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/endorsementRequests/:fk",
          method: "PUT"
        },

        // INTERNAL. Use UserDetail.endorsements() instead.
        "::get::userDetail::endorsements": {
          isArray: true,
          url: urlBase + "/userDetails/:id/endorsements",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.endorsements.create() instead.
        "::create::userDetail::endorsements": {
          url: urlBase + "/userDetails/:id/endorsements",
          method: "POST"
        },

        // INTERNAL. Use UserDetail.endorsements.createMany() instead.
        "::createMany::userDetail::endorsements": {
          isArray: true,
          url: urlBase + "/userDetails/:id/endorsements",
          method: "POST"
        },

        // INTERNAL. Use UserDetail.endorsements.destroyAll() instead.
        "::delete::userDetail::endorsements": {
          url: urlBase + "/userDetails/:id/endorsements",
          method: "DELETE"
        },

        // INTERNAL. Use UserDetail.endorsements.count() instead.
        "::count::userDetail::endorsements": {
          url: urlBase + "/userDetails/:id/endorsements/count",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.endorsementRequests() instead.
        "::get::userDetail::endorsementRequests": {
          isArray: true,
          url: urlBase + "/userDetails/:id/endorsementRequests",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.endorsementRequests.create() instead.
        "::create::userDetail::endorsementRequests": {
          url: urlBase + "/userDetails/:id/endorsementRequests",
          method: "POST"
        },

        // INTERNAL. Use UserDetail.endorsementRequests.createMany() instead.
        "::createMany::userDetail::endorsementRequests": {
          isArray: true,
          url: urlBase + "/userDetails/:id/endorsementRequests",
          method: "POST"
        },

        // INTERNAL. Use UserDetail.endorsementRequests.destroyAll() instead.
        "::delete::userDetail::endorsementRequests": {
          url: urlBase + "/userDetails/:id/endorsementRequests",
          method: "DELETE"
        },

        // INTERNAL. Use UserDetail.endorsementRequests.count() instead.
        "::count::userDetail::endorsementRequests": {
          url: urlBase + "/userDetails/:id/endorsementRequests/count",
          method: "GET"
        },

        // INTERNAL. Use UserProfile.endorsements.findById() instead.
        "::findById::userProfile::endorsements": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/profiles/:id/endorsements/:fk",
          method: "GET"
        },

        // INTERNAL. Use UserProfile.endorsements.destroyById() instead.
        "::destroyById::userProfile::endorsements": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/profiles/:id/endorsements/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use UserProfile.endorsements.updateById() instead.
        "::updateById::userProfile::endorsements": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/profiles/:id/endorsements/:fk",
          method: "PUT"
        },

        // INTERNAL. Use UserProfile.endorsements() instead.
        "::get::userProfile::endorsements": {
          isArray: true,
          url: urlBase + "/profiles/:id/endorsements",
          method: "GET"
        },

        // INTERNAL. Use UserProfile.endorsements.create() instead.
        "::create::userProfile::endorsements": {
          url: urlBase + "/profiles/:id/endorsements",
          method: "POST"
        },

        // INTERNAL. Use UserProfile.endorsements.createMany() instead.
        "::createMany::userProfile::endorsements": {
          isArray: true,
          url: urlBase + "/profiles/:id/endorsements",
          method: "POST"
        },

        // INTERNAL. Use UserProfile.endorsements.destroyAll() instead.
        "::delete::userProfile::endorsements": {
          url: urlBase + "/profiles/:id/endorsements",
          method: "DELETE"
        },

        // INTERNAL. Use UserProfile.endorsements.count() instead.
        "::count::userProfile::endorsements": {
          url: urlBase + "/profiles/:id/endorsements/count",
          method: "GET"
        },

        // INTERNAL. Use EndorsementCompany.endorsement() instead.
        "::get::endorsementCompany::endorsement": {
          url: urlBase + "/endorsementCompanies/:id/endorsement",
          method: "GET"
        },

        // INTERNAL. Use Question.endorsement() instead.
        "::get::question::endorsement": {
          url: urlBase + "/questions/:id/endorsement",
          method: "GET"
        },

        // INTERNAL. Use EndorsementSkill.endorsement() instead.
        "::get::endorsementSkill::endorsement": {
          url: urlBase + "/endorsementSkills/:id/endorsement",
          method: "GET"
        },

        // INTERNAL. Use HrFeedback.endorsement() instead.
        "::get::hrFeedback::endorsement": {
          url: urlBase + "/hrFeedbacks/:id/endorsement",
          method: "GET"
        },

        // INTERNAL. Use Endorset.endorsement() instead.
        "::get::endorset::endorsement": {
          url: urlBase + "/endorsets/:id/endorsement",
          method: "GET"
        },

        // INTERNAL. Use EndorserEndorsement.endorsement() instead.
        "::get::endorserEndorsement::endorsement": {
          url: urlBase + "/endorserEndorsements/:id/endorsement",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.Endorsement#updateOrCreate
         * @methodOf lbServices.Endorsement
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Endorsement` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.Endorsement#update
         * @methodOf lbServices.Endorsement
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.Endorsement#destroyById
         * @methodOf lbServices.Endorsement
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.Endorsement#removeById
         * @methodOf lbServices.Endorsement
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.Endorsement#modelName
    * @propertyOf lbServices.Endorsement
    * @description
    * The name of the model represented by this $resource,
    * i.e. `Endorsement`.
    */
    R.modelName = "Endorsement";


        /**
         * @ngdoc method
         * @name lbServices.Endorsement#userDetail
         * @methodOf lbServices.Endorsement
         *
         * @description
         *
         * Fetches belongsTo relation userDetail.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserDetail` object.)
         * </em>
         */
        R.userDetail = function() {
          var TargetResource = $injector.get("UserDetail");
          var action = TargetResource["::get::endorsement::userDetail"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Endorsement#userProfile
         * @methodOf lbServices.Endorsement
         *
         * @description
         *
         * Fetches belongsTo relation userProfile.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserProfile` object.)
         * </em>
         */
        R.userProfile = function() {
          var TargetResource = $injector.get("UserProfile");
          var action = TargetResource["::get::endorsement::userProfile"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Endorsement#endorserUser
         * @methodOf lbServices.Endorsement
         *
         * @description
         *
         * Fetches belongsTo relation endorserUser.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserDetail` object.)
         * </em>
         */
        R.endorserUser = function() {
          var TargetResource = $injector.get("UserDetail");
          var action = TargetResource["::get::endorsement::endorserUser"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Endorsement.endorsementCompanies
     * @header lbServices.Endorsement.endorsementCompanies
     * @object
     * @description
     *
     * The object `Endorsement.endorsementCompanies` groups methods
     * manipulating `EndorsementCompany` instances related to `Endorsement`.
     *
     * Call {@link lbServices.Endorsement#endorsementCompanies Endorsement.endorsementCompanies()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.Endorsement#endorsementCompanies
         * @methodOf lbServices.Endorsement
         *
         * @description
         *
         * Queries endorsementCompanies of endorsement.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsementCompany` object.)
         * </em>
         */
        R.endorsementCompanies = function() {
          var TargetResource = $injector.get("EndorsementCompany");
          var action = TargetResource["::get::endorsement::endorsementCompanies"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Endorsement.endorsementCompanies#count
         * @methodOf lbServices.Endorsement.endorsementCompanies
         *
         * @description
         *
         * Counts endorsementCompanies of endorsement.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.endorsementCompanies.count = function() {
          var TargetResource = $injector.get("EndorsementCompany");
          var action = TargetResource["::count::endorsement::endorsementCompanies"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Endorsement.endorsementCompanies#create
         * @methodOf lbServices.Endorsement.endorsementCompanies
         *
         * @description
         *
         * Creates a new instance in endorsementCompanies of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsementCompany` object.)
         * </em>
         */
        R.endorsementCompanies.create = function() {
          var TargetResource = $injector.get("EndorsementCompany");
          var action = TargetResource["::create::endorsement::endorsementCompanies"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Endorsement.endorsementCompanies#createMany
         * @methodOf lbServices.Endorsement.endorsementCompanies
         *
         * @description
         *
         * Creates a new instance in endorsementCompanies of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsementCompany` object.)
         * </em>
         */
        R.endorsementCompanies.createMany = function() {
          var TargetResource = $injector.get("EndorsementCompany");
          var action = TargetResource["::createMany::endorsement::endorsementCompanies"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Endorsement.endorsementCompanies#destroyAll
         * @methodOf lbServices.Endorsement.endorsementCompanies
         *
         * @description
         *
         * Deletes all endorsementCompanies of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.endorsementCompanies.destroyAll = function() {
          var TargetResource = $injector.get("EndorsementCompany");
          var action = TargetResource["::delete::endorsement::endorsementCompanies"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Endorsement.endorsementCompanies#destroyById
         * @methodOf lbServices.Endorsement.endorsementCompanies
         *
         * @description
         *
         * Delete a related item by id for endorsementCompanies.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for endorsementCompanies
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.endorsementCompanies.destroyById = function() {
          var TargetResource = $injector.get("EndorsementCompany");
          var action = TargetResource["::destroyById::endorsement::endorsementCompanies"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Endorsement.endorsementCompanies#findById
         * @methodOf lbServices.Endorsement.endorsementCompanies
         *
         * @description
         *
         * Find a related item by id for endorsementCompanies.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for endorsementCompanies
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsementCompany` object.)
         * </em>
         */
        R.endorsementCompanies.findById = function() {
          var TargetResource = $injector.get("EndorsementCompany");
          var action = TargetResource["::findById::endorsement::endorsementCompanies"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Endorsement.endorsementCompanies#updateById
         * @methodOf lbServices.Endorsement.endorsementCompanies
         *
         * @description
         *
         * Update a related item by id for endorsementCompanies.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for endorsementCompanies
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsementCompany` object.)
         * </em>
         */
        R.endorsementCompanies.updateById = function() {
          var TargetResource = $injector.get("EndorsementCompany");
          var action = TargetResource["::updateById::endorsement::endorsementCompanies"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Endorsement.questions
     * @header lbServices.Endorsement.questions
     * @object
     * @description
     *
     * The object `Endorsement.questions` groups methods
     * manipulating `Question` instances related to `Endorsement`.
     *
     * Call {@link lbServices.Endorsement#questions Endorsement.questions()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.Endorsement#questions
         * @methodOf lbServices.Endorsement
         *
         * @description
         *
         * Queries questions of endorsement.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Question` object.)
         * </em>
         */
        R.questions = function() {
          var TargetResource = $injector.get("Question");
          var action = TargetResource["::get::endorsement::questions"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Endorsement.questions#count
         * @methodOf lbServices.Endorsement.questions
         *
         * @description
         *
         * Counts questions of endorsement.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.questions.count = function() {
          var TargetResource = $injector.get("Question");
          var action = TargetResource["::count::endorsement::questions"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Endorsement.questions#create
         * @methodOf lbServices.Endorsement.questions
         *
         * @description
         *
         * Creates a new instance in questions of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Question` object.)
         * </em>
         */
        R.questions.create = function() {
          var TargetResource = $injector.get("Question");
          var action = TargetResource["::create::endorsement::questions"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Endorsement.questions#createMany
         * @methodOf lbServices.Endorsement.questions
         *
         * @description
         *
         * Creates a new instance in questions of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Question` object.)
         * </em>
         */
        R.questions.createMany = function() {
          var TargetResource = $injector.get("Question");
          var action = TargetResource["::createMany::endorsement::questions"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Endorsement.questions#destroyAll
         * @methodOf lbServices.Endorsement.questions
         *
         * @description
         *
         * Deletes all questions of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.questions.destroyAll = function() {
          var TargetResource = $injector.get("Question");
          var action = TargetResource["::delete::endorsement::questions"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Endorsement.questions#destroyById
         * @methodOf lbServices.Endorsement.questions
         *
         * @description
         *
         * Delete a related item by id for questions.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for questions
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.questions.destroyById = function() {
          var TargetResource = $injector.get("Question");
          var action = TargetResource["::destroyById::endorsement::questions"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Endorsement.questions#findById
         * @methodOf lbServices.Endorsement.questions
         *
         * @description
         *
         * Find a related item by id for questions.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for questions
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Question` object.)
         * </em>
         */
        R.questions.findById = function() {
          var TargetResource = $injector.get("Question");
          var action = TargetResource["::findById::endorsement::questions"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Endorsement.questions#updateById
         * @methodOf lbServices.Endorsement.questions
         *
         * @description
         *
         * Update a related item by id for questions.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for questions
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Question` object.)
         * </em>
         */
        R.questions.updateById = function() {
          var TargetResource = $injector.get("Question");
          var action = TargetResource["::updateById::endorsement::questions"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Endorsement.endorsementSkills
     * @header lbServices.Endorsement.endorsementSkills
     * @object
     * @description
     *
     * The object `Endorsement.endorsementSkills` groups methods
     * manipulating `EndorsementSkill` instances related to `Endorsement`.
     *
     * Call {@link lbServices.Endorsement#endorsementSkills Endorsement.endorsementSkills()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.Endorsement#endorsementSkills
         * @methodOf lbServices.Endorsement
         *
         * @description
         *
         * Queries endorsementSkills of endorsement.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsementSkill` object.)
         * </em>
         */
        R.endorsementSkills = function() {
          var TargetResource = $injector.get("EndorsementSkill");
          var action = TargetResource["::get::endorsement::endorsementSkills"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Endorsement.endorsementSkills#count
         * @methodOf lbServices.Endorsement.endorsementSkills
         *
         * @description
         *
         * Counts endorsementSkills of endorsement.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.endorsementSkills.count = function() {
          var TargetResource = $injector.get("EndorsementSkill");
          var action = TargetResource["::count::endorsement::endorsementSkills"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Endorsement.endorsementSkills#create
         * @methodOf lbServices.Endorsement.endorsementSkills
         *
         * @description
         *
         * Creates a new instance in endorsementSkills of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsementSkill` object.)
         * </em>
         */
        R.endorsementSkills.create = function() {
          var TargetResource = $injector.get("EndorsementSkill");
          var action = TargetResource["::create::endorsement::endorsementSkills"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Endorsement.endorsementSkills#createMany
         * @methodOf lbServices.Endorsement.endorsementSkills
         *
         * @description
         *
         * Creates a new instance in endorsementSkills of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsementSkill` object.)
         * </em>
         */
        R.endorsementSkills.createMany = function() {
          var TargetResource = $injector.get("EndorsementSkill");
          var action = TargetResource["::createMany::endorsement::endorsementSkills"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Endorsement.endorsementSkills#destroyAll
         * @methodOf lbServices.Endorsement.endorsementSkills
         *
         * @description
         *
         * Deletes all endorsementSkills of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.endorsementSkills.destroyAll = function() {
          var TargetResource = $injector.get("EndorsementSkill");
          var action = TargetResource["::delete::endorsement::endorsementSkills"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Endorsement.endorsementSkills#destroyById
         * @methodOf lbServices.Endorsement.endorsementSkills
         *
         * @description
         *
         * Delete a related item by id for endorsementSkills.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for endorsementSkills
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.endorsementSkills.destroyById = function() {
          var TargetResource = $injector.get("EndorsementSkill");
          var action = TargetResource["::destroyById::endorsement::endorsementSkills"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Endorsement.endorsementSkills#findById
         * @methodOf lbServices.Endorsement.endorsementSkills
         *
         * @description
         *
         * Find a related item by id for endorsementSkills.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for endorsementSkills
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsementSkill` object.)
         * </em>
         */
        R.endorsementSkills.findById = function() {
          var TargetResource = $injector.get("EndorsementSkill");
          var action = TargetResource["::findById::endorsement::endorsementSkills"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Endorsement.endorsementSkills#updateById
         * @methodOf lbServices.Endorsement.endorsementSkills
         *
         * @description
         *
         * Update a related item by id for endorsementSkills.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for endorsementSkills
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsementSkill` object.)
         * </em>
         */
        R.endorsementSkills.updateById = function() {
          var TargetResource = $injector.get("EndorsementSkill");
          var action = TargetResource["::updateById::endorsement::endorsementSkills"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Endorsement.hrFeedbacks
     * @header lbServices.Endorsement.hrFeedbacks
     * @object
     * @description
     *
     * The object `Endorsement.hrFeedbacks` groups methods
     * manipulating `HrFeedback` instances related to `Endorsement`.
     *
     * Call {@link lbServices.Endorsement#hrFeedbacks Endorsement.hrFeedbacks()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.Endorsement#hrFeedbacks
         * @methodOf lbServices.Endorsement
         *
         * @description
         *
         * Queries hrFeedbacks of endorsement.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `HrFeedback` object.)
         * </em>
         */
        R.hrFeedbacks = function() {
          var TargetResource = $injector.get("HrFeedback");
          var action = TargetResource["::get::endorsement::hrFeedbacks"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Endorsement.hrFeedbacks#count
         * @methodOf lbServices.Endorsement.hrFeedbacks
         *
         * @description
         *
         * Counts hrFeedbacks of endorsement.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.hrFeedbacks.count = function() {
          var TargetResource = $injector.get("HrFeedback");
          var action = TargetResource["::count::endorsement::hrFeedbacks"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Endorsement.hrFeedbacks#create
         * @methodOf lbServices.Endorsement.hrFeedbacks
         *
         * @description
         *
         * Creates a new instance in hrFeedbacks of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `HrFeedback` object.)
         * </em>
         */
        R.hrFeedbacks.create = function() {
          var TargetResource = $injector.get("HrFeedback");
          var action = TargetResource["::create::endorsement::hrFeedbacks"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Endorsement.hrFeedbacks#createMany
         * @methodOf lbServices.Endorsement.hrFeedbacks
         *
         * @description
         *
         * Creates a new instance in hrFeedbacks of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `HrFeedback` object.)
         * </em>
         */
        R.hrFeedbacks.createMany = function() {
          var TargetResource = $injector.get("HrFeedback");
          var action = TargetResource["::createMany::endorsement::hrFeedbacks"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Endorsement.hrFeedbacks#destroyAll
         * @methodOf lbServices.Endorsement.hrFeedbacks
         *
         * @description
         *
         * Deletes all hrFeedbacks of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.hrFeedbacks.destroyAll = function() {
          var TargetResource = $injector.get("HrFeedback");
          var action = TargetResource["::delete::endorsement::hrFeedbacks"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Endorsement.hrFeedbacks#destroyById
         * @methodOf lbServices.Endorsement.hrFeedbacks
         *
         * @description
         *
         * Delete a related item by id for hrFeedbacks.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for hrFeedbacks
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.hrFeedbacks.destroyById = function() {
          var TargetResource = $injector.get("HrFeedback");
          var action = TargetResource["::destroyById::endorsement::hrFeedbacks"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Endorsement.hrFeedbacks#findById
         * @methodOf lbServices.Endorsement.hrFeedbacks
         *
         * @description
         *
         * Find a related item by id for hrFeedbacks.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for hrFeedbacks
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `HrFeedback` object.)
         * </em>
         */
        R.hrFeedbacks.findById = function() {
          var TargetResource = $injector.get("HrFeedback");
          var action = TargetResource["::findById::endorsement::hrFeedbacks"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Endorsement.hrFeedbacks#updateById
         * @methodOf lbServices.Endorsement.hrFeedbacks
         *
         * @description
         *
         * Update a related item by id for hrFeedbacks.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for hrFeedbacks
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `HrFeedback` object.)
         * </em>
         */
        R.hrFeedbacks.updateById = function() {
          var TargetResource = $injector.get("HrFeedback");
          var action = TargetResource["::updateById::endorsement::hrFeedbacks"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Endorsement.endorsets
     * @header lbServices.Endorsement.endorsets
     * @object
     * @description
     *
     * The object `Endorsement.endorsets` groups methods
     * manipulating `Endorset` instances related to `Endorsement`.
     *
     * Call {@link lbServices.Endorsement#endorsets Endorsement.endorsets()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.Endorsement#endorsets
         * @methodOf lbServices.Endorsement
         *
         * @description
         *
         * Queries endorsets of endorsement.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Endorset` object.)
         * </em>
         */
        R.endorsets = function() {
          var TargetResource = $injector.get("Endorset");
          var action = TargetResource["::get::endorsement::endorsets"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Endorsement.endorsets#count
         * @methodOf lbServices.Endorsement.endorsets
         *
         * @description
         *
         * Counts endorsets of endorsement.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.endorsets.count = function() {
          var TargetResource = $injector.get("Endorset");
          var action = TargetResource["::count::endorsement::endorsets"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Endorsement.endorsets#create
         * @methodOf lbServices.Endorsement.endorsets
         *
         * @description
         *
         * Creates a new instance in endorsets of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Endorset` object.)
         * </em>
         */
        R.endorsets.create = function() {
          var TargetResource = $injector.get("Endorset");
          var action = TargetResource["::create::endorsement::endorsets"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Endorsement.endorsets#createMany
         * @methodOf lbServices.Endorsement.endorsets
         *
         * @description
         *
         * Creates a new instance in endorsets of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Endorset` object.)
         * </em>
         */
        R.endorsets.createMany = function() {
          var TargetResource = $injector.get("Endorset");
          var action = TargetResource["::createMany::endorsement::endorsets"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Endorsement.endorsets#destroyAll
         * @methodOf lbServices.Endorsement.endorsets
         *
         * @description
         *
         * Deletes all endorsets of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.endorsets.destroyAll = function() {
          var TargetResource = $injector.get("Endorset");
          var action = TargetResource["::delete::endorsement::endorsets"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Endorsement.endorsets#destroyById
         * @methodOf lbServices.Endorsement.endorsets
         *
         * @description
         *
         * Delete a related item by id for endorsets.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for endorsets
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.endorsets.destroyById = function() {
          var TargetResource = $injector.get("Endorset");
          var action = TargetResource["::destroyById::endorsement::endorsets"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Endorsement.endorsets#findById
         * @methodOf lbServices.Endorsement.endorsets
         *
         * @description
         *
         * Find a related item by id for endorsets.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for endorsets
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Endorset` object.)
         * </em>
         */
        R.endorsets.findById = function() {
          var TargetResource = $injector.get("Endorset");
          var action = TargetResource["::findById::endorsement::endorsets"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Endorsement.endorsets#updateById
         * @methodOf lbServices.Endorsement.endorsets
         *
         * @description
         *
         * Update a related item by id for endorsets.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for endorsets
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Endorset` object.)
         * </em>
         */
        R.endorsets.updateById = function() {
          var TargetResource = $injector.get("Endorset");
          var action = TargetResource["::updateById::endorsement::endorsets"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Endorsement.endorserEndorsements
     * @header lbServices.Endorsement.endorserEndorsements
     * @object
     * @description
     *
     * The object `Endorsement.endorserEndorsements` groups methods
     * manipulating `EndorserEndorsement` instances related to `Endorsement`.
     *
     * Call {@link lbServices.Endorsement#endorserEndorsements Endorsement.endorserEndorsements()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.Endorsement#endorserEndorsements
         * @methodOf lbServices.Endorsement
         *
         * @description
         *
         * Queries endorserEndorsements of endorsement.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorserEndorsement` object.)
         * </em>
         */
        R.endorserEndorsements = function() {
          var TargetResource = $injector.get("EndorserEndorsement");
          var action = TargetResource["::get::endorsement::endorserEndorsements"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Endorsement.endorserEndorsements#count
         * @methodOf lbServices.Endorsement.endorserEndorsements
         *
         * @description
         *
         * Counts endorserEndorsements of endorsement.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.endorserEndorsements.count = function() {
          var TargetResource = $injector.get("EndorserEndorsement");
          var action = TargetResource["::count::endorsement::endorserEndorsements"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Endorsement.endorserEndorsements#create
         * @methodOf lbServices.Endorsement.endorserEndorsements
         *
         * @description
         *
         * Creates a new instance in endorserEndorsements of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorserEndorsement` object.)
         * </em>
         */
        R.endorserEndorsements.create = function() {
          var TargetResource = $injector.get("EndorserEndorsement");
          var action = TargetResource["::create::endorsement::endorserEndorsements"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Endorsement.endorserEndorsements#createMany
         * @methodOf lbServices.Endorsement.endorserEndorsements
         *
         * @description
         *
         * Creates a new instance in endorserEndorsements of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorserEndorsement` object.)
         * </em>
         */
        R.endorserEndorsements.createMany = function() {
          var TargetResource = $injector.get("EndorserEndorsement");
          var action = TargetResource["::createMany::endorsement::endorserEndorsements"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Endorsement.endorserEndorsements#destroyAll
         * @methodOf lbServices.Endorsement.endorserEndorsements
         *
         * @description
         *
         * Deletes all endorserEndorsements of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.endorserEndorsements.destroyAll = function() {
          var TargetResource = $injector.get("EndorserEndorsement");
          var action = TargetResource["::delete::endorsement::endorserEndorsements"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Endorsement.endorserEndorsements#destroyById
         * @methodOf lbServices.Endorsement.endorserEndorsements
         *
         * @description
         *
         * Delete a related item by id for endorserEndorsements.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for endorserEndorsements
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.endorserEndorsements.destroyById = function() {
          var TargetResource = $injector.get("EndorserEndorsement");
          var action = TargetResource["::destroyById::endorsement::endorserEndorsements"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Endorsement.endorserEndorsements#findById
         * @methodOf lbServices.Endorsement.endorserEndorsements
         *
         * @description
         *
         * Find a related item by id for endorserEndorsements.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for endorserEndorsements
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorserEndorsement` object.)
         * </em>
         */
        R.endorserEndorsements.findById = function() {
          var TargetResource = $injector.get("EndorserEndorsement");
          var action = TargetResource["::findById::endorsement::endorserEndorsements"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Endorsement.endorserEndorsements#updateById
         * @methodOf lbServices.Endorsement.endorserEndorsements
         *
         * @description
         *
         * Update a related item by id for endorserEndorsements.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for endorserEndorsements
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorserEndorsement` object.)
         * </em>
         */
        R.endorserEndorsements.updateById = function() {
          var TargetResource = $injector.get("EndorserEndorsement");
          var action = TargetResource["::updateById::endorsement::endorserEndorsements"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.EndorsementCompany
 * @header lbServices.EndorsementCompany
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `EndorsementCompany` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "EndorsementCompany",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/endorsementCompanies/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use EndorsementCompany.endorsement() instead.
        "prototype$__get__endorsement": {
          url: urlBase + "/endorsementCompanies/:id/endorsement",
          method: "GET"
        },

        // INTERNAL. Use EndorsementCompany.endorsementProjects.findById() instead.
        "prototype$__findById__endorsementProjects": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/endorsementCompanies/:id/endorsementProjects/:fk",
          method: "GET"
        },

        // INTERNAL. Use EndorsementCompany.endorsementProjects.destroyById() instead.
        "prototype$__destroyById__endorsementProjects": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/endorsementCompanies/:id/endorsementProjects/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use EndorsementCompany.endorsementProjects.updateById() instead.
        "prototype$__updateById__endorsementProjects": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/endorsementCompanies/:id/endorsementProjects/:fk",
          method: "PUT"
        },

        // INTERNAL. Use EndorsementCompany.endorsementProjects() instead.
        "prototype$__get__endorsementProjects": {
          isArray: true,
          url: urlBase + "/endorsementCompanies/:id/endorsementProjects",
          method: "GET"
        },

        // INTERNAL. Use EndorsementCompany.endorsementProjects.create() instead.
        "prototype$__create__endorsementProjects": {
          url: urlBase + "/endorsementCompanies/:id/endorsementProjects",
          method: "POST"
        },

        // INTERNAL. Use EndorsementCompany.endorsementProjects.destroyAll() instead.
        "prototype$__delete__endorsementProjects": {
          url: urlBase + "/endorsementCompanies/:id/endorsementProjects",
          method: "DELETE"
        },

        // INTERNAL. Use EndorsementCompany.endorsementProjects.count() instead.
        "prototype$__count__endorsementProjects": {
          url: urlBase + "/endorsementCompanies/:id/endorsementProjects/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.EndorsementCompany#create
         * @methodOf lbServices.EndorsementCompany
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsementCompany` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/endorsementCompanies",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.EndorsementCompany#createMany
         * @methodOf lbServices.EndorsementCompany
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsementCompany` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/endorsementCompanies",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.EndorsementCompany#upsert
         * @methodOf lbServices.EndorsementCompany
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsementCompany` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/endorsementCompanies",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.EndorsementCompany#exists
         * @methodOf lbServices.EndorsementCompany
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/endorsementCompanies/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.EndorsementCompany#findById
         * @methodOf lbServices.EndorsementCompany
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsementCompany` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/endorsementCompanies/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.EndorsementCompany#find
         * @methodOf lbServices.EndorsementCompany
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsementCompany` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/endorsementCompanies",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.EndorsementCompany#findOne
         * @methodOf lbServices.EndorsementCompany
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsementCompany` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/endorsementCompanies/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.EndorsementCompany#updateAll
         * @methodOf lbServices.EndorsementCompany
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "updateAll": {
          url: urlBase + "/endorsementCompanies/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.EndorsementCompany#deleteById
         * @methodOf lbServices.EndorsementCompany
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "deleteById": {
          url: urlBase + "/endorsementCompanies/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.EndorsementCompany#count
         * @methodOf lbServices.EndorsementCompany
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/endorsementCompanies/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.EndorsementCompany#prototype$updateAttributes
         * @methodOf lbServices.EndorsementCompany
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsementCompany` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/endorsementCompanies/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.EndorsementCompany#createChangeStream
         * @methodOf lbServices.EndorsementCompany
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/endorsementCompanies/change-stream",
          method: "POST"
        },

        // INTERNAL. Use Endorsement.endorsementCompanies.findById() instead.
        "::findById::endorsement::endorsementCompanies": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/endorsements/:id/endorsementCompanies/:fk",
          method: "GET"
        },

        // INTERNAL. Use Endorsement.endorsementCompanies.destroyById() instead.
        "::destroyById::endorsement::endorsementCompanies": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/endorsements/:id/endorsementCompanies/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Endorsement.endorsementCompanies.updateById() instead.
        "::updateById::endorsement::endorsementCompanies": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/endorsements/:id/endorsementCompanies/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Endorsement.endorsementCompanies() instead.
        "::get::endorsement::endorsementCompanies": {
          isArray: true,
          url: urlBase + "/endorsements/:id/endorsementCompanies",
          method: "GET"
        },

        // INTERNAL. Use Endorsement.endorsementCompanies.create() instead.
        "::create::endorsement::endorsementCompanies": {
          url: urlBase + "/endorsements/:id/endorsementCompanies",
          method: "POST"
        },

        // INTERNAL. Use Endorsement.endorsementCompanies.createMany() instead.
        "::createMany::endorsement::endorsementCompanies": {
          isArray: true,
          url: urlBase + "/endorsements/:id/endorsementCompanies",
          method: "POST"
        },

        // INTERNAL. Use Endorsement.endorsementCompanies.destroyAll() instead.
        "::delete::endorsement::endorsementCompanies": {
          url: urlBase + "/endorsements/:id/endorsementCompanies",
          method: "DELETE"
        },

        // INTERNAL. Use Endorsement.endorsementCompanies.count() instead.
        "::count::endorsement::endorsementCompanies": {
          url: urlBase + "/endorsements/:id/endorsementCompanies/count",
          method: "GET"
        },

        // INTERNAL. Use EndorsementProject.endorsementCompany() instead.
        "::get::endorsementProject::endorsementCompany": {
          url: urlBase + "/endorsementProjects/:id/endorsementCompany",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.EndorsementCompany#updateOrCreate
         * @methodOf lbServices.EndorsementCompany
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsementCompany` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.EndorsementCompany#update
         * @methodOf lbServices.EndorsementCompany
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.EndorsementCompany#destroyById
         * @methodOf lbServices.EndorsementCompany
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.EndorsementCompany#removeById
         * @methodOf lbServices.EndorsementCompany
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.EndorsementCompany#modelName
    * @propertyOf lbServices.EndorsementCompany
    * @description
    * The name of the model represented by this $resource,
    * i.e. `EndorsementCompany`.
    */
    R.modelName = "EndorsementCompany";


        /**
         * @ngdoc method
         * @name lbServices.EndorsementCompany#endorsement
         * @methodOf lbServices.EndorsementCompany
         *
         * @description
         *
         * Fetches belongsTo relation endorsement.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Endorsement` object.)
         * </em>
         */
        R.endorsement = function() {
          var TargetResource = $injector.get("Endorsement");
          var action = TargetResource["::get::endorsementCompany::endorsement"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.EndorsementCompany.endorsementProjects
     * @header lbServices.EndorsementCompany.endorsementProjects
     * @object
     * @description
     *
     * The object `EndorsementCompany.endorsementProjects` groups methods
     * manipulating `EndorsementProject` instances related to `EndorsementCompany`.
     *
     * Call {@link lbServices.EndorsementCompany#endorsementProjects EndorsementCompany.endorsementProjects()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.EndorsementCompany#endorsementProjects
         * @methodOf lbServices.EndorsementCompany
         *
         * @description
         *
         * Queries endorsementProjects of endorsementCompany.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsementProject` object.)
         * </em>
         */
        R.endorsementProjects = function() {
          var TargetResource = $injector.get("EndorsementProject");
          var action = TargetResource["::get::endorsementCompany::endorsementProjects"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.EndorsementCompany.endorsementProjects#count
         * @methodOf lbServices.EndorsementCompany.endorsementProjects
         *
         * @description
         *
         * Counts endorsementProjects of endorsementCompany.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.endorsementProjects.count = function() {
          var TargetResource = $injector.get("EndorsementProject");
          var action = TargetResource["::count::endorsementCompany::endorsementProjects"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.EndorsementCompany.endorsementProjects#create
         * @methodOf lbServices.EndorsementCompany.endorsementProjects
         *
         * @description
         *
         * Creates a new instance in endorsementProjects of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsementProject` object.)
         * </em>
         */
        R.endorsementProjects.create = function() {
          var TargetResource = $injector.get("EndorsementProject");
          var action = TargetResource["::create::endorsementCompany::endorsementProjects"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.EndorsementCompany.endorsementProjects#createMany
         * @methodOf lbServices.EndorsementCompany.endorsementProjects
         *
         * @description
         *
         * Creates a new instance in endorsementProjects of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsementProject` object.)
         * </em>
         */
        R.endorsementProjects.createMany = function() {
          var TargetResource = $injector.get("EndorsementProject");
          var action = TargetResource["::createMany::endorsementCompany::endorsementProjects"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.EndorsementCompany.endorsementProjects#destroyAll
         * @methodOf lbServices.EndorsementCompany.endorsementProjects
         *
         * @description
         *
         * Deletes all endorsementProjects of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.endorsementProjects.destroyAll = function() {
          var TargetResource = $injector.get("EndorsementProject");
          var action = TargetResource["::delete::endorsementCompany::endorsementProjects"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.EndorsementCompany.endorsementProjects#destroyById
         * @methodOf lbServices.EndorsementCompany.endorsementProjects
         *
         * @description
         *
         * Delete a related item by id for endorsementProjects.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for endorsementProjects
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.endorsementProjects.destroyById = function() {
          var TargetResource = $injector.get("EndorsementProject");
          var action = TargetResource["::destroyById::endorsementCompany::endorsementProjects"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.EndorsementCompany.endorsementProjects#findById
         * @methodOf lbServices.EndorsementCompany.endorsementProjects
         *
         * @description
         *
         * Find a related item by id for endorsementProjects.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for endorsementProjects
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsementProject` object.)
         * </em>
         */
        R.endorsementProjects.findById = function() {
          var TargetResource = $injector.get("EndorsementProject");
          var action = TargetResource["::findById::endorsementCompany::endorsementProjects"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.EndorsementCompany.endorsementProjects#updateById
         * @methodOf lbServices.EndorsementCompany.endorsementProjects
         *
         * @description
         *
         * Update a related item by id for endorsementProjects.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for endorsementProjects
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsementProject` object.)
         * </em>
         */
        R.endorsementProjects.updateById = function() {
          var TargetResource = $injector.get("EndorsementProject");
          var action = TargetResource["::updateById::endorsementCompany::endorsementProjects"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.EndorsementProject
 * @header lbServices.EndorsementProject
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `EndorsementProject` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "EndorsementProject",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/endorsementProjects/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use EndorsementProject.endorsementCompany() instead.
        "prototype$__get__endorsementCompany": {
          url: urlBase + "/endorsementProjects/:id/endorsementCompany",
          method: "GET"
        },

        // INTERNAL. Use EndorsementProject.endorsementSkills.findById() instead.
        "prototype$__findById__endorsementSkills": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/endorsementProjects/:id/endorsementSkills/:fk",
          method: "GET"
        },

        // INTERNAL. Use EndorsementProject.endorsementSkills.destroyById() instead.
        "prototype$__destroyById__endorsementSkills": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/endorsementProjects/:id/endorsementSkills/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use EndorsementProject.endorsementSkills.updateById() instead.
        "prototype$__updateById__endorsementSkills": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/endorsementProjects/:id/endorsementSkills/:fk",
          method: "PUT"
        },

        // INTERNAL. Use EndorsementProject.endorsementSkills() instead.
        "prototype$__get__endorsementSkills": {
          isArray: true,
          url: urlBase + "/endorsementProjects/:id/endorsementSkills",
          method: "GET"
        },

        // INTERNAL. Use EndorsementProject.endorsementSkills.create() instead.
        "prototype$__create__endorsementSkills": {
          url: urlBase + "/endorsementProjects/:id/endorsementSkills",
          method: "POST"
        },

        // INTERNAL. Use EndorsementProject.endorsementSkills.destroyAll() instead.
        "prototype$__delete__endorsementSkills": {
          url: urlBase + "/endorsementProjects/:id/endorsementSkills",
          method: "DELETE"
        },

        // INTERNAL. Use EndorsementProject.endorsementSkills.count() instead.
        "prototype$__count__endorsementSkills": {
          url: urlBase + "/endorsementProjects/:id/endorsementSkills/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.EndorsementProject#create
         * @methodOf lbServices.EndorsementProject
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsementProject` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/endorsementProjects",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.EndorsementProject#createMany
         * @methodOf lbServices.EndorsementProject
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsementProject` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/endorsementProjects",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.EndorsementProject#upsert
         * @methodOf lbServices.EndorsementProject
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsementProject` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/endorsementProjects",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.EndorsementProject#exists
         * @methodOf lbServices.EndorsementProject
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/endorsementProjects/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.EndorsementProject#findById
         * @methodOf lbServices.EndorsementProject
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsementProject` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/endorsementProjects/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.EndorsementProject#find
         * @methodOf lbServices.EndorsementProject
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsementProject` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/endorsementProjects",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.EndorsementProject#findOne
         * @methodOf lbServices.EndorsementProject
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsementProject` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/endorsementProjects/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.EndorsementProject#updateAll
         * @methodOf lbServices.EndorsementProject
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "updateAll": {
          url: urlBase + "/endorsementProjects/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.EndorsementProject#deleteById
         * @methodOf lbServices.EndorsementProject
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "deleteById": {
          url: urlBase + "/endorsementProjects/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.EndorsementProject#count
         * @methodOf lbServices.EndorsementProject
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/endorsementProjects/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.EndorsementProject#prototype$updateAttributes
         * @methodOf lbServices.EndorsementProject
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsementProject` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/endorsementProjects/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.EndorsementProject#createChangeStream
         * @methodOf lbServices.EndorsementProject
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/endorsementProjects/change-stream",
          method: "POST"
        },

        // INTERNAL. Use EndorsementCompany.endorsementProjects.findById() instead.
        "::findById::endorsementCompany::endorsementProjects": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/endorsementCompanies/:id/endorsementProjects/:fk",
          method: "GET"
        },

        // INTERNAL. Use EndorsementCompany.endorsementProjects.destroyById() instead.
        "::destroyById::endorsementCompany::endorsementProjects": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/endorsementCompanies/:id/endorsementProjects/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use EndorsementCompany.endorsementProjects.updateById() instead.
        "::updateById::endorsementCompany::endorsementProjects": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/endorsementCompanies/:id/endorsementProjects/:fk",
          method: "PUT"
        },

        // INTERNAL. Use EndorsementCompany.endorsementProjects() instead.
        "::get::endorsementCompany::endorsementProjects": {
          isArray: true,
          url: urlBase + "/endorsementCompanies/:id/endorsementProjects",
          method: "GET"
        },

        // INTERNAL. Use EndorsementCompany.endorsementProjects.create() instead.
        "::create::endorsementCompany::endorsementProjects": {
          url: urlBase + "/endorsementCompanies/:id/endorsementProjects",
          method: "POST"
        },

        // INTERNAL. Use EndorsementCompany.endorsementProjects.createMany() instead.
        "::createMany::endorsementCompany::endorsementProjects": {
          isArray: true,
          url: urlBase + "/endorsementCompanies/:id/endorsementProjects",
          method: "POST"
        },

        // INTERNAL. Use EndorsementCompany.endorsementProjects.destroyAll() instead.
        "::delete::endorsementCompany::endorsementProjects": {
          url: urlBase + "/endorsementCompanies/:id/endorsementProjects",
          method: "DELETE"
        },

        // INTERNAL. Use EndorsementCompany.endorsementProjects.count() instead.
        "::count::endorsementCompany::endorsementProjects": {
          url: urlBase + "/endorsementCompanies/:id/endorsementProjects/count",
          method: "GET"
        },

        // INTERNAL. Use EndorsementSkill.endorsementProject() instead.
        "::get::endorsementSkill::endorsementProject": {
          url: urlBase + "/endorsementSkills/:id/endorsementProject",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.EndorsementProject#updateOrCreate
         * @methodOf lbServices.EndorsementProject
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsementProject` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.EndorsementProject#update
         * @methodOf lbServices.EndorsementProject
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.EndorsementProject#destroyById
         * @methodOf lbServices.EndorsementProject
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.EndorsementProject#removeById
         * @methodOf lbServices.EndorsementProject
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.EndorsementProject#modelName
    * @propertyOf lbServices.EndorsementProject
    * @description
    * The name of the model represented by this $resource,
    * i.e. `EndorsementProject`.
    */
    R.modelName = "EndorsementProject";


        /**
         * @ngdoc method
         * @name lbServices.EndorsementProject#endorsementCompany
         * @methodOf lbServices.EndorsementProject
         *
         * @description
         *
         * Fetches belongsTo relation endorsementCompany.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsementCompany` object.)
         * </em>
         */
        R.endorsementCompany = function() {
          var TargetResource = $injector.get("EndorsementCompany");
          var action = TargetResource["::get::endorsementProject::endorsementCompany"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.EndorsementProject.endorsementSkills
     * @header lbServices.EndorsementProject.endorsementSkills
     * @object
     * @description
     *
     * The object `EndorsementProject.endorsementSkills` groups methods
     * manipulating `EndorsementSkill` instances related to `EndorsementProject`.
     *
     * Call {@link lbServices.EndorsementProject#endorsementSkills EndorsementProject.endorsementSkills()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.EndorsementProject#endorsementSkills
         * @methodOf lbServices.EndorsementProject
         *
         * @description
         *
         * Queries endorsementSkills of endorsementProject.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsementSkill` object.)
         * </em>
         */
        R.endorsementSkills = function() {
          var TargetResource = $injector.get("EndorsementSkill");
          var action = TargetResource["::get::endorsementProject::endorsementSkills"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.EndorsementProject.endorsementSkills#count
         * @methodOf lbServices.EndorsementProject.endorsementSkills
         *
         * @description
         *
         * Counts endorsementSkills of endorsementProject.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.endorsementSkills.count = function() {
          var TargetResource = $injector.get("EndorsementSkill");
          var action = TargetResource["::count::endorsementProject::endorsementSkills"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.EndorsementProject.endorsementSkills#create
         * @methodOf lbServices.EndorsementProject.endorsementSkills
         *
         * @description
         *
         * Creates a new instance in endorsementSkills of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsementSkill` object.)
         * </em>
         */
        R.endorsementSkills.create = function() {
          var TargetResource = $injector.get("EndorsementSkill");
          var action = TargetResource["::create::endorsementProject::endorsementSkills"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.EndorsementProject.endorsementSkills#createMany
         * @methodOf lbServices.EndorsementProject.endorsementSkills
         *
         * @description
         *
         * Creates a new instance in endorsementSkills of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsementSkill` object.)
         * </em>
         */
        R.endorsementSkills.createMany = function() {
          var TargetResource = $injector.get("EndorsementSkill");
          var action = TargetResource["::createMany::endorsementProject::endorsementSkills"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.EndorsementProject.endorsementSkills#destroyAll
         * @methodOf lbServices.EndorsementProject.endorsementSkills
         *
         * @description
         *
         * Deletes all endorsementSkills of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.endorsementSkills.destroyAll = function() {
          var TargetResource = $injector.get("EndorsementSkill");
          var action = TargetResource["::delete::endorsementProject::endorsementSkills"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.EndorsementProject.endorsementSkills#destroyById
         * @methodOf lbServices.EndorsementProject.endorsementSkills
         *
         * @description
         *
         * Delete a related item by id for endorsementSkills.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for endorsementSkills
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.endorsementSkills.destroyById = function() {
          var TargetResource = $injector.get("EndorsementSkill");
          var action = TargetResource["::destroyById::endorsementProject::endorsementSkills"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.EndorsementProject.endorsementSkills#findById
         * @methodOf lbServices.EndorsementProject.endorsementSkills
         *
         * @description
         *
         * Find a related item by id for endorsementSkills.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for endorsementSkills
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsementSkill` object.)
         * </em>
         */
        R.endorsementSkills.findById = function() {
          var TargetResource = $injector.get("EndorsementSkill");
          var action = TargetResource["::findById::endorsementProject::endorsementSkills"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.EndorsementProject.endorsementSkills#updateById
         * @methodOf lbServices.EndorsementProject.endorsementSkills
         *
         * @description
         *
         * Update a related item by id for endorsementSkills.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for endorsementSkills
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsementSkill` object.)
         * </em>
         */
        R.endorsementSkills.updateById = function() {
          var TargetResource = $injector.get("EndorsementSkill");
          var action = TargetResource["::updateById::endorsementProject::endorsementSkills"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.Question
 * @header lbServices.Question
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Question` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "Question",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/questions/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use Question.hrDetail() instead.
        "prototype$__get__hrDetail": {
          url: urlBase + "/questions/:id/hrDetail",
          method: "GET"
        },

        // INTERNAL. Use Question.endorser() instead.
        "prototype$__get__endorser": {
          url: urlBase + "/questions/:id/endorser",
          method: "GET"
        },

        // INTERNAL. Use Question.reply() instead.
        "prototype$__get__reply": {
          url: urlBase + "/questions/:id/reply",
          method: "GET"
        },

        // INTERNAL. Use Question.endorsement() instead.
        "prototype$__get__endorsement": {
          url: urlBase + "/questions/:id/endorsement",
          method: "GET"
        },

        // INTERNAL. Use Question.parentQuestion() instead.
        "prototype$__get__parentQuestion": {
          url: urlBase + "/questions/:id/parentQuestion",
          method: "GET"
        },

        // INTERNAL. Use Question.questions.findById() instead.
        "prototype$__findById__questions": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/questions/:id/questions/:fk",
          method: "GET"
        },

        // INTERNAL. Use Question.questions.destroyById() instead.
        "prototype$__destroyById__questions": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/questions/:id/questions/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Question.questions.updateById() instead.
        "prototype$__updateById__questions": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/questions/:id/questions/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Question.endorserEndorsement() instead.
        "prototype$__get__endorserEndorsement": {
          url: urlBase + "/questions/:id/endorserEndorsement",
          method: "GET"
        },

        // INTERNAL. Use Question.questions() instead.
        "prototype$__get__questions": {
          isArray: true,
          url: urlBase + "/questions/:id/questions",
          method: "GET"
        },

        // INTERNAL. Use Question.questions.create() instead.
        "prototype$__create__questions": {
          url: urlBase + "/questions/:id/questions",
          method: "POST"
        },

        // INTERNAL. Use Question.questions.destroyAll() instead.
        "prototype$__delete__questions": {
          url: urlBase + "/questions/:id/questions",
          method: "DELETE"
        },

        // INTERNAL. Use Question.questions.count() instead.
        "prototype$__count__questions": {
          url: urlBase + "/questions/:id/questions/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Question#create
         * @methodOf lbServices.Question
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Question` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/questions",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Question#createMany
         * @methodOf lbServices.Question
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Question` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/questions",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Question#upsert
         * @methodOf lbServices.Question
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Question` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/questions",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Question#exists
         * @methodOf lbServices.Question
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/questions/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Question#findById
         * @methodOf lbServices.Question
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Question` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/questions/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Question#find
         * @methodOf lbServices.Question
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Question` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/questions",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Question#findOne
         * @methodOf lbServices.Question
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Question` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/questions/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Question#updateAll
         * @methodOf lbServices.Question
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "updateAll": {
          url: urlBase + "/questions/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Question#deleteById
         * @methodOf lbServices.Question
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "deleteById": {
          url: urlBase + "/questions/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Question#count
         * @methodOf lbServices.Question
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/questions/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Question#prototype$updateAttributes
         * @methodOf lbServices.Question
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Question` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/questions/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Question#createChangeStream
         * @methodOf lbServices.Question
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/questions/change-stream",
          method: "POST"
        },

        // INTERNAL. Use UserDetail.hrQuestions.findById() instead.
        "::findById::userDetail::hrQuestions": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/hrQuestions/:fk",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.hrQuestions.destroyById() instead.
        "::destroyById::userDetail::hrQuestions": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/hrQuestions/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use UserDetail.hrQuestions.updateById() instead.
        "::updateById::userDetail::hrQuestions": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/hrQuestions/:fk",
          method: "PUT"
        },

        // INTERNAL. Use UserDetail.endorserQuestions.findById() instead.
        "::findById::userDetail::endorserQuestions": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/endorserQuestions/:fk",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.endorserQuestions.destroyById() instead.
        "::destroyById::userDetail::endorserQuestions": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/endorserQuestions/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use UserDetail.endorserQuestions.updateById() instead.
        "::updateById::userDetail::endorserQuestions": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/endorserQuestions/:fk",
          method: "PUT"
        },

        // INTERNAL. Use UserDetail.hrQuestions() instead.
        "::get::userDetail::hrQuestions": {
          isArray: true,
          url: urlBase + "/userDetails/:id/hrQuestions",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.hrQuestions.create() instead.
        "::create::userDetail::hrQuestions": {
          url: urlBase + "/userDetails/:id/hrQuestions",
          method: "POST"
        },

        // INTERNAL. Use UserDetail.hrQuestions.createMany() instead.
        "::createMany::userDetail::hrQuestions": {
          isArray: true,
          url: urlBase + "/userDetails/:id/hrQuestions",
          method: "POST"
        },

        // INTERNAL. Use UserDetail.hrQuestions.destroyAll() instead.
        "::delete::userDetail::hrQuestions": {
          url: urlBase + "/userDetails/:id/hrQuestions",
          method: "DELETE"
        },

        // INTERNAL. Use UserDetail.hrQuestions.count() instead.
        "::count::userDetail::hrQuestions": {
          url: urlBase + "/userDetails/:id/hrQuestions/count",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.endorserQuestions() instead.
        "::get::userDetail::endorserQuestions": {
          isArray: true,
          url: urlBase + "/userDetails/:id/endorserQuestions",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.endorserQuestions.create() instead.
        "::create::userDetail::endorserQuestions": {
          url: urlBase + "/userDetails/:id/endorserQuestions",
          method: "POST"
        },

        // INTERNAL. Use UserDetail.endorserQuestions.createMany() instead.
        "::createMany::userDetail::endorserQuestions": {
          isArray: true,
          url: urlBase + "/userDetails/:id/endorserQuestions",
          method: "POST"
        },

        // INTERNAL. Use UserDetail.endorserQuestions.destroyAll() instead.
        "::delete::userDetail::endorserQuestions": {
          url: urlBase + "/userDetails/:id/endorserQuestions",
          method: "DELETE"
        },

        // INTERNAL. Use UserDetail.endorserQuestions.count() instead.
        "::count::userDetail::endorserQuestions": {
          url: urlBase + "/userDetails/:id/endorserQuestions/count",
          method: "GET"
        },

        // INTERNAL. Use Endorsement.questions.findById() instead.
        "::findById::endorsement::questions": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/endorsements/:id/questions/:fk",
          method: "GET"
        },

        // INTERNAL. Use Endorsement.questions.destroyById() instead.
        "::destroyById::endorsement::questions": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/endorsements/:id/questions/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Endorsement.questions.updateById() instead.
        "::updateById::endorsement::questions": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/endorsements/:id/questions/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Endorsement.questions() instead.
        "::get::endorsement::questions": {
          isArray: true,
          url: urlBase + "/endorsements/:id/questions",
          method: "GET"
        },

        // INTERNAL. Use Endorsement.questions.create() instead.
        "::create::endorsement::questions": {
          url: urlBase + "/endorsements/:id/questions",
          method: "POST"
        },

        // INTERNAL. Use Endorsement.questions.createMany() instead.
        "::createMany::endorsement::questions": {
          isArray: true,
          url: urlBase + "/endorsements/:id/questions",
          method: "POST"
        },

        // INTERNAL. Use Endorsement.questions.destroyAll() instead.
        "::delete::endorsement::questions": {
          url: urlBase + "/endorsements/:id/questions",
          method: "DELETE"
        },

        // INTERNAL. Use Endorsement.questions.count() instead.
        "::count::endorsement::questions": {
          url: urlBase + "/endorsements/:id/questions/count",
          method: "GET"
        },

        // INTERNAL. Use Question.reply() instead.
        "::get::question::reply": {
          url: urlBase + "/questions/:id/reply",
          method: "GET"
        },

        // INTERNAL. Use Question.parentQuestion() instead.
        "::get::question::parentQuestion": {
          url: urlBase + "/questions/:id/parentQuestion",
          method: "GET"
        },

        // INTERNAL. Use Question.questions.findById() instead.
        "::findById::question::questions": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/questions/:id/questions/:fk",
          method: "GET"
        },

        // INTERNAL. Use Question.questions.destroyById() instead.
        "::destroyById::question::questions": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/questions/:id/questions/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Question.questions.updateById() instead.
        "::updateById::question::questions": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/questions/:id/questions/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Question.questions() instead.
        "::get::question::questions": {
          isArray: true,
          url: urlBase + "/questions/:id/questions",
          method: "GET"
        },

        // INTERNAL. Use Question.questions.create() instead.
        "::create::question::questions": {
          url: urlBase + "/questions/:id/questions",
          method: "POST"
        },

        // INTERNAL. Use Question.questions.createMany() instead.
        "::createMany::question::questions": {
          isArray: true,
          url: urlBase + "/questions/:id/questions",
          method: "POST"
        },

        // INTERNAL. Use Question.questions.destroyAll() instead.
        "::delete::question::questions": {
          url: urlBase + "/questions/:id/questions",
          method: "DELETE"
        },

        // INTERNAL. Use Question.questions.count() instead.
        "::count::question::questions": {
          url: urlBase + "/questions/:id/questions/count",
          method: "GET"
        },

        // INTERNAL. Use EndorserEndorsement.questions.findById() instead.
        "::findById::endorserEndorsement::questions": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/endorserEndorsements/:id/questions/:fk",
          method: "GET"
        },

        // INTERNAL. Use EndorserEndorsement.questions.destroyById() instead.
        "::destroyById::endorserEndorsement::questions": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/endorserEndorsements/:id/questions/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use EndorserEndorsement.questions.updateById() instead.
        "::updateById::endorserEndorsement::questions": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/endorserEndorsements/:id/questions/:fk",
          method: "PUT"
        },

        // INTERNAL. Use EndorserEndorsement.questions() instead.
        "::get::endorserEndorsement::questions": {
          isArray: true,
          url: urlBase + "/endorserEndorsements/:id/questions",
          method: "GET"
        },

        // INTERNAL. Use EndorserEndorsement.questions.create() instead.
        "::create::endorserEndorsement::questions": {
          url: urlBase + "/endorserEndorsements/:id/questions",
          method: "POST"
        },

        // INTERNAL. Use EndorserEndorsement.questions.createMany() instead.
        "::createMany::endorserEndorsement::questions": {
          isArray: true,
          url: urlBase + "/endorserEndorsements/:id/questions",
          method: "POST"
        },

        // INTERNAL. Use EndorserEndorsement.questions.destroyAll() instead.
        "::delete::endorserEndorsement::questions": {
          url: urlBase + "/endorserEndorsements/:id/questions",
          method: "DELETE"
        },

        // INTERNAL. Use EndorserEndorsement.questions.count() instead.
        "::count::endorserEndorsement::questions": {
          url: urlBase + "/endorserEndorsements/:id/questions/count",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.Question#updateOrCreate
         * @methodOf lbServices.Question
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Question` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.Question#update
         * @methodOf lbServices.Question
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.Question#destroyById
         * @methodOf lbServices.Question
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.Question#removeById
         * @methodOf lbServices.Question
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.Question#modelName
    * @propertyOf lbServices.Question
    * @description
    * The name of the model represented by this $resource,
    * i.e. `Question`.
    */
    R.modelName = "Question";


        /**
         * @ngdoc method
         * @name lbServices.Question#hrDetail
         * @methodOf lbServices.Question
         *
         * @description
         *
         * Fetches belongsTo relation hrDetail.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserDetail` object.)
         * </em>
         */
        R.hrDetail = function() {
          var TargetResource = $injector.get("UserDetail");
          var action = TargetResource["::get::question::hrDetail"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Question#endorser
         * @methodOf lbServices.Question
         *
         * @description
         *
         * Fetches belongsTo relation endorser.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserDetail` object.)
         * </em>
         */
        R.endorser = function() {
          var TargetResource = $injector.get("UserDetail");
          var action = TargetResource["::get::question::endorser"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Question#reply
         * @methodOf lbServices.Question
         *
         * @description
         *
         * Fetches belongsTo relation reply.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Question` object.)
         * </em>
         */
        R.reply = function() {
          var TargetResource = $injector.get("Question");
          var action = TargetResource["::get::question::reply"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Question#endorsement
         * @methodOf lbServices.Question
         *
         * @description
         *
         * Fetches belongsTo relation endorsement.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Endorsement` object.)
         * </em>
         */
        R.endorsement = function() {
          var TargetResource = $injector.get("Endorsement");
          var action = TargetResource["::get::question::endorsement"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Question#parentQuestion
         * @methodOf lbServices.Question
         *
         * @description
         *
         * Fetches belongsTo relation parentQuestion.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Question` object.)
         * </em>
         */
        R.parentQuestion = function() {
          var TargetResource = $injector.get("Question");
          var action = TargetResource["::get::question::parentQuestion"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Question.questions
     * @header lbServices.Question.questions
     * @object
     * @description
     *
     * The object `Question.questions` groups methods
     * manipulating `Question` instances related to `Question`.
     *
     * Call {@link lbServices.Question#questions Question.questions()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.Question#questions
         * @methodOf lbServices.Question
         *
         * @description
         *
         * Queries questions of question.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Question` object.)
         * </em>
         */
        R.questions = function() {
          var TargetResource = $injector.get("Question");
          var action = TargetResource["::get::question::questions"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Question.questions#count
         * @methodOf lbServices.Question.questions
         *
         * @description
         *
         * Counts questions of question.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.questions.count = function() {
          var TargetResource = $injector.get("Question");
          var action = TargetResource["::count::question::questions"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Question.questions#create
         * @methodOf lbServices.Question.questions
         *
         * @description
         *
         * Creates a new instance in questions of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Question` object.)
         * </em>
         */
        R.questions.create = function() {
          var TargetResource = $injector.get("Question");
          var action = TargetResource["::create::question::questions"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Question.questions#createMany
         * @methodOf lbServices.Question.questions
         *
         * @description
         *
         * Creates a new instance in questions of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Question` object.)
         * </em>
         */
        R.questions.createMany = function() {
          var TargetResource = $injector.get("Question");
          var action = TargetResource["::createMany::question::questions"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Question.questions#destroyAll
         * @methodOf lbServices.Question.questions
         *
         * @description
         *
         * Deletes all questions of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.questions.destroyAll = function() {
          var TargetResource = $injector.get("Question");
          var action = TargetResource["::delete::question::questions"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Question.questions#destroyById
         * @methodOf lbServices.Question.questions
         *
         * @description
         *
         * Delete a related item by id for questions.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for questions
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.questions.destroyById = function() {
          var TargetResource = $injector.get("Question");
          var action = TargetResource["::destroyById::question::questions"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Question.questions#findById
         * @methodOf lbServices.Question.questions
         *
         * @description
         *
         * Find a related item by id for questions.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for questions
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Question` object.)
         * </em>
         */
        R.questions.findById = function() {
          var TargetResource = $injector.get("Question");
          var action = TargetResource["::findById::question::questions"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Question.questions#updateById
         * @methodOf lbServices.Question.questions
         *
         * @description
         *
         * Update a related item by id for questions.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for questions
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Question` object.)
         * </em>
         */
        R.questions.updateById = function() {
          var TargetResource = $injector.get("Question");
          var action = TargetResource["::updateById::question::questions"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Question#endorserEndorsement
         * @methodOf lbServices.Question
         *
         * @description
         *
         * Fetches belongsTo relation endorserEndorsement.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorserEndorsement` object.)
         * </em>
         */
        R.endorserEndorsement = function() {
          var TargetResource = $injector.get("EndorserEndorsement");
          var action = TargetResource["::get::question::endorserEndorsement"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.Company
 * @header lbServices.Company
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Company` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "Company",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/companies/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use Company.userDetail() instead.
        "prototype$__get__userDetail": {
          url: urlBase + "/companies/:id/userDetail",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Company#create
         * @methodOf lbServices.Company
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Company` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/companies",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Company#createMany
         * @methodOf lbServices.Company
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Company` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/companies",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Company#upsert
         * @methodOf lbServices.Company
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Company` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/companies",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Company#exists
         * @methodOf lbServices.Company
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/companies/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Company#findById
         * @methodOf lbServices.Company
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Company` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/companies/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Company#find
         * @methodOf lbServices.Company
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Company` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/companies",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Company#findOne
         * @methodOf lbServices.Company
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Company` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/companies/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Company#updateAll
         * @methodOf lbServices.Company
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "updateAll": {
          url: urlBase + "/companies/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Company#deleteById
         * @methodOf lbServices.Company
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "deleteById": {
          url: urlBase + "/companies/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Company#count
         * @methodOf lbServices.Company
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/companies/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Company#prototype$updateAttributes
         * @methodOf lbServices.Company
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Company` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/companies/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Company#createChangeStream
         * @methodOf lbServices.Company
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/companies/change-stream",
          method: "POST"
        },

        // INTERNAL. Use UserDetail.company() instead.
        "::get::userDetail::company": {
          url: urlBase + "/userDetails/:id/company",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.company.create() instead.
        "::create::userDetail::company": {
          url: urlBase + "/userDetails/:id/company",
          method: "POST"
        },

        // INTERNAL. Use UserDetail.company.createMany() instead.
        "::createMany::userDetail::company": {
          isArray: true,
          url: urlBase + "/userDetails/:id/company",
          method: "POST"
        },

        // INTERNAL. Use UserDetail.company.update() instead.
        "::update::userDetail::company": {
          url: urlBase + "/userDetails/:id/company",
          method: "PUT"
        },

        // INTERNAL. Use UserDetail.company.destroy() instead.
        "::destroy::userDetail::company": {
          url: urlBase + "/userDetails/:id/company",
          method: "DELETE"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.Company#updateOrCreate
         * @methodOf lbServices.Company
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Company` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.Company#update
         * @methodOf lbServices.Company
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.Company#destroyById
         * @methodOf lbServices.Company
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.Company#removeById
         * @methodOf lbServices.Company
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.Company#modelName
    * @propertyOf lbServices.Company
    * @description
    * The name of the model represented by this $resource,
    * i.e. `Company`.
    */
    R.modelName = "Company";


        /**
         * @ngdoc method
         * @name lbServices.Company#userDetail
         * @methodOf lbServices.Company
         *
         * @description
         *
         * Fetches belongsTo relation userDetail.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserDetail` object.)
         * </em>
         */
        R.userDetail = function() {
          var TargetResource = $injector.get("UserDetail");
          var action = TargetResource["::get::company::userDetail"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.Skill
 * @header lbServices.Skill
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Skill` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "Skill",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/skills/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use Skill.endorsementSkills.findById() instead.
        "prototype$__findById__endorsementSkills": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/skills/:id/endorsementSkills/:fk",
          method: "GET"
        },

        // INTERNAL. Use Skill.endorsementSkills.destroyById() instead.
        "prototype$__destroyById__endorsementSkills": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/skills/:id/endorsementSkills/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Skill.endorsementSkills.updateById() instead.
        "prototype$__updateById__endorsementSkills": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/skills/:id/endorsementSkills/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Skill.endorsetSkills.findById() instead.
        "prototype$__findById__endorsetSkills": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/skills/:id/endorsetSkills/:fk",
          method: "GET"
        },

        // INTERNAL. Use Skill.endorsetSkills.destroyById() instead.
        "prototype$__destroyById__endorsetSkills": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/skills/:id/endorsetSkills/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Skill.endorsetSkills.updateById() instead.
        "prototype$__updateById__endorsetSkills": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/skills/:id/endorsetSkills/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Skill.endorsementSkills() instead.
        "prototype$__get__endorsementSkills": {
          isArray: true,
          url: urlBase + "/skills/:id/endorsementSkills",
          method: "GET"
        },

        // INTERNAL. Use Skill.endorsementSkills.create() instead.
        "prototype$__create__endorsementSkills": {
          url: urlBase + "/skills/:id/endorsementSkills",
          method: "POST"
        },

        // INTERNAL. Use Skill.endorsementSkills.destroyAll() instead.
        "prototype$__delete__endorsementSkills": {
          url: urlBase + "/skills/:id/endorsementSkills",
          method: "DELETE"
        },

        // INTERNAL. Use Skill.endorsementSkills.count() instead.
        "prototype$__count__endorsementSkills": {
          url: urlBase + "/skills/:id/endorsementSkills/count",
          method: "GET"
        },

        // INTERNAL. Use Skill.endorsetSkills() instead.
        "prototype$__get__endorsetSkills": {
          isArray: true,
          url: urlBase + "/skills/:id/endorsetSkills",
          method: "GET"
        },

        // INTERNAL. Use Skill.endorsetSkills.create() instead.
        "prototype$__create__endorsetSkills": {
          url: urlBase + "/skills/:id/endorsetSkills",
          method: "POST"
        },

        // INTERNAL. Use Skill.endorsetSkills.destroyAll() instead.
        "prototype$__delete__endorsetSkills": {
          url: urlBase + "/skills/:id/endorsetSkills",
          method: "DELETE"
        },

        // INTERNAL. Use Skill.endorsetSkills.count() instead.
        "prototype$__count__endorsetSkills": {
          url: urlBase + "/skills/:id/endorsetSkills/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Skill#create
         * @methodOf lbServices.Skill
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Skill` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/skills",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Skill#createMany
         * @methodOf lbServices.Skill
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Skill` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/skills",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Skill#upsert
         * @methodOf lbServices.Skill
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Skill` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/skills",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Skill#exists
         * @methodOf lbServices.Skill
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/skills/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Skill#findById
         * @methodOf lbServices.Skill
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Skill` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/skills/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Skill#find
         * @methodOf lbServices.Skill
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Skill` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/skills",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Skill#findOne
         * @methodOf lbServices.Skill
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Skill` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/skills/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Skill#updateAll
         * @methodOf lbServices.Skill
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "updateAll": {
          url: urlBase + "/skills/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Skill#deleteById
         * @methodOf lbServices.Skill
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "deleteById": {
          url: urlBase + "/skills/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Skill#count
         * @methodOf lbServices.Skill
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/skills/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Skill#prototype$updateAttributes
         * @methodOf lbServices.Skill
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Skill` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/skills/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Skill#createChangeStream
         * @methodOf lbServices.Skill
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/skills/change-stream",
          method: "POST"
        },

        // INTERNAL. Use EndorsementSkill.skill() instead.
        "::get::endorsementSkill::skill": {
          url: urlBase + "/endorsementSkills/:id/skill",
          method: "GET"
        },

        // INTERNAL. Use EndorsetSkill.skill() instead.
        "::get::endorsetSkill::skill": {
          url: urlBase + "/endorsetSkills/:id/skill",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.Skill#updateOrCreate
         * @methodOf lbServices.Skill
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Skill` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.Skill#update
         * @methodOf lbServices.Skill
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.Skill#destroyById
         * @methodOf lbServices.Skill
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.Skill#removeById
         * @methodOf lbServices.Skill
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.Skill#modelName
    * @propertyOf lbServices.Skill
    * @description
    * The name of the model represented by this $resource,
    * i.e. `Skill`.
    */
    R.modelName = "Skill";

    /**
     * @ngdoc object
     * @name lbServices.Skill.endorsementSkills
     * @header lbServices.Skill.endorsementSkills
     * @object
     * @description
     *
     * The object `Skill.endorsementSkills` groups methods
     * manipulating `EndorsementSkill` instances related to `Skill`.
     *
     * Call {@link lbServices.Skill#endorsementSkills Skill.endorsementSkills()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.Skill#endorsementSkills
         * @methodOf lbServices.Skill
         *
         * @description
         *
         * Queries endorsementSkills of skill.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsementSkill` object.)
         * </em>
         */
        R.endorsementSkills = function() {
          var TargetResource = $injector.get("EndorsementSkill");
          var action = TargetResource["::get::skill::endorsementSkills"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Skill.endorsementSkills#count
         * @methodOf lbServices.Skill.endorsementSkills
         *
         * @description
         *
         * Counts endorsementSkills of skill.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.endorsementSkills.count = function() {
          var TargetResource = $injector.get("EndorsementSkill");
          var action = TargetResource["::count::skill::endorsementSkills"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Skill.endorsementSkills#create
         * @methodOf lbServices.Skill.endorsementSkills
         *
         * @description
         *
         * Creates a new instance in endorsementSkills of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsementSkill` object.)
         * </em>
         */
        R.endorsementSkills.create = function() {
          var TargetResource = $injector.get("EndorsementSkill");
          var action = TargetResource["::create::skill::endorsementSkills"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Skill.endorsementSkills#createMany
         * @methodOf lbServices.Skill.endorsementSkills
         *
         * @description
         *
         * Creates a new instance in endorsementSkills of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsementSkill` object.)
         * </em>
         */
        R.endorsementSkills.createMany = function() {
          var TargetResource = $injector.get("EndorsementSkill");
          var action = TargetResource["::createMany::skill::endorsementSkills"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Skill.endorsementSkills#destroyAll
         * @methodOf lbServices.Skill.endorsementSkills
         *
         * @description
         *
         * Deletes all endorsementSkills of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.endorsementSkills.destroyAll = function() {
          var TargetResource = $injector.get("EndorsementSkill");
          var action = TargetResource["::delete::skill::endorsementSkills"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Skill.endorsementSkills#destroyById
         * @methodOf lbServices.Skill.endorsementSkills
         *
         * @description
         *
         * Delete a related item by id for endorsementSkills.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for endorsementSkills
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.endorsementSkills.destroyById = function() {
          var TargetResource = $injector.get("EndorsementSkill");
          var action = TargetResource["::destroyById::skill::endorsementSkills"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Skill.endorsementSkills#findById
         * @methodOf lbServices.Skill.endorsementSkills
         *
         * @description
         *
         * Find a related item by id for endorsementSkills.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for endorsementSkills
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsementSkill` object.)
         * </em>
         */
        R.endorsementSkills.findById = function() {
          var TargetResource = $injector.get("EndorsementSkill");
          var action = TargetResource["::findById::skill::endorsementSkills"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Skill.endorsementSkills#updateById
         * @methodOf lbServices.Skill.endorsementSkills
         *
         * @description
         *
         * Update a related item by id for endorsementSkills.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for endorsementSkills
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsementSkill` object.)
         * </em>
         */
        R.endorsementSkills.updateById = function() {
          var TargetResource = $injector.get("EndorsementSkill");
          var action = TargetResource["::updateById::skill::endorsementSkills"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Skill.endorsetSkills
     * @header lbServices.Skill.endorsetSkills
     * @object
     * @description
     *
     * The object `Skill.endorsetSkills` groups methods
     * manipulating `EndorsetSkill` instances related to `Skill`.
     *
     * Call {@link lbServices.Skill#endorsetSkills Skill.endorsetSkills()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.Skill#endorsetSkills
         * @methodOf lbServices.Skill
         *
         * @description
         *
         * Queries endorsetSkills of skill.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsetSkill` object.)
         * </em>
         */
        R.endorsetSkills = function() {
          var TargetResource = $injector.get("EndorsetSkill");
          var action = TargetResource["::get::skill::endorsetSkills"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Skill.endorsetSkills#count
         * @methodOf lbServices.Skill.endorsetSkills
         *
         * @description
         *
         * Counts endorsetSkills of skill.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.endorsetSkills.count = function() {
          var TargetResource = $injector.get("EndorsetSkill");
          var action = TargetResource["::count::skill::endorsetSkills"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Skill.endorsetSkills#create
         * @methodOf lbServices.Skill.endorsetSkills
         *
         * @description
         *
         * Creates a new instance in endorsetSkills of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsetSkill` object.)
         * </em>
         */
        R.endorsetSkills.create = function() {
          var TargetResource = $injector.get("EndorsetSkill");
          var action = TargetResource["::create::skill::endorsetSkills"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Skill.endorsetSkills#createMany
         * @methodOf lbServices.Skill.endorsetSkills
         *
         * @description
         *
         * Creates a new instance in endorsetSkills of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsetSkill` object.)
         * </em>
         */
        R.endorsetSkills.createMany = function() {
          var TargetResource = $injector.get("EndorsetSkill");
          var action = TargetResource["::createMany::skill::endorsetSkills"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Skill.endorsetSkills#destroyAll
         * @methodOf lbServices.Skill.endorsetSkills
         *
         * @description
         *
         * Deletes all endorsetSkills of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.endorsetSkills.destroyAll = function() {
          var TargetResource = $injector.get("EndorsetSkill");
          var action = TargetResource["::delete::skill::endorsetSkills"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Skill.endorsetSkills#destroyById
         * @methodOf lbServices.Skill.endorsetSkills
         *
         * @description
         *
         * Delete a related item by id for endorsetSkills.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for endorsetSkills
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.endorsetSkills.destroyById = function() {
          var TargetResource = $injector.get("EndorsetSkill");
          var action = TargetResource["::destroyById::skill::endorsetSkills"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Skill.endorsetSkills#findById
         * @methodOf lbServices.Skill.endorsetSkills
         *
         * @description
         *
         * Find a related item by id for endorsetSkills.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for endorsetSkills
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsetSkill` object.)
         * </em>
         */
        R.endorsetSkills.findById = function() {
          var TargetResource = $injector.get("EndorsetSkill");
          var action = TargetResource["::findById::skill::endorsetSkills"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Skill.endorsetSkills#updateById
         * @methodOf lbServices.Skill.endorsetSkills
         *
         * @description
         *
         * Update a related item by id for endorsetSkills.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for endorsetSkills
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsetSkill` object.)
         * </em>
         */
        R.endorsetSkills.updateById = function() {
          var TargetResource = $injector.get("EndorsetSkill");
          var action = TargetResource["::updateById::skill::endorsetSkills"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.EndorsementSkill
 * @header lbServices.EndorsementSkill
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `EndorsementSkill` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "EndorsementSkill",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/endorsementSkills/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use EndorsementSkill.skill() instead.
        "prototype$__get__skill": {
          url: urlBase + "/endorsementSkills/:id/skill",
          method: "GET"
        },

        // INTERNAL. Use EndorsementSkill.endorsementProject() instead.
        "prototype$__get__endorsementProject": {
          url: urlBase + "/endorsementSkills/:id/endorsementProject",
          method: "GET"
        },

        // INTERNAL. Use EndorsementSkill.endorsement() instead.
        "prototype$__get__endorsement": {
          url: urlBase + "/endorsementSkills/:id/endorsement",
          method: "GET"
        },

        // INTERNAL. Use EndorsementSkill.userDetail() instead.
        "prototype$__get__userDetail": {
          url: urlBase + "/endorsementSkills/:id/userDetail",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.EndorsementSkill#create
         * @methodOf lbServices.EndorsementSkill
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsementSkill` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/endorsementSkills",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.EndorsementSkill#createMany
         * @methodOf lbServices.EndorsementSkill
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsementSkill` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/endorsementSkills",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.EndorsementSkill#upsert
         * @methodOf lbServices.EndorsementSkill
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsementSkill` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/endorsementSkills",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.EndorsementSkill#exists
         * @methodOf lbServices.EndorsementSkill
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/endorsementSkills/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.EndorsementSkill#findById
         * @methodOf lbServices.EndorsementSkill
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsementSkill` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/endorsementSkills/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.EndorsementSkill#find
         * @methodOf lbServices.EndorsementSkill
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsementSkill` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/endorsementSkills",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.EndorsementSkill#findOne
         * @methodOf lbServices.EndorsementSkill
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsementSkill` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/endorsementSkills/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.EndorsementSkill#updateAll
         * @methodOf lbServices.EndorsementSkill
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "updateAll": {
          url: urlBase + "/endorsementSkills/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.EndorsementSkill#deleteById
         * @methodOf lbServices.EndorsementSkill
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "deleteById": {
          url: urlBase + "/endorsementSkills/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.EndorsementSkill#count
         * @methodOf lbServices.EndorsementSkill
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/endorsementSkills/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.EndorsementSkill#prototype$updateAttributes
         * @methodOf lbServices.EndorsementSkill
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsementSkill` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/endorsementSkills/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.EndorsementSkill#createChangeStream
         * @methodOf lbServices.EndorsementSkill
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/endorsementSkills/change-stream",
          method: "POST"
        },

        // INTERNAL. Use UserDetail.endorsementSkills.findById() instead.
        "::findById::userDetail::endorsementSkills": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/endorsementSkills/:fk",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.endorsementSkills.destroyById() instead.
        "::destroyById::userDetail::endorsementSkills": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/endorsementSkills/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use UserDetail.endorsementSkills.updateById() instead.
        "::updateById::userDetail::endorsementSkills": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/endorsementSkills/:fk",
          method: "PUT"
        },

        // INTERNAL. Use UserDetail.endorsementSkills() instead.
        "::get::userDetail::endorsementSkills": {
          isArray: true,
          url: urlBase + "/userDetails/:id/endorsementSkills",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.endorsementSkills.create() instead.
        "::create::userDetail::endorsementSkills": {
          url: urlBase + "/userDetails/:id/endorsementSkills",
          method: "POST"
        },

        // INTERNAL. Use UserDetail.endorsementSkills.createMany() instead.
        "::createMany::userDetail::endorsementSkills": {
          isArray: true,
          url: urlBase + "/userDetails/:id/endorsementSkills",
          method: "POST"
        },

        // INTERNAL. Use UserDetail.endorsementSkills.destroyAll() instead.
        "::delete::userDetail::endorsementSkills": {
          url: urlBase + "/userDetails/:id/endorsementSkills",
          method: "DELETE"
        },

        // INTERNAL. Use UserDetail.endorsementSkills.count() instead.
        "::count::userDetail::endorsementSkills": {
          url: urlBase + "/userDetails/:id/endorsementSkills/count",
          method: "GET"
        },

        // INTERNAL. Use Endorsement.endorsementSkills.findById() instead.
        "::findById::endorsement::endorsementSkills": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/endorsements/:id/endorsementSkills/:fk",
          method: "GET"
        },

        // INTERNAL. Use Endorsement.endorsementSkills.destroyById() instead.
        "::destroyById::endorsement::endorsementSkills": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/endorsements/:id/endorsementSkills/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Endorsement.endorsementSkills.updateById() instead.
        "::updateById::endorsement::endorsementSkills": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/endorsements/:id/endorsementSkills/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Endorsement.endorsementSkills() instead.
        "::get::endorsement::endorsementSkills": {
          isArray: true,
          url: urlBase + "/endorsements/:id/endorsementSkills",
          method: "GET"
        },

        // INTERNAL. Use Endorsement.endorsementSkills.create() instead.
        "::create::endorsement::endorsementSkills": {
          url: urlBase + "/endorsements/:id/endorsementSkills",
          method: "POST"
        },

        // INTERNAL. Use Endorsement.endorsementSkills.createMany() instead.
        "::createMany::endorsement::endorsementSkills": {
          isArray: true,
          url: urlBase + "/endorsements/:id/endorsementSkills",
          method: "POST"
        },

        // INTERNAL. Use Endorsement.endorsementSkills.destroyAll() instead.
        "::delete::endorsement::endorsementSkills": {
          url: urlBase + "/endorsements/:id/endorsementSkills",
          method: "DELETE"
        },

        // INTERNAL. Use Endorsement.endorsementSkills.count() instead.
        "::count::endorsement::endorsementSkills": {
          url: urlBase + "/endorsements/:id/endorsementSkills/count",
          method: "GET"
        },

        // INTERNAL. Use EndorsementProject.endorsementSkills.findById() instead.
        "::findById::endorsementProject::endorsementSkills": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/endorsementProjects/:id/endorsementSkills/:fk",
          method: "GET"
        },

        // INTERNAL. Use EndorsementProject.endorsementSkills.destroyById() instead.
        "::destroyById::endorsementProject::endorsementSkills": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/endorsementProjects/:id/endorsementSkills/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use EndorsementProject.endorsementSkills.updateById() instead.
        "::updateById::endorsementProject::endorsementSkills": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/endorsementProjects/:id/endorsementSkills/:fk",
          method: "PUT"
        },

        // INTERNAL. Use EndorsementProject.endorsementSkills() instead.
        "::get::endorsementProject::endorsementSkills": {
          isArray: true,
          url: urlBase + "/endorsementProjects/:id/endorsementSkills",
          method: "GET"
        },

        // INTERNAL. Use EndorsementProject.endorsementSkills.create() instead.
        "::create::endorsementProject::endorsementSkills": {
          url: urlBase + "/endorsementProjects/:id/endorsementSkills",
          method: "POST"
        },

        // INTERNAL. Use EndorsementProject.endorsementSkills.createMany() instead.
        "::createMany::endorsementProject::endorsementSkills": {
          isArray: true,
          url: urlBase + "/endorsementProjects/:id/endorsementSkills",
          method: "POST"
        },

        // INTERNAL. Use EndorsementProject.endorsementSkills.destroyAll() instead.
        "::delete::endorsementProject::endorsementSkills": {
          url: urlBase + "/endorsementProjects/:id/endorsementSkills",
          method: "DELETE"
        },

        // INTERNAL. Use EndorsementProject.endorsementSkills.count() instead.
        "::count::endorsementProject::endorsementSkills": {
          url: urlBase + "/endorsementProjects/:id/endorsementSkills/count",
          method: "GET"
        },

        // INTERNAL. Use Skill.endorsementSkills.findById() instead.
        "::findById::skill::endorsementSkills": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/skills/:id/endorsementSkills/:fk",
          method: "GET"
        },

        // INTERNAL. Use Skill.endorsementSkills.destroyById() instead.
        "::destroyById::skill::endorsementSkills": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/skills/:id/endorsementSkills/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Skill.endorsementSkills.updateById() instead.
        "::updateById::skill::endorsementSkills": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/skills/:id/endorsementSkills/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Skill.endorsementSkills() instead.
        "::get::skill::endorsementSkills": {
          isArray: true,
          url: urlBase + "/skills/:id/endorsementSkills",
          method: "GET"
        },

        // INTERNAL. Use Skill.endorsementSkills.create() instead.
        "::create::skill::endorsementSkills": {
          url: urlBase + "/skills/:id/endorsementSkills",
          method: "POST"
        },

        // INTERNAL. Use Skill.endorsementSkills.createMany() instead.
        "::createMany::skill::endorsementSkills": {
          isArray: true,
          url: urlBase + "/skills/:id/endorsementSkills",
          method: "POST"
        },

        // INTERNAL. Use Skill.endorsementSkills.destroyAll() instead.
        "::delete::skill::endorsementSkills": {
          url: urlBase + "/skills/:id/endorsementSkills",
          method: "DELETE"
        },

        // INTERNAL. Use Skill.endorsementSkills.count() instead.
        "::count::skill::endorsementSkills": {
          url: urlBase + "/skills/:id/endorsementSkills/count",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.EndorsementSkill#updateOrCreate
         * @methodOf lbServices.EndorsementSkill
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsementSkill` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.EndorsementSkill#update
         * @methodOf lbServices.EndorsementSkill
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.EndorsementSkill#destroyById
         * @methodOf lbServices.EndorsementSkill
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.EndorsementSkill#removeById
         * @methodOf lbServices.EndorsementSkill
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.EndorsementSkill#modelName
    * @propertyOf lbServices.EndorsementSkill
    * @description
    * The name of the model represented by this $resource,
    * i.e. `EndorsementSkill`.
    */
    R.modelName = "EndorsementSkill";


        /**
         * @ngdoc method
         * @name lbServices.EndorsementSkill#skill
         * @methodOf lbServices.EndorsementSkill
         *
         * @description
         *
         * Fetches belongsTo relation skill.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Skill` object.)
         * </em>
         */
        R.skill = function() {
          var TargetResource = $injector.get("Skill");
          var action = TargetResource["::get::endorsementSkill::skill"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.EndorsementSkill#endorsementProject
         * @methodOf lbServices.EndorsementSkill
         *
         * @description
         *
         * Fetches belongsTo relation endorsementProject.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsementProject` object.)
         * </em>
         */
        R.endorsementProject = function() {
          var TargetResource = $injector.get("EndorsementProject");
          var action = TargetResource["::get::endorsementSkill::endorsementProject"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.EndorsementSkill#endorsement
         * @methodOf lbServices.EndorsementSkill
         *
         * @description
         *
         * Fetches belongsTo relation endorsement.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Endorsement` object.)
         * </em>
         */
        R.endorsement = function() {
          var TargetResource = $injector.get("Endorsement");
          var action = TargetResource["::get::endorsementSkill::endorsement"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.EndorsementSkill#userDetail
         * @methodOf lbServices.EndorsementSkill
         *
         * @description
         *
         * Fetches belongsTo relation userDetail.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserDetail` object.)
         * </em>
         */
        R.userDetail = function() {
          var TargetResource = $injector.get("UserDetail");
          var action = TargetResource["::get::endorsementSkill::userDetail"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.HrFeedback
 * @header lbServices.HrFeedback
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `HrFeedback` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "HrFeedback",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/hrFeedbacks/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use HrFeedback.userDetail() instead.
        "prototype$__get__userDetail": {
          url: urlBase + "/hrFeedbacks/:id/userDetail",
          method: "GET"
        },

        // INTERNAL. Use HrFeedback.hr() instead.
        "prototype$__get__hr": {
          url: urlBase + "/hrFeedbacks/:id/hr",
          method: "GET"
        },

        // INTERNAL. Use HrFeedback.endorsement() instead.
        "prototype$__get__endorsement": {
          url: urlBase + "/hrFeedbacks/:id/endorsement",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.HrFeedback#create
         * @methodOf lbServices.HrFeedback
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `HrFeedback` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/hrFeedbacks",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.HrFeedback#createMany
         * @methodOf lbServices.HrFeedback
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `HrFeedback` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/hrFeedbacks",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.HrFeedback#upsert
         * @methodOf lbServices.HrFeedback
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `HrFeedback` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/hrFeedbacks",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.HrFeedback#exists
         * @methodOf lbServices.HrFeedback
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/hrFeedbacks/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.HrFeedback#findById
         * @methodOf lbServices.HrFeedback
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `HrFeedback` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/hrFeedbacks/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.HrFeedback#find
         * @methodOf lbServices.HrFeedback
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `HrFeedback` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/hrFeedbacks",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.HrFeedback#findOne
         * @methodOf lbServices.HrFeedback
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `HrFeedback` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/hrFeedbacks/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.HrFeedback#updateAll
         * @methodOf lbServices.HrFeedback
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "updateAll": {
          url: urlBase + "/hrFeedbacks/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.HrFeedback#deleteById
         * @methodOf lbServices.HrFeedback
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "deleteById": {
          url: urlBase + "/hrFeedbacks/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.HrFeedback#count
         * @methodOf lbServices.HrFeedback
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/hrFeedbacks/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.HrFeedback#prototype$updateAttributes
         * @methodOf lbServices.HrFeedback
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `HrFeedback` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/hrFeedbacks/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.HrFeedback#createChangeStream
         * @methodOf lbServices.HrFeedback
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/hrFeedbacks/change-stream",
          method: "POST"
        },

        // INTERNAL. Use UserDetail.hrFeedbacks.findById() instead.
        "::findById::userDetail::hrFeedbacks": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/hrFeedbacks/:fk",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.hrFeedbacks.destroyById() instead.
        "::destroyById::userDetail::hrFeedbacks": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/hrFeedbacks/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use UserDetail.hrFeedbacks.updateById() instead.
        "::updateById::userDetail::hrFeedbacks": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/hrFeedbacks/:fk",
          method: "PUT"
        },

        // INTERNAL. Use UserDetail.userFeedbacks.findById() instead.
        "::findById::userDetail::userFeedbacks": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/userFeedbacks/:fk",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.userFeedbacks.destroyById() instead.
        "::destroyById::userDetail::userFeedbacks": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/userFeedbacks/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use UserDetail.userFeedbacks.updateById() instead.
        "::updateById::userDetail::userFeedbacks": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/userFeedbacks/:fk",
          method: "PUT"
        },

        // INTERNAL. Use UserDetail.hrFeedbacks() instead.
        "::get::userDetail::hrFeedbacks": {
          isArray: true,
          url: urlBase + "/userDetails/:id/hrFeedbacks",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.hrFeedbacks.create() instead.
        "::create::userDetail::hrFeedbacks": {
          url: urlBase + "/userDetails/:id/hrFeedbacks",
          method: "POST"
        },

        // INTERNAL. Use UserDetail.hrFeedbacks.createMany() instead.
        "::createMany::userDetail::hrFeedbacks": {
          isArray: true,
          url: urlBase + "/userDetails/:id/hrFeedbacks",
          method: "POST"
        },

        // INTERNAL. Use UserDetail.hrFeedbacks.destroyAll() instead.
        "::delete::userDetail::hrFeedbacks": {
          url: urlBase + "/userDetails/:id/hrFeedbacks",
          method: "DELETE"
        },

        // INTERNAL. Use UserDetail.hrFeedbacks.count() instead.
        "::count::userDetail::hrFeedbacks": {
          url: urlBase + "/userDetails/:id/hrFeedbacks/count",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.userFeedbacks() instead.
        "::get::userDetail::userFeedbacks": {
          isArray: true,
          url: urlBase + "/userDetails/:id/userFeedbacks",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.userFeedbacks.create() instead.
        "::create::userDetail::userFeedbacks": {
          url: urlBase + "/userDetails/:id/userFeedbacks",
          method: "POST"
        },

        // INTERNAL. Use UserDetail.userFeedbacks.createMany() instead.
        "::createMany::userDetail::userFeedbacks": {
          isArray: true,
          url: urlBase + "/userDetails/:id/userFeedbacks",
          method: "POST"
        },

        // INTERNAL. Use UserDetail.userFeedbacks.destroyAll() instead.
        "::delete::userDetail::userFeedbacks": {
          url: urlBase + "/userDetails/:id/userFeedbacks",
          method: "DELETE"
        },

        // INTERNAL. Use UserDetail.userFeedbacks.count() instead.
        "::count::userDetail::userFeedbacks": {
          url: urlBase + "/userDetails/:id/userFeedbacks/count",
          method: "GET"
        },

        // INTERNAL. Use Endorsement.hrFeedbacks.findById() instead.
        "::findById::endorsement::hrFeedbacks": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/endorsements/:id/hrFeedbacks/:fk",
          method: "GET"
        },

        // INTERNAL. Use Endorsement.hrFeedbacks.destroyById() instead.
        "::destroyById::endorsement::hrFeedbacks": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/endorsements/:id/hrFeedbacks/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Endorsement.hrFeedbacks.updateById() instead.
        "::updateById::endorsement::hrFeedbacks": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/endorsements/:id/hrFeedbacks/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Endorsement.hrFeedbacks() instead.
        "::get::endorsement::hrFeedbacks": {
          isArray: true,
          url: urlBase + "/endorsements/:id/hrFeedbacks",
          method: "GET"
        },

        // INTERNAL. Use Endorsement.hrFeedbacks.create() instead.
        "::create::endorsement::hrFeedbacks": {
          url: urlBase + "/endorsements/:id/hrFeedbacks",
          method: "POST"
        },

        // INTERNAL. Use Endorsement.hrFeedbacks.createMany() instead.
        "::createMany::endorsement::hrFeedbacks": {
          isArray: true,
          url: urlBase + "/endorsements/:id/hrFeedbacks",
          method: "POST"
        },

        // INTERNAL. Use Endorsement.hrFeedbacks.destroyAll() instead.
        "::delete::endorsement::hrFeedbacks": {
          url: urlBase + "/endorsements/:id/hrFeedbacks",
          method: "DELETE"
        },

        // INTERNAL. Use Endorsement.hrFeedbacks.count() instead.
        "::count::endorsement::hrFeedbacks": {
          url: urlBase + "/endorsements/:id/hrFeedbacks/count",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.HrFeedback#updateOrCreate
         * @methodOf lbServices.HrFeedback
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `HrFeedback` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.HrFeedback#update
         * @methodOf lbServices.HrFeedback
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.HrFeedback#destroyById
         * @methodOf lbServices.HrFeedback
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.HrFeedback#removeById
         * @methodOf lbServices.HrFeedback
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.HrFeedback#modelName
    * @propertyOf lbServices.HrFeedback
    * @description
    * The name of the model represented by this $resource,
    * i.e. `HrFeedback`.
    */
    R.modelName = "HrFeedback";


        /**
         * @ngdoc method
         * @name lbServices.HrFeedback#userDetail
         * @methodOf lbServices.HrFeedback
         *
         * @description
         *
         * Fetches belongsTo relation userDetail.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserDetail` object.)
         * </em>
         */
        R.userDetail = function() {
          var TargetResource = $injector.get("UserDetail");
          var action = TargetResource["::get::hrFeedback::userDetail"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.HrFeedback#hr
         * @methodOf lbServices.HrFeedback
         *
         * @description
         *
         * Fetches belongsTo relation hr.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserDetail` object.)
         * </em>
         */
        R.hr = function() {
          var TargetResource = $injector.get("UserDetail");
          var action = TargetResource["::get::hrFeedback::hr"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.HrFeedback#endorsement
         * @methodOf lbServices.HrFeedback
         *
         * @description
         *
         * Fetches belongsTo relation endorsement.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Endorsement` object.)
         * </em>
         */
        R.endorsement = function() {
          var TargetResource = $injector.get("Endorsement");
          var action = TargetResource["::get::hrFeedback::endorsement"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.UserIdentity
 * @header lbServices.UserIdentity
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `UserIdentity` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "UserIdentity",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/userIdentities/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use UserIdentity.userDetail() instead.
        "prototype$__get__userDetail": {
          url: urlBase + "/userIdentities/:id/userDetail",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.UserIdentity#create
         * @methodOf lbServices.UserIdentity
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserIdentity` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/userIdentities",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.UserIdentity#createMany
         * @methodOf lbServices.UserIdentity
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserIdentity` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/userIdentities",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.UserIdentity#upsert
         * @methodOf lbServices.UserIdentity
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserIdentity` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/userIdentities",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.UserIdentity#exists
         * @methodOf lbServices.UserIdentity
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/userIdentities/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.UserIdentity#findById
         * @methodOf lbServices.UserIdentity
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserIdentity` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/userIdentities/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.UserIdentity#find
         * @methodOf lbServices.UserIdentity
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserIdentity` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/userIdentities",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.UserIdentity#findOne
         * @methodOf lbServices.UserIdentity
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserIdentity` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/userIdentities/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.UserIdentity#updateAll
         * @methodOf lbServices.UserIdentity
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "updateAll": {
          url: urlBase + "/userIdentities/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.UserIdentity#deleteById
         * @methodOf lbServices.UserIdentity
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "deleteById": {
          url: urlBase + "/userIdentities/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.UserIdentity#count
         * @methodOf lbServices.UserIdentity
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/userIdentities/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.UserIdentity#prototype$updateAttributes
         * @methodOf lbServices.UserIdentity
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserIdentity` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/userIdentities/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.UserIdentity#createChangeStream
         * @methodOf lbServices.UserIdentity
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/userIdentities/change-stream",
          method: "POST"
        },

        // INTERNAL. Use UserDetail.userIdentities.findById() instead.
        "::findById::userDetail::userIdentities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/userIdentities/:fk",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.userIdentities.destroyById() instead.
        "::destroyById::userDetail::userIdentities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/userIdentities/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use UserDetail.userIdentities.updateById() instead.
        "::updateById::userDetail::userIdentities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/userIdentities/:fk",
          method: "PUT"
        },

        // INTERNAL. Use UserDetail.userIdentities() instead.
        "::get::userDetail::userIdentities": {
          isArray: true,
          url: urlBase + "/userDetails/:id/userIdentities",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.userIdentities.create() instead.
        "::create::userDetail::userIdentities": {
          url: urlBase + "/userDetails/:id/userIdentities",
          method: "POST"
        },

        // INTERNAL. Use UserDetail.userIdentities.createMany() instead.
        "::createMany::userDetail::userIdentities": {
          isArray: true,
          url: urlBase + "/userDetails/:id/userIdentities",
          method: "POST"
        },

        // INTERNAL. Use UserDetail.userIdentities.destroyAll() instead.
        "::delete::userDetail::userIdentities": {
          url: urlBase + "/userDetails/:id/userIdentities",
          method: "DELETE"
        },

        // INTERNAL. Use UserDetail.userIdentities.count() instead.
        "::count::userDetail::userIdentities": {
          url: urlBase + "/userDetails/:id/userIdentities/count",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.UserIdentity#updateOrCreate
         * @methodOf lbServices.UserIdentity
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserIdentity` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.UserIdentity#update
         * @methodOf lbServices.UserIdentity
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.UserIdentity#destroyById
         * @methodOf lbServices.UserIdentity
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.UserIdentity#removeById
         * @methodOf lbServices.UserIdentity
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.UserIdentity#modelName
    * @propertyOf lbServices.UserIdentity
    * @description
    * The name of the model represented by this $resource,
    * i.e. `UserIdentity`.
    */
    R.modelName = "UserIdentity";


        /**
         * @ngdoc method
         * @name lbServices.UserIdentity#userDetail
         * @methodOf lbServices.UserIdentity
         *
         * @description
         *
         * Fetches belongsTo relation userDetail.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserDetail` object.)
         * </em>
         */
        R.userDetail = function() {
          var TargetResource = $injector.get("UserDetail");
          var action = TargetResource["::get::userIdentity::userDetail"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.JobPost
 * @header lbServices.JobPost
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `JobPost` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "JobPost",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/jobPosts/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use JobPost.userDetail() instead.
        "prototype$__get__userDetail": {
          url: urlBase + "/jobPosts/:id/userDetail",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.JobPost#create
         * @methodOf lbServices.JobPost
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `JobPost` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/jobPosts",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.JobPost#createMany
         * @methodOf lbServices.JobPost
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `JobPost` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/jobPosts",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.JobPost#upsert
         * @methodOf lbServices.JobPost
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `JobPost` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/jobPosts",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.JobPost#exists
         * @methodOf lbServices.JobPost
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/jobPosts/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.JobPost#findById
         * @methodOf lbServices.JobPost
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `JobPost` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/jobPosts/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.JobPost#find
         * @methodOf lbServices.JobPost
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `JobPost` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/jobPosts",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.JobPost#findOne
         * @methodOf lbServices.JobPost
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `JobPost` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/jobPosts/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.JobPost#updateAll
         * @methodOf lbServices.JobPost
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "updateAll": {
          url: urlBase + "/jobPosts/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.JobPost#deleteById
         * @methodOf lbServices.JobPost
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "deleteById": {
          url: urlBase + "/jobPosts/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.JobPost#count
         * @methodOf lbServices.JobPost
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/jobPosts/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.JobPost#prototype$updateAttributes
         * @methodOf lbServices.JobPost
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `JobPost` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/jobPosts/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.JobPost#createChangeStream
         * @methodOf lbServices.JobPost
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/jobPosts/change-stream",
          method: "POST"
        },

        // INTERNAL. Use UserDetail.jobPosts.findById() instead.
        "::findById::userDetail::jobPosts": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/jobPosts/:fk",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.jobPosts.destroyById() instead.
        "::destroyById::userDetail::jobPosts": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/jobPosts/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use UserDetail.jobPosts.updateById() instead.
        "::updateById::userDetail::jobPosts": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/jobPosts/:fk",
          method: "PUT"
        },

        // INTERNAL. Use UserDetail.jobPosts() instead.
        "::get::userDetail::jobPosts": {
          isArray: true,
          url: urlBase + "/userDetails/:id/jobPosts",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.jobPosts.create() instead.
        "::create::userDetail::jobPosts": {
          url: urlBase + "/userDetails/:id/jobPosts",
          method: "POST"
        },

        // INTERNAL. Use UserDetail.jobPosts.createMany() instead.
        "::createMany::userDetail::jobPosts": {
          isArray: true,
          url: urlBase + "/userDetails/:id/jobPosts",
          method: "POST"
        },

        // INTERNAL. Use UserDetail.jobPosts.destroyAll() instead.
        "::delete::userDetail::jobPosts": {
          url: urlBase + "/userDetails/:id/jobPosts",
          method: "DELETE"
        },

        // INTERNAL. Use UserDetail.jobPosts.count() instead.
        "::count::userDetail::jobPosts": {
          url: urlBase + "/userDetails/:id/jobPosts/count",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.JobPost#updateOrCreate
         * @methodOf lbServices.JobPost
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `JobPost` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.JobPost#update
         * @methodOf lbServices.JobPost
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.JobPost#destroyById
         * @methodOf lbServices.JobPost
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.JobPost#removeById
         * @methodOf lbServices.JobPost
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.JobPost#modelName
    * @propertyOf lbServices.JobPost
    * @description
    * The name of the model represented by this $resource,
    * i.e. `JobPost`.
    */
    R.modelName = "JobPost";


        /**
         * @ngdoc method
         * @name lbServices.JobPost#userDetail
         * @methodOf lbServices.JobPost
         *
         * @description
         *
         * Fetches belongsTo relation userDetail.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserDetail` object.)
         * </em>
         */
        R.userDetail = function() {
          var TargetResource = $injector.get("UserDetail");
          var action = TargetResource["::get::jobPost::userDetail"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.Endorset
 * @header lbServices.Endorset
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Endorset` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "Endorset",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/endorsets/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use Endorset.userDetail() instead.
        "prototype$__get__userDetail": {
          url: urlBase + "/endorsets/:id/userDetail",
          method: "GET"
        },

        // INTERNAL. Use Endorset.endorsement() instead.
        "prototype$__get__endorsement": {
          url: urlBase + "/endorsets/:id/endorsement",
          method: "GET"
        },

        // INTERNAL. Use Endorset.userProfile() instead.
        "prototype$__get__userProfile": {
          url: urlBase + "/endorsets/:id/userProfile",
          method: "GET"
        },

        // INTERNAL. Use Endorset.endorserEndorsement() instead.
        "prototype$__get__endorserEndorsement": {
          url: urlBase + "/endorsets/:id/endorserEndorsement",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Endorset#create
         * @methodOf lbServices.Endorset
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Endorset` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/endorsets",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Endorset#createMany
         * @methodOf lbServices.Endorset
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Endorset` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/endorsets",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Endorset#upsert
         * @methodOf lbServices.Endorset
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Endorset` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/endorsets",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Endorset#exists
         * @methodOf lbServices.Endorset
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/endorsets/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Endorset#findById
         * @methodOf lbServices.Endorset
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Endorset` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/endorsets/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Endorset#find
         * @methodOf lbServices.Endorset
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Endorset` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/endorsets",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Endorset#findOne
         * @methodOf lbServices.Endorset
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Endorset` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/endorsets/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Endorset#updateAll
         * @methodOf lbServices.Endorset
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "updateAll": {
          url: urlBase + "/endorsets/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Endorset#deleteById
         * @methodOf lbServices.Endorset
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "deleteById": {
          url: urlBase + "/endorsets/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Endorset#count
         * @methodOf lbServices.Endorset
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/endorsets/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Endorset#prototype$updateAttributes
         * @methodOf lbServices.Endorset
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Endorset` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/endorsets/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Endorset#createChangeStream
         * @methodOf lbServices.Endorset
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/endorsets/change-stream",
          method: "POST"
        },

        // INTERNAL. Use UserDetail.endorsets.findById() instead.
        "::findById::userDetail::endorsets": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/endorsets/:fk",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.endorsets.destroyById() instead.
        "::destroyById::userDetail::endorsets": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/endorsets/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use UserDetail.endorsets.updateById() instead.
        "::updateById::userDetail::endorsets": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/endorsets/:fk",
          method: "PUT"
        },

        // INTERNAL. Use UserDetail.endorsets() instead.
        "::get::userDetail::endorsets": {
          isArray: true,
          url: urlBase + "/userDetails/:id/endorsets",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.endorsets.create() instead.
        "::create::userDetail::endorsets": {
          url: urlBase + "/userDetails/:id/endorsets",
          method: "POST"
        },

        // INTERNAL. Use UserDetail.endorsets.createMany() instead.
        "::createMany::userDetail::endorsets": {
          isArray: true,
          url: urlBase + "/userDetails/:id/endorsets",
          method: "POST"
        },

        // INTERNAL. Use UserDetail.endorsets.destroyAll() instead.
        "::delete::userDetail::endorsets": {
          url: urlBase + "/userDetails/:id/endorsets",
          method: "DELETE"
        },

        // INTERNAL. Use UserDetail.endorsets.count() instead.
        "::count::userDetail::endorsets": {
          url: urlBase + "/userDetails/:id/endorsets/count",
          method: "GET"
        },

        // INTERNAL. Use UserProfile.endorsets.findById() instead.
        "::findById::userProfile::endorsets": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/profiles/:id/endorsets/:fk",
          method: "GET"
        },

        // INTERNAL. Use UserProfile.endorsets.destroyById() instead.
        "::destroyById::userProfile::endorsets": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/profiles/:id/endorsets/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use UserProfile.endorsets.updateById() instead.
        "::updateById::userProfile::endorsets": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/profiles/:id/endorsets/:fk",
          method: "PUT"
        },

        // INTERNAL. Use UserProfile.endorsets() instead.
        "::get::userProfile::endorsets": {
          isArray: true,
          url: urlBase + "/profiles/:id/endorsets",
          method: "GET"
        },

        // INTERNAL. Use UserProfile.endorsets.create() instead.
        "::create::userProfile::endorsets": {
          url: urlBase + "/profiles/:id/endorsets",
          method: "POST"
        },

        // INTERNAL. Use UserProfile.endorsets.createMany() instead.
        "::createMany::userProfile::endorsets": {
          isArray: true,
          url: urlBase + "/profiles/:id/endorsets",
          method: "POST"
        },

        // INTERNAL. Use UserProfile.endorsets.destroyAll() instead.
        "::delete::userProfile::endorsets": {
          url: urlBase + "/profiles/:id/endorsets",
          method: "DELETE"
        },

        // INTERNAL. Use UserProfile.endorsets.count() instead.
        "::count::userProfile::endorsets": {
          url: urlBase + "/profiles/:id/endorsets/count",
          method: "GET"
        },

        // INTERNAL. Use Endorsement.endorsets.findById() instead.
        "::findById::endorsement::endorsets": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/endorsements/:id/endorsets/:fk",
          method: "GET"
        },

        // INTERNAL. Use Endorsement.endorsets.destroyById() instead.
        "::destroyById::endorsement::endorsets": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/endorsements/:id/endorsets/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Endorsement.endorsets.updateById() instead.
        "::updateById::endorsement::endorsets": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/endorsements/:id/endorsets/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Endorsement.endorsets() instead.
        "::get::endorsement::endorsets": {
          isArray: true,
          url: urlBase + "/endorsements/:id/endorsets",
          method: "GET"
        },

        // INTERNAL. Use Endorsement.endorsets.create() instead.
        "::create::endorsement::endorsets": {
          url: urlBase + "/endorsements/:id/endorsets",
          method: "POST"
        },

        // INTERNAL. Use Endorsement.endorsets.createMany() instead.
        "::createMany::endorsement::endorsets": {
          isArray: true,
          url: urlBase + "/endorsements/:id/endorsets",
          method: "POST"
        },

        // INTERNAL. Use Endorsement.endorsets.destroyAll() instead.
        "::delete::endorsement::endorsets": {
          url: urlBase + "/endorsements/:id/endorsets",
          method: "DELETE"
        },

        // INTERNAL. Use Endorsement.endorsets.count() instead.
        "::count::endorsement::endorsets": {
          url: urlBase + "/endorsements/:id/endorsets/count",
          method: "GET"
        },

        // INTERNAL. Use EndorserEndorsement.endorsets() instead.
        "::get::endorserEndorsement::endorsets": {
          url: urlBase + "/endorserEndorsements/:id/endorsets",
          method: "GET"
        },

        // INTERNAL. Use EndorserEndorsement.endorsets.create() instead.
        "::create::endorserEndorsement::endorsets": {
          url: urlBase + "/endorserEndorsements/:id/endorsets",
          method: "POST"
        },

        // INTERNAL. Use EndorserEndorsement.endorsets.createMany() instead.
        "::createMany::endorserEndorsement::endorsets": {
          isArray: true,
          url: urlBase + "/endorserEndorsements/:id/endorsets",
          method: "POST"
        },

        // INTERNAL. Use EndorserEndorsement.endorsets.update() instead.
        "::update::endorserEndorsement::endorsets": {
          url: urlBase + "/endorserEndorsements/:id/endorsets",
          method: "PUT"
        },

        // INTERNAL. Use EndorserEndorsement.endorsets.destroy() instead.
        "::destroy::endorserEndorsement::endorsets": {
          url: urlBase + "/endorserEndorsements/:id/endorsets",
          method: "DELETE"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.Endorset#updateOrCreate
         * @methodOf lbServices.Endorset
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Endorset` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.Endorset#update
         * @methodOf lbServices.Endorset
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.Endorset#destroyById
         * @methodOf lbServices.Endorset
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.Endorset#removeById
         * @methodOf lbServices.Endorset
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.Endorset#modelName
    * @propertyOf lbServices.Endorset
    * @description
    * The name of the model represented by this $resource,
    * i.e. `Endorset`.
    */
    R.modelName = "Endorset";


        /**
         * @ngdoc method
         * @name lbServices.Endorset#userDetail
         * @methodOf lbServices.Endorset
         *
         * @description
         *
         * Fetches belongsTo relation userDetail.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserDetail` object.)
         * </em>
         */
        R.userDetail = function() {
          var TargetResource = $injector.get("UserDetail");
          var action = TargetResource["::get::endorset::userDetail"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Endorset#endorsement
         * @methodOf lbServices.Endorset
         *
         * @description
         *
         * Fetches belongsTo relation endorsement.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Endorsement` object.)
         * </em>
         */
        R.endorsement = function() {
          var TargetResource = $injector.get("Endorsement");
          var action = TargetResource["::get::endorset::endorsement"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Endorset#userProfile
         * @methodOf lbServices.Endorset
         *
         * @description
         *
         * Fetches belongsTo relation userProfile.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserProfile` object.)
         * </em>
         */
        R.userProfile = function() {
          var TargetResource = $injector.get("UserProfile");
          var action = TargetResource["::get::endorset::userProfile"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Endorset#endorserEndorsement
         * @methodOf lbServices.Endorset
         *
         * @description
         *
         * Fetches belongsTo relation endorserEndorsement.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorserEndorsement` object.)
         * </em>
         */
        R.endorserEndorsement = function() {
          var TargetResource = $injector.get("EndorserEndorsement");
          var action = TargetResource["::get::endorset::endorserEndorsement"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.EndorsetSkill
 * @header lbServices.EndorsetSkill
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `EndorsetSkill` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "EndorsetSkill",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/endorsetSkills/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use EndorsetSkill.userDetail() instead.
        "prototype$__get__userDetail": {
          url: urlBase + "/endorsetSkills/:id/userDetail",
          method: "GET"
        },

        // INTERNAL. Use EndorsetSkill.skill() instead.
        "prototype$__get__skill": {
          url: urlBase + "/endorsetSkills/:id/skill",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.EndorsetSkill#create
         * @methodOf lbServices.EndorsetSkill
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsetSkill` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/endorsetSkills",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.EndorsetSkill#createMany
         * @methodOf lbServices.EndorsetSkill
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsetSkill` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/endorsetSkills",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.EndorsetSkill#upsert
         * @methodOf lbServices.EndorsetSkill
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsetSkill` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/endorsetSkills",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.EndorsetSkill#exists
         * @methodOf lbServices.EndorsetSkill
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/endorsetSkills/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.EndorsetSkill#findById
         * @methodOf lbServices.EndorsetSkill
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsetSkill` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/endorsetSkills/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.EndorsetSkill#find
         * @methodOf lbServices.EndorsetSkill
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsetSkill` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/endorsetSkills",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.EndorsetSkill#findOne
         * @methodOf lbServices.EndorsetSkill
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsetSkill` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/endorsetSkills/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.EndorsetSkill#updateAll
         * @methodOf lbServices.EndorsetSkill
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "updateAll": {
          url: urlBase + "/endorsetSkills/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.EndorsetSkill#deleteById
         * @methodOf lbServices.EndorsetSkill
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "deleteById": {
          url: urlBase + "/endorsetSkills/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.EndorsetSkill#count
         * @methodOf lbServices.EndorsetSkill
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/endorsetSkills/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.EndorsetSkill#prototype$updateAttributes
         * @methodOf lbServices.EndorsetSkill
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsetSkill` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/endorsetSkills/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.EndorsetSkill#createChangeStream
         * @methodOf lbServices.EndorsetSkill
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/endorsetSkills/change-stream",
          method: "POST"
        },

        // INTERNAL. Use UserDetail.endorsetSkills.findById() instead.
        "::findById::userDetail::endorsetSkills": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/endorsetSkills/:fk",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.endorsetSkills.destroyById() instead.
        "::destroyById::userDetail::endorsetSkills": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/endorsetSkills/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use UserDetail.endorsetSkills.updateById() instead.
        "::updateById::userDetail::endorsetSkills": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/endorsetSkills/:fk",
          method: "PUT"
        },

        // INTERNAL. Use UserDetail.endorsetSkills() instead.
        "::get::userDetail::endorsetSkills": {
          isArray: true,
          url: urlBase + "/userDetails/:id/endorsetSkills",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.endorsetSkills.create() instead.
        "::create::userDetail::endorsetSkills": {
          url: urlBase + "/userDetails/:id/endorsetSkills",
          method: "POST"
        },

        // INTERNAL. Use UserDetail.endorsetSkills.createMany() instead.
        "::createMany::userDetail::endorsetSkills": {
          isArray: true,
          url: urlBase + "/userDetails/:id/endorsetSkills",
          method: "POST"
        },

        // INTERNAL. Use UserDetail.endorsetSkills.destroyAll() instead.
        "::delete::userDetail::endorsetSkills": {
          url: urlBase + "/userDetails/:id/endorsetSkills",
          method: "DELETE"
        },

        // INTERNAL. Use UserDetail.endorsetSkills.count() instead.
        "::count::userDetail::endorsetSkills": {
          url: urlBase + "/userDetails/:id/endorsetSkills/count",
          method: "GET"
        },

        // INTERNAL. Use Skill.endorsetSkills.findById() instead.
        "::findById::skill::endorsetSkills": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/skills/:id/endorsetSkills/:fk",
          method: "GET"
        },

        // INTERNAL. Use Skill.endorsetSkills.destroyById() instead.
        "::destroyById::skill::endorsetSkills": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/skills/:id/endorsetSkills/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Skill.endorsetSkills.updateById() instead.
        "::updateById::skill::endorsetSkills": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/skills/:id/endorsetSkills/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Skill.endorsetSkills() instead.
        "::get::skill::endorsetSkills": {
          isArray: true,
          url: urlBase + "/skills/:id/endorsetSkills",
          method: "GET"
        },

        // INTERNAL. Use Skill.endorsetSkills.create() instead.
        "::create::skill::endorsetSkills": {
          url: urlBase + "/skills/:id/endorsetSkills",
          method: "POST"
        },

        // INTERNAL. Use Skill.endorsetSkills.createMany() instead.
        "::createMany::skill::endorsetSkills": {
          isArray: true,
          url: urlBase + "/skills/:id/endorsetSkills",
          method: "POST"
        },

        // INTERNAL. Use Skill.endorsetSkills.destroyAll() instead.
        "::delete::skill::endorsetSkills": {
          url: urlBase + "/skills/:id/endorsetSkills",
          method: "DELETE"
        },

        // INTERNAL. Use Skill.endorsetSkills.count() instead.
        "::count::skill::endorsetSkills": {
          url: urlBase + "/skills/:id/endorsetSkills/count",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.EndorsetSkill#updateOrCreate
         * @methodOf lbServices.EndorsetSkill
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsetSkill` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.EndorsetSkill#update
         * @methodOf lbServices.EndorsetSkill
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.EndorsetSkill#destroyById
         * @methodOf lbServices.EndorsetSkill
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.EndorsetSkill#removeById
         * @methodOf lbServices.EndorsetSkill
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.EndorsetSkill#modelName
    * @propertyOf lbServices.EndorsetSkill
    * @description
    * The name of the model represented by this $resource,
    * i.e. `EndorsetSkill`.
    */
    R.modelName = "EndorsetSkill";


        /**
         * @ngdoc method
         * @name lbServices.EndorsetSkill#userDetail
         * @methodOf lbServices.EndorsetSkill
         *
         * @description
         *
         * Fetches belongsTo relation userDetail.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserDetail` object.)
         * </em>
         */
        R.userDetail = function() {
          var TargetResource = $injector.get("UserDetail");
          var action = TargetResource["::get::endorsetSkill::userDetail"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.EndorsetSkill#skill
         * @methodOf lbServices.EndorsetSkill
         *
         * @description
         *
         * Fetches belongsTo relation skill.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Skill` object.)
         * </em>
         */
        R.skill = function() {
          var TargetResource = $injector.get("Skill");
          var action = TargetResource["::get::endorsetSkill::skill"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.Vote
 * @header lbServices.Vote
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Vote` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "Vote",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/votes/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use Vote.hr() instead.
        "prototype$__get__hr": {
          url: urlBase + "/votes/:id/hr",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Vote#create
         * @methodOf lbServices.Vote
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Vote` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/votes",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Vote#createMany
         * @methodOf lbServices.Vote
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Vote` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/votes",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Vote#upsert
         * @methodOf lbServices.Vote
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Vote` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/votes",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Vote#exists
         * @methodOf lbServices.Vote
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/votes/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Vote#findById
         * @methodOf lbServices.Vote
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Vote` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/votes/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Vote#find
         * @methodOf lbServices.Vote
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Vote` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/votes",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Vote#findOne
         * @methodOf lbServices.Vote
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Vote` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/votes/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Vote#updateAll
         * @methodOf lbServices.Vote
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "updateAll": {
          url: urlBase + "/votes/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Vote#deleteById
         * @methodOf lbServices.Vote
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "deleteById": {
          url: urlBase + "/votes/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Vote#count
         * @methodOf lbServices.Vote
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/votes/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Vote#prototype$updateAttributes
         * @methodOf lbServices.Vote
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Vote` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/votes/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Vote#createChangeStream
         * @methodOf lbServices.Vote
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/votes/change-stream",
          method: "POST"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.Vote#updateOrCreate
         * @methodOf lbServices.Vote
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Vote` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.Vote#update
         * @methodOf lbServices.Vote
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.Vote#destroyById
         * @methodOf lbServices.Vote
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.Vote#removeById
         * @methodOf lbServices.Vote
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.Vote#modelName
    * @propertyOf lbServices.Vote
    * @description
    * The name of the model represented by this $resource,
    * i.e. `Vote`.
    */
    R.modelName = "Vote";


        /**
         * @ngdoc method
         * @name lbServices.Vote#hr
         * @methodOf lbServices.Vote
         *
         * @description
         *
         * Fetches belongsTo relation hr.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserDetail` object.)
         * </em>
         */
        R.hr = function() {
          var TargetResource = $injector.get("UserDetail");
          var action = TargetResource["::get::vote::hr"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.Container
 * @header lbServices.Container
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Container` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "Container",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/containers/:id",
      { 'id': '@id' },
      {

        /**
         * @ngdoc method
         * @name lbServices.Container#getContainers
         * @methodOf lbServices.Container
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Container` object.)
         * </em>
         */
        "getContainers": {
          isArray: true,
          url: urlBase + "/containers",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Container#createContainer
         * @methodOf lbServices.Container
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Container` object.)
         * </em>
         */
        "createContainer": {
          url: urlBase + "/containers",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Container#destroyContainer
         * @methodOf lbServices.Container
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `container` – `{string=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `` – `{undefined=}` - 
         */
        "destroyContainer": {
          url: urlBase + "/containers/:container",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Container#getContainer
         * @methodOf lbServices.Container
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `container` – `{string=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Container` object.)
         * </em>
         */
        "getContainer": {
          url: urlBase + "/containers/:container",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Container#getFiles
         * @methodOf lbServices.Container
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `container` – `{string=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Container` object.)
         * </em>
         */
        "getFiles": {
          isArray: true,
          url: urlBase + "/containers/:container/files",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Container#getFile
         * @methodOf lbServices.Container
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `container` – `{string=}` - 
         *
         *  - `file` – `{string=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Container` object.)
         * </em>
         */
        "getFile": {
          url: urlBase + "/containers/:container/files/:file",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Container#removeFile
         * @methodOf lbServices.Container
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `container` – `{string=}` - 
         *
         *  - `file` – `{string=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `` – `{undefined=}` - 
         */
        "removeFile": {
          url: urlBase + "/containers/:container/files/:file",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Container#upload
         * @methodOf lbServices.Container
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `req` – `{object=}` - 
         *
         *  - `res` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `result` – `{object=}` - 
         */
        "upload": {
          url: urlBase + "/containers/:container/upload",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Container#download
         * @methodOf lbServices.Container
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `container` – `{string=}` - 
         *
         *  - `file` – `{string=}` - 
         *
         *  - `res` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "download": {
          url: urlBase + "/containers/:container/download/:file",
          method: "GET"
        },
      }
    );




    /**
    * @ngdoc property
    * @name lbServices.Container#modelName
    * @propertyOf lbServices.Container
    * @description
    * The name of the model represented by this $resource,
    * i.e. `Container`.
    */
    R.modelName = "Container";


    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.EndorserEndorsement
 * @header lbServices.EndorserEndorsement
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `EndorserEndorsement` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "EndorserEndorsement",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/endorserEndorsements/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use EndorserEndorsement.endorsement() instead.
        "prototype$__get__endorsement": {
          url: urlBase + "/endorserEndorsements/:id/endorsement",
          method: "GET"
        },

        // INTERNAL. Use EndorserEndorsement.userDetail() instead.
        "prototype$__get__userDetail": {
          url: urlBase + "/endorserEndorsements/:id/userDetail",
          method: "GET"
        },

        // INTERNAL. Use EndorserEndorsement.userProfile() instead.
        "prototype$__get__userProfile": {
          url: urlBase + "/endorserEndorsements/:id/userProfile",
          method: "GET"
        },

        // INTERNAL. Use EndorserEndorsement.questions.findById() instead.
        "prototype$__findById__questions": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/endorserEndorsements/:id/questions/:fk",
          method: "GET"
        },

        // INTERNAL. Use EndorserEndorsement.questions.destroyById() instead.
        "prototype$__destroyById__questions": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/endorserEndorsements/:id/questions/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use EndorserEndorsement.questions.updateById() instead.
        "prototype$__updateById__questions": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/endorserEndorsements/:id/questions/:fk",
          method: "PUT"
        },

        // INTERNAL. Use EndorserEndorsement.endorsets() instead.
        "prototype$__get__endorsets": {
          url: urlBase + "/endorserEndorsements/:id/endorsets",
          method: "GET"
        },

        // INTERNAL. Use EndorserEndorsement.endorsets.create() instead.
        "prototype$__create__endorsets": {
          url: urlBase + "/endorserEndorsements/:id/endorsets",
          method: "POST"
        },

        // INTERNAL. Use EndorserEndorsement.endorsets.update() instead.
        "prototype$__update__endorsets": {
          url: urlBase + "/endorserEndorsements/:id/endorsets",
          method: "PUT"
        },

        // INTERNAL. Use EndorserEndorsement.endorsets.destroy() instead.
        "prototype$__destroy__endorsets": {
          url: urlBase + "/endorserEndorsements/:id/endorsets",
          method: "DELETE"
        },

        // INTERNAL. Use EndorserEndorsement.questions() instead.
        "prototype$__get__questions": {
          isArray: true,
          url: urlBase + "/endorserEndorsements/:id/questions",
          method: "GET"
        },

        // INTERNAL. Use EndorserEndorsement.questions.create() instead.
        "prototype$__create__questions": {
          url: urlBase + "/endorserEndorsements/:id/questions",
          method: "POST"
        },

        // INTERNAL. Use EndorserEndorsement.questions.destroyAll() instead.
        "prototype$__delete__questions": {
          url: urlBase + "/endorserEndorsements/:id/questions",
          method: "DELETE"
        },

        // INTERNAL. Use EndorserEndorsement.questions.count() instead.
        "prototype$__count__questions": {
          url: urlBase + "/endorserEndorsements/:id/questions/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.EndorserEndorsement#create
         * @methodOf lbServices.EndorserEndorsement
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorserEndorsement` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/endorserEndorsements",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.EndorserEndorsement#createMany
         * @methodOf lbServices.EndorserEndorsement
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorserEndorsement` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/endorserEndorsements",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.EndorserEndorsement#upsert
         * @methodOf lbServices.EndorserEndorsement
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorserEndorsement` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/endorserEndorsements",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.EndorserEndorsement#exists
         * @methodOf lbServices.EndorserEndorsement
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/endorserEndorsements/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.EndorserEndorsement#findById
         * @methodOf lbServices.EndorserEndorsement
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorserEndorsement` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/endorserEndorsements/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.EndorserEndorsement#find
         * @methodOf lbServices.EndorserEndorsement
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorserEndorsement` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/endorserEndorsements",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.EndorserEndorsement#findOne
         * @methodOf lbServices.EndorserEndorsement
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorserEndorsement` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/endorserEndorsements/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.EndorserEndorsement#updateAll
         * @methodOf lbServices.EndorserEndorsement
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "updateAll": {
          url: urlBase + "/endorserEndorsements/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.EndorserEndorsement#deleteById
         * @methodOf lbServices.EndorserEndorsement
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "deleteById": {
          url: urlBase + "/endorserEndorsements/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.EndorserEndorsement#count
         * @methodOf lbServices.EndorserEndorsement
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/endorserEndorsements/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.EndorserEndorsement#prototype$updateAttributes
         * @methodOf lbServices.EndorserEndorsement
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorserEndorsement` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/endorserEndorsements/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.EndorserEndorsement#createChangeStream
         * @methodOf lbServices.EndorserEndorsement
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/endorserEndorsements/change-stream",
          method: "POST"
        },

        // INTERNAL. Use UserDetail.endorserEndorsements.findById() instead.
        "::findById::userDetail::endorserEndorsements": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/endorserEndorsements/:fk",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.endorserEndorsements.destroyById() instead.
        "::destroyById::userDetail::endorserEndorsements": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/endorserEndorsements/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use UserDetail.endorserEndorsements.updateById() instead.
        "::updateById::userDetail::endorserEndorsements": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/endorserEndorsements/:fk",
          method: "PUT"
        },

        // INTERNAL. Use UserDetail.endorserEndorsements() instead.
        "::get::userDetail::endorserEndorsements": {
          isArray: true,
          url: urlBase + "/userDetails/:id/endorserEndorsements",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.endorserEndorsements.create() instead.
        "::create::userDetail::endorserEndorsements": {
          url: urlBase + "/userDetails/:id/endorserEndorsements",
          method: "POST"
        },

        // INTERNAL. Use UserDetail.endorserEndorsements.createMany() instead.
        "::createMany::userDetail::endorserEndorsements": {
          isArray: true,
          url: urlBase + "/userDetails/:id/endorserEndorsements",
          method: "POST"
        },

        // INTERNAL. Use UserDetail.endorserEndorsements.destroyAll() instead.
        "::delete::userDetail::endorserEndorsements": {
          url: urlBase + "/userDetails/:id/endorserEndorsements",
          method: "DELETE"
        },

        // INTERNAL. Use UserDetail.endorserEndorsements.count() instead.
        "::count::userDetail::endorserEndorsements": {
          url: urlBase + "/userDetails/:id/endorserEndorsements/count",
          method: "GET"
        },

        // INTERNAL. Use UserProfile.endorserEndorsements.findById() instead.
        "::findById::userProfile::endorserEndorsements": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/profiles/:id/endorserEndorsements/:fk",
          method: "GET"
        },

        // INTERNAL. Use UserProfile.endorserEndorsements.destroyById() instead.
        "::destroyById::userProfile::endorserEndorsements": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/profiles/:id/endorserEndorsements/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use UserProfile.endorserEndorsements.updateById() instead.
        "::updateById::userProfile::endorserEndorsements": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/profiles/:id/endorserEndorsements/:fk",
          method: "PUT"
        },

        // INTERNAL. Use UserProfile.endorserEndorsements() instead.
        "::get::userProfile::endorserEndorsements": {
          isArray: true,
          url: urlBase + "/profiles/:id/endorserEndorsements",
          method: "GET"
        },

        // INTERNAL. Use UserProfile.endorserEndorsements.create() instead.
        "::create::userProfile::endorserEndorsements": {
          url: urlBase + "/profiles/:id/endorserEndorsements",
          method: "POST"
        },

        // INTERNAL. Use UserProfile.endorserEndorsements.createMany() instead.
        "::createMany::userProfile::endorserEndorsements": {
          isArray: true,
          url: urlBase + "/profiles/:id/endorserEndorsements",
          method: "POST"
        },

        // INTERNAL. Use UserProfile.endorserEndorsements.destroyAll() instead.
        "::delete::userProfile::endorserEndorsements": {
          url: urlBase + "/profiles/:id/endorserEndorsements",
          method: "DELETE"
        },

        // INTERNAL. Use UserProfile.endorserEndorsements.count() instead.
        "::count::userProfile::endorserEndorsements": {
          url: urlBase + "/profiles/:id/endorserEndorsements/count",
          method: "GET"
        },

        // INTERNAL. Use Endorsement.endorserEndorsements.findById() instead.
        "::findById::endorsement::endorserEndorsements": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/endorsements/:id/endorserEndorsements/:fk",
          method: "GET"
        },

        // INTERNAL. Use Endorsement.endorserEndorsements.destroyById() instead.
        "::destroyById::endorsement::endorserEndorsements": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/endorsements/:id/endorserEndorsements/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Endorsement.endorserEndorsements.updateById() instead.
        "::updateById::endorsement::endorserEndorsements": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/endorsements/:id/endorserEndorsements/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Endorsement.endorserEndorsements() instead.
        "::get::endorsement::endorserEndorsements": {
          isArray: true,
          url: urlBase + "/endorsements/:id/endorserEndorsements",
          method: "GET"
        },

        // INTERNAL. Use Endorsement.endorserEndorsements.create() instead.
        "::create::endorsement::endorserEndorsements": {
          url: urlBase + "/endorsements/:id/endorserEndorsements",
          method: "POST"
        },

        // INTERNAL. Use Endorsement.endorserEndorsements.createMany() instead.
        "::createMany::endorsement::endorserEndorsements": {
          isArray: true,
          url: urlBase + "/endorsements/:id/endorserEndorsements",
          method: "POST"
        },

        // INTERNAL. Use Endorsement.endorserEndorsements.destroyAll() instead.
        "::delete::endorsement::endorserEndorsements": {
          url: urlBase + "/endorsements/:id/endorserEndorsements",
          method: "DELETE"
        },

        // INTERNAL. Use Endorsement.endorserEndorsements.count() instead.
        "::count::endorsement::endorserEndorsements": {
          url: urlBase + "/endorsements/:id/endorserEndorsements/count",
          method: "GET"
        },

        // INTERNAL. Use Question.endorserEndorsement() instead.
        "::get::question::endorserEndorsement": {
          url: urlBase + "/questions/:id/endorserEndorsement",
          method: "GET"
        },

        // INTERNAL. Use Endorset.endorserEndorsement() instead.
        "::get::endorset::endorserEndorsement": {
          url: urlBase + "/endorsets/:id/endorserEndorsement",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.EndorserEndorsement#updateOrCreate
         * @methodOf lbServices.EndorserEndorsement
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorserEndorsement` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.EndorserEndorsement#update
         * @methodOf lbServices.EndorserEndorsement
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.EndorserEndorsement#destroyById
         * @methodOf lbServices.EndorserEndorsement
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.EndorserEndorsement#removeById
         * @methodOf lbServices.EndorserEndorsement
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.EndorserEndorsement#modelName
    * @propertyOf lbServices.EndorserEndorsement
    * @description
    * The name of the model represented by this $resource,
    * i.e. `EndorserEndorsement`.
    */
    R.modelName = "EndorserEndorsement";


        /**
         * @ngdoc method
         * @name lbServices.EndorserEndorsement#endorsement
         * @methodOf lbServices.EndorserEndorsement
         *
         * @description
         *
         * Fetches belongsTo relation endorsement.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Endorsement` object.)
         * </em>
         */
        R.endorsement = function() {
          var TargetResource = $injector.get("Endorsement");
          var action = TargetResource["::get::endorserEndorsement::endorsement"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.EndorserEndorsement#userDetail
         * @methodOf lbServices.EndorserEndorsement
         *
         * @description
         *
         * Fetches belongsTo relation userDetail.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserDetail` object.)
         * </em>
         */
        R.userDetail = function() {
          var TargetResource = $injector.get("UserDetail");
          var action = TargetResource["::get::endorserEndorsement::userDetail"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.EndorserEndorsement#userProfile
         * @methodOf lbServices.EndorserEndorsement
         *
         * @description
         *
         * Fetches belongsTo relation userProfile.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserProfile` object.)
         * </em>
         */
        R.userProfile = function() {
          var TargetResource = $injector.get("UserProfile");
          var action = TargetResource["::get::endorserEndorsement::userProfile"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.EndorserEndorsement.questions
     * @header lbServices.EndorserEndorsement.questions
     * @object
     * @description
     *
     * The object `EndorserEndorsement.questions` groups methods
     * manipulating `Question` instances related to `EndorserEndorsement`.
     *
     * Call {@link lbServices.EndorserEndorsement#questions EndorserEndorsement.questions()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.EndorserEndorsement#questions
         * @methodOf lbServices.EndorserEndorsement
         *
         * @description
         *
         * Queries questions of endorserEndorsement.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Question` object.)
         * </em>
         */
        R.questions = function() {
          var TargetResource = $injector.get("Question");
          var action = TargetResource["::get::endorserEndorsement::questions"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.EndorserEndorsement.questions#count
         * @methodOf lbServices.EndorserEndorsement.questions
         *
         * @description
         *
         * Counts questions of endorserEndorsement.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.questions.count = function() {
          var TargetResource = $injector.get("Question");
          var action = TargetResource["::count::endorserEndorsement::questions"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.EndorserEndorsement.questions#create
         * @methodOf lbServices.EndorserEndorsement.questions
         *
         * @description
         *
         * Creates a new instance in questions of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Question` object.)
         * </em>
         */
        R.questions.create = function() {
          var TargetResource = $injector.get("Question");
          var action = TargetResource["::create::endorserEndorsement::questions"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.EndorserEndorsement.questions#createMany
         * @methodOf lbServices.EndorserEndorsement.questions
         *
         * @description
         *
         * Creates a new instance in questions of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Question` object.)
         * </em>
         */
        R.questions.createMany = function() {
          var TargetResource = $injector.get("Question");
          var action = TargetResource["::createMany::endorserEndorsement::questions"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.EndorserEndorsement.questions#destroyAll
         * @methodOf lbServices.EndorserEndorsement.questions
         *
         * @description
         *
         * Deletes all questions of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.questions.destroyAll = function() {
          var TargetResource = $injector.get("Question");
          var action = TargetResource["::delete::endorserEndorsement::questions"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.EndorserEndorsement.questions#destroyById
         * @methodOf lbServices.EndorserEndorsement.questions
         *
         * @description
         *
         * Delete a related item by id for questions.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for questions
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.questions.destroyById = function() {
          var TargetResource = $injector.get("Question");
          var action = TargetResource["::destroyById::endorserEndorsement::questions"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.EndorserEndorsement.questions#findById
         * @methodOf lbServices.EndorserEndorsement.questions
         *
         * @description
         *
         * Find a related item by id for questions.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for questions
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Question` object.)
         * </em>
         */
        R.questions.findById = function() {
          var TargetResource = $injector.get("Question");
          var action = TargetResource["::findById::endorserEndorsement::questions"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.EndorserEndorsement.questions#updateById
         * @methodOf lbServices.EndorserEndorsement.questions
         *
         * @description
         *
         * Update a related item by id for questions.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for questions
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Question` object.)
         * </em>
         */
        R.questions.updateById = function() {
          var TargetResource = $injector.get("Question");
          var action = TargetResource["::updateById::endorserEndorsement::questions"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.EndorserEndorsement.endorsets
     * @header lbServices.EndorserEndorsement.endorsets
     * @object
     * @description
     *
     * The object `EndorserEndorsement.endorsets` groups methods
     * manipulating `Endorset` instances related to `EndorserEndorsement`.
     *
     * Call {@link lbServices.EndorserEndorsement#endorsets EndorserEndorsement.endorsets()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.EndorserEndorsement#endorsets
         * @methodOf lbServices.EndorserEndorsement
         *
         * @description
         *
         * Fetches hasOne relation endorsets.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Endorset` object.)
         * </em>
         */
        R.endorsets = function() {
          var TargetResource = $injector.get("Endorset");
          var action = TargetResource["::get::endorserEndorsement::endorsets"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.EndorserEndorsement.endorsets#create
         * @methodOf lbServices.EndorserEndorsement.endorsets
         *
         * @description
         *
         * Creates a new instance in endorsets of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Endorset` object.)
         * </em>
         */
        R.endorsets.create = function() {
          var TargetResource = $injector.get("Endorset");
          var action = TargetResource["::create::endorserEndorsement::endorsets"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.EndorserEndorsement.endorsets#createMany
         * @methodOf lbServices.EndorserEndorsement.endorsets
         *
         * @description
         *
         * Creates a new instance in endorsets of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Endorset` object.)
         * </em>
         */
        R.endorsets.createMany = function() {
          var TargetResource = $injector.get("Endorset");
          var action = TargetResource["::createMany::endorserEndorsement::endorsets"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.EndorserEndorsement.endorsets#destroy
         * @methodOf lbServices.EndorserEndorsement.endorsets
         *
         * @description
         *
         * Deletes endorsets of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.endorsets.destroy = function() {
          var TargetResource = $injector.get("Endorset");
          var action = TargetResource["::destroy::endorserEndorsement::endorsets"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.EndorserEndorsement.endorsets#update
         * @methodOf lbServices.EndorserEndorsement.endorsets
         *
         * @description
         *
         * Update endorsets of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Endorset` object.)
         * </em>
         */
        R.endorsets.update = function() {
          var TargetResource = $injector.get("Endorset");
          var action = TargetResource["::update::endorserEndorsement::endorsets"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.CompanyRequest
 * @header lbServices.CompanyRequest
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `CompanyRequest` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "CompanyRequest",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/companyRequests/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use CompanyRequest.userDetail() instead.
        "prototype$__get__userDetail": {
          url: urlBase + "/companyRequests/:id/userDetail",
          method: "GET"
        },

        // INTERNAL. Use CompanyRequest.professionalUser() instead.
        "prototype$__get__professionalUser": {
          url: urlBase + "/companyRequests/:id/professionalUser",
          method: "GET"
        },

        // INTERNAL. Use CompanyRequest.endorsetSents.findById() instead.
        "prototype$__findById__endorsetSents": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/companyRequests/:id/endorsetSents/:fk",
          method: "GET"
        },

        // INTERNAL. Use CompanyRequest.endorsetSents.destroyById() instead.
        "prototype$__destroyById__endorsetSents": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/companyRequests/:id/endorsetSents/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use CompanyRequest.endorsetSents.updateById() instead.
        "prototype$__updateById__endorsetSents": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/companyRequests/:id/endorsetSents/:fk",
          method: "PUT"
        },

        // INTERNAL. Use CompanyRequest.endorsetSents() instead.
        "prototype$__get__endorsetSents": {
          isArray: true,
          url: urlBase + "/companyRequests/:id/endorsetSents",
          method: "GET"
        },

        // INTERNAL. Use CompanyRequest.endorsetSents.create() instead.
        "prototype$__create__endorsetSents": {
          url: urlBase + "/companyRequests/:id/endorsetSents",
          method: "POST"
        },

        // INTERNAL. Use CompanyRequest.endorsetSents.destroyAll() instead.
        "prototype$__delete__endorsetSents": {
          url: urlBase + "/companyRequests/:id/endorsetSents",
          method: "DELETE"
        },

        // INTERNAL. Use CompanyRequest.endorsetSents.count() instead.
        "prototype$__count__endorsetSents": {
          url: urlBase + "/companyRequests/:id/endorsetSents/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.CompanyRequest#create
         * @methodOf lbServices.CompanyRequest
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `CompanyRequest` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/companyRequests",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.CompanyRequest#createMany
         * @methodOf lbServices.CompanyRequest
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `CompanyRequest` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/companyRequests",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.CompanyRequest#upsert
         * @methodOf lbServices.CompanyRequest
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `CompanyRequest` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/companyRequests",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.CompanyRequest#exists
         * @methodOf lbServices.CompanyRequest
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/companyRequests/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.CompanyRequest#findById
         * @methodOf lbServices.CompanyRequest
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `CompanyRequest` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/companyRequests/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.CompanyRequest#find
         * @methodOf lbServices.CompanyRequest
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `CompanyRequest` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/companyRequests",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.CompanyRequest#findOne
         * @methodOf lbServices.CompanyRequest
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `CompanyRequest` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/companyRequests/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.CompanyRequest#updateAll
         * @methodOf lbServices.CompanyRequest
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "updateAll": {
          url: urlBase + "/companyRequests/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.CompanyRequest#deleteById
         * @methodOf lbServices.CompanyRequest
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "deleteById": {
          url: urlBase + "/companyRequests/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.CompanyRequest#count
         * @methodOf lbServices.CompanyRequest
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/companyRequests/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.CompanyRequest#prototype$updateAttributes
         * @methodOf lbServices.CompanyRequest
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `CompanyRequest` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/companyRequests/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.CompanyRequest#createChangeStream
         * @methodOf lbServices.CompanyRequest
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/companyRequests/change-stream",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.CompanyRequest#updateProfessionalUserId
         * @methodOf lbServices.CompanyRequest
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `msg` – `{string=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `greeting` – `{string=}` - 
         */
        "updateProfessionalUserId": {
          url: urlBase + "/companyRequests/updateProfessionalUserId",
          method: "POST"
        },

        // INTERNAL. Use UserDetail.companyRequests.findById() instead.
        "::findById::userDetail::companyRequests": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/companyRequests/:fk",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.companyRequests.destroyById() instead.
        "::destroyById::userDetail::companyRequests": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/companyRequests/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use UserDetail.companyRequests.updateById() instead.
        "::updateById::userDetail::companyRequests": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/companyRequests/:fk",
          method: "PUT"
        },

        // INTERNAL. Use UserDetail.companyRequests() instead.
        "::get::userDetail::companyRequests": {
          isArray: true,
          url: urlBase + "/userDetails/:id/companyRequests",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.companyRequests.create() instead.
        "::create::userDetail::companyRequests": {
          url: urlBase + "/userDetails/:id/companyRequests",
          method: "POST"
        },

        // INTERNAL. Use UserDetail.companyRequests.createMany() instead.
        "::createMany::userDetail::companyRequests": {
          isArray: true,
          url: urlBase + "/userDetails/:id/companyRequests",
          method: "POST"
        },

        // INTERNAL. Use UserDetail.companyRequests.destroyAll() instead.
        "::delete::userDetail::companyRequests": {
          url: urlBase + "/userDetails/:id/companyRequests",
          method: "DELETE"
        },

        // INTERNAL. Use UserDetail.companyRequests.count() instead.
        "::count::userDetail::companyRequests": {
          url: urlBase + "/userDetails/:id/companyRequests/count",
          method: "GET"
        },

        // INTERNAL. Use EndorsetSent.companyRequest() instead.
        "::get::endorsetSent::companyRequest": {
          url: urlBase + "/endorsetSents/:id/companyRequest",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.CompanyRequest#updateOrCreate
         * @methodOf lbServices.CompanyRequest
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `CompanyRequest` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.CompanyRequest#update
         * @methodOf lbServices.CompanyRequest
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.CompanyRequest#destroyById
         * @methodOf lbServices.CompanyRequest
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.CompanyRequest#removeById
         * @methodOf lbServices.CompanyRequest
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.CompanyRequest#modelName
    * @propertyOf lbServices.CompanyRequest
    * @description
    * The name of the model represented by this $resource,
    * i.e. `CompanyRequest`.
    */
    R.modelName = "CompanyRequest";


        /**
         * @ngdoc method
         * @name lbServices.CompanyRequest#userDetail
         * @methodOf lbServices.CompanyRequest
         *
         * @description
         *
         * Fetches belongsTo relation userDetail.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserDetail` object.)
         * </em>
         */
        R.userDetail = function() {
          var TargetResource = $injector.get("UserDetail");
          var action = TargetResource["::get::companyRequest::userDetail"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.CompanyRequest#professionalUser
         * @methodOf lbServices.CompanyRequest
         *
         * @description
         *
         * Fetches belongsTo relation professionalUser.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserDetail` object.)
         * </em>
         */
        R.professionalUser = function() {
          var TargetResource = $injector.get("UserDetail");
          var action = TargetResource["::get::companyRequest::professionalUser"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.CompanyRequest.endorsetSents
     * @header lbServices.CompanyRequest.endorsetSents
     * @object
     * @description
     *
     * The object `CompanyRequest.endorsetSents` groups methods
     * manipulating `EndorsetSent` instances related to `CompanyRequest`.
     *
     * Call {@link lbServices.CompanyRequest#endorsetSents CompanyRequest.endorsetSents()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.CompanyRequest#endorsetSents
         * @methodOf lbServices.CompanyRequest
         *
         * @description
         *
         * Queries endorsetSents of companyRequest.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsetSent` object.)
         * </em>
         */
        R.endorsetSents = function() {
          var TargetResource = $injector.get("EndorsetSent");
          var action = TargetResource["::get::companyRequest::endorsetSents"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.CompanyRequest.endorsetSents#count
         * @methodOf lbServices.CompanyRequest.endorsetSents
         *
         * @description
         *
         * Counts endorsetSents of companyRequest.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.endorsetSents.count = function() {
          var TargetResource = $injector.get("EndorsetSent");
          var action = TargetResource["::count::companyRequest::endorsetSents"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.CompanyRequest.endorsetSents#create
         * @methodOf lbServices.CompanyRequest.endorsetSents
         *
         * @description
         *
         * Creates a new instance in endorsetSents of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsetSent` object.)
         * </em>
         */
        R.endorsetSents.create = function() {
          var TargetResource = $injector.get("EndorsetSent");
          var action = TargetResource["::create::companyRequest::endorsetSents"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.CompanyRequest.endorsetSents#createMany
         * @methodOf lbServices.CompanyRequest.endorsetSents
         *
         * @description
         *
         * Creates a new instance in endorsetSents of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsetSent` object.)
         * </em>
         */
        R.endorsetSents.createMany = function() {
          var TargetResource = $injector.get("EndorsetSent");
          var action = TargetResource["::createMany::companyRequest::endorsetSents"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.CompanyRequest.endorsetSents#destroyAll
         * @methodOf lbServices.CompanyRequest.endorsetSents
         *
         * @description
         *
         * Deletes all endorsetSents of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.endorsetSents.destroyAll = function() {
          var TargetResource = $injector.get("EndorsetSent");
          var action = TargetResource["::delete::companyRequest::endorsetSents"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.CompanyRequest.endorsetSents#destroyById
         * @methodOf lbServices.CompanyRequest.endorsetSents
         *
         * @description
         *
         * Delete a related item by id for endorsetSents.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for endorsetSents
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.endorsetSents.destroyById = function() {
          var TargetResource = $injector.get("EndorsetSent");
          var action = TargetResource["::destroyById::companyRequest::endorsetSents"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.CompanyRequest.endorsetSents#findById
         * @methodOf lbServices.CompanyRequest.endorsetSents
         *
         * @description
         *
         * Find a related item by id for endorsetSents.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for endorsetSents
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsetSent` object.)
         * </em>
         */
        R.endorsetSents.findById = function() {
          var TargetResource = $injector.get("EndorsetSent");
          var action = TargetResource["::findById::companyRequest::endorsetSents"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.CompanyRequest.endorsetSents#updateById
         * @methodOf lbServices.CompanyRequest.endorsetSents
         *
         * @description
         *
         * Update a related item by id for endorsetSents.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for endorsetSents
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsetSent` object.)
         * </em>
         */
        R.endorsetSents.updateById = function() {
          var TargetResource = $injector.get("EndorsetSent");
          var action = TargetResource["::updateById::companyRequest::endorsetSents"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.EndorsetSent
 * @header lbServices.EndorsetSent
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `EndorsetSent` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "EndorsetSent",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/endorsetSents/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use EndorsetSent.userDetail() instead.
        "prototype$__get__userDetail": {
          url: urlBase + "/endorsetSents/:id/userDetail",
          method: "GET"
        },

        // INTERNAL. Use EndorsetSent.userProfile() instead.
        "prototype$__get__userProfile": {
          url: urlBase + "/endorsetSents/:id/userProfile",
          method: "GET"
        },

        // INTERNAL. Use EndorsetSent.companyUser() instead.
        "prototype$__get__companyUser": {
          url: urlBase + "/endorsetSents/:id/companyUser",
          method: "GET"
        },

        // INTERNAL. Use EndorsetSent.companyRequest() instead.
        "prototype$__get__companyRequest": {
          url: urlBase + "/endorsetSents/:id/companyRequest",
          method: "GET"
        },

        // INTERNAL. Use EndorsetSent.endorsetSentId.findById() instead.
        "prototype$__findById__endorsetSentId": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/endorsetSents/:id/endorsetSentId/:fk",
          method: "GET"
        },

        // INTERNAL. Use EndorsetSent.endorsetSentId.destroyById() instead.
        "prototype$__destroyById__endorsetSentId": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/endorsetSents/:id/endorsetSentId/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use EndorsetSent.endorsetSentId.updateById() instead.
        "prototype$__updateById__endorsetSentId": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/endorsetSents/:id/endorsetSentId/:fk",
          method: "PUT"
        },

        // INTERNAL. Use EndorsetSent.endorsetSentId() instead.
        "prototype$__get__endorsetSentId": {
          isArray: true,
          url: urlBase + "/endorsetSents/:id/endorsetSentId",
          method: "GET"
        },

        // INTERNAL. Use EndorsetSent.endorsetSentId.create() instead.
        "prototype$__create__endorsetSentId": {
          url: urlBase + "/endorsetSents/:id/endorsetSentId",
          method: "POST"
        },

        // INTERNAL. Use EndorsetSent.endorsetSentId.destroyAll() instead.
        "prototype$__delete__endorsetSentId": {
          url: urlBase + "/endorsetSents/:id/endorsetSentId",
          method: "DELETE"
        },

        // INTERNAL. Use EndorsetSent.endorsetSentId.count() instead.
        "prototype$__count__endorsetSentId": {
          url: urlBase + "/endorsetSents/:id/endorsetSentId/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.EndorsetSent#create
         * @methodOf lbServices.EndorsetSent
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsetSent` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/endorsetSents",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.EndorsetSent#createMany
         * @methodOf lbServices.EndorsetSent
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsetSent` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/endorsetSents",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.EndorsetSent#upsert
         * @methodOf lbServices.EndorsetSent
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsetSent` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/endorsetSents",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.EndorsetSent#exists
         * @methodOf lbServices.EndorsetSent
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/endorsetSents/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.EndorsetSent#findById
         * @methodOf lbServices.EndorsetSent
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsetSent` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/endorsetSents/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.EndorsetSent#find
         * @methodOf lbServices.EndorsetSent
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsetSent` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/endorsetSents",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.EndorsetSent#findOne
         * @methodOf lbServices.EndorsetSent
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsetSent` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/endorsetSents/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.EndorsetSent#updateAll
         * @methodOf lbServices.EndorsetSent
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "updateAll": {
          url: urlBase + "/endorsetSents/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.EndorsetSent#deleteById
         * @methodOf lbServices.EndorsetSent
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "deleteById": {
          url: urlBase + "/endorsetSents/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.EndorsetSent#count
         * @methodOf lbServices.EndorsetSent
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/endorsetSents/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.EndorsetSent#prototype$updateAttributes
         * @methodOf lbServices.EndorsetSent
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsetSent` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/endorsetSents/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.EndorsetSent#createChangeStream
         * @methodOf lbServices.EndorsetSent
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/endorsetSents/change-stream",
          method: "POST"
        },

        // INTERNAL. Use UserDetail.endorsetSents.findById() instead.
        "::findById::userDetail::endorsetSents": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/endorsetSents/:fk",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.endorsetSents.destroyById() instead.
        "::destroyById::userDetail::endorsetSents": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/endorsetSents/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use UserDetail.endorsetSents.updateById() instead.
        "::updateById::userDetail::endorsetSents": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/endorsetSents/:fk",
          method: "PUT"
        },

        // INTERNAL. Use UserDetail.endorsetReceiveds.findById() instead.
        "::findById::userDetail::endorsetReceiveds": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/endorsetReceiveds/:fk",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.endorsetReceiveds.destroyById() instead.
        "::destroyById::userDetail::endorsetReceiveds": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/endorsetReceiveds/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use UserDetail.endorsetReceiveds.updateById() instead.
        "::updateById::userDetail::endorsetReceiveds": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/endorsetReceiveds/:fk",
          method: "PUT"
        },

        // INTERNAL. Use UserDetail.endorsetSents() instead.
        "::get::userDetail::endorsetSents": {
          isArray: true,
          url: urlBase + "/userDetails/:id/endorsetSents",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.endorsetSents.create() instead.
        "::create::userDetail::endorsetSents": {
          url: urlBase + "/userDetails/:id/endorsetSents",
          method: "POST"
        },

        // INTERNAL. Use UserDetail.endorsetSents.createMany() instead.
        "::createMany::userDetail::endorsetSents": {
          isArray: true,
          url: urlBase + "/userDetails/:id/endorsetSents",
          method: "POST"
        },

        // INTERNAL. Use UserDetail.endorsetSents.destroyAll() instead.
        "::delete::userDetail::endorsetSents": {
          url: urlBase + "/userDetails/:id/endorsetSents",
          method: "DELETE"
        },

        // INTERNAL. Use UserDetail.endorsetSents.count() instead.
        "::count::userDetail::endorsetSents": {
          url: urlBase + "/userDetails/:id/endorsetSents/count",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.endorsetReceiveds() instead.
        "::get::userDetail::endorsetReceiveds": {
          isArray: true,
          url: urlBase + "/userDetails/:id/endorsetReceiveds",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.endorsetReceiveds.create() instead.
        "::create::userDetail::endorsetReceiveds": {
          url: urlBase + "/userDetails/:id/endorsetReceiveds",
          method: "POST"
        },

        // INTERNAL. Use UserDetail.endorsetReceiveds.createMany() instead.
        "::createMany::userDetail::endorsetReceiveds": {
          isArray: true,
          url: urlBase + "/userDetails/:id/endorsetReceiveds",
          method: "POST"
        },

        // INTERNAL. Use UserDetail.endorsetReceiveds.destroyAll() instead.
        "::delete::userDetail::endorsetReceiveds": {
          url: urlBase + "/userDetails/:id/endorsetReceiveds",
          method: "DELETE"
        },

        // INTERNAL. Use UserDetail.endorsetReceiveds.count() instead.
        "::count::userDetail::endorsetReceiveds": {
          url: urlBase + "/userDetails/:id/endorsetReceiveds/count",
          method: "GET"
        },

        // INTERNAL. Use UserProfile.endorsetSents.findById() instead.
        "::findById::userProfile::endorsetSents": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/profiles/:id/endorsetSents/:fk",
          method: "GET"
        },

        // INTERNAL. Use UserProfile.endorsetSents.destroyById() instead.
        "::destroyById::userProfile::endorsetSents": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/profiles/:id/endorsetSents/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use UserProfile.endorsetSents.updateById() instead.
        "::updateById::userProfile::endorsetSents": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/profiles/:id/endorsetSents/:fk",
          method: "PUT"
        },

        // INTERNAL. Use UserProfile.endorsetSents() instead.
        "::get::userProfile::endorsetSents": {
          isArray: true,
          url: urlBase + "/profiles/:id/endorsetSents",
          method: "GET"
        },

        // INTERNAL. Use UserProfile.endorsetSents.create() instead.
        "::create::userProfile::endorsetSents": {
          url: urlBase + "/profiles/:id/endorsetSents",
          method: "POST"
        },

        // INTERNAL. Use UserProfile.endorsetSents.createMany() instead.
        "::createMany::userProfile::endorsetSents": {
          isArray: true,
          url: urlBase + "/profiles/:id/endorsetSents",
          method: "POST"
        },

        // INTERNAL. Use UserProfile.endorsetSents.destroyAll() instead.
        "::delete::userProfile::endorsetSents": {
          url: urlBase + "/profiles/:id/endorsetSents",
          method: "DELETE"
        },

        // INTERNAL. Use UserProfile.endorsetSents.count() instead.
        "::count::userProfile::endorsetSents": {
          url: urlBase + "/profiles/:id/endorsetSents/count",
          method: "GET"
        },

        // INTERNAL. Use CompanyRequest.endorsetSents.findById() instead.
        "::findById::companyRequest::endorsetSents": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/companyRequests/:id/endorsetSents/:fk",
          method: "GET"
        },

        // INTERNAL. Use CompanyRequest.endorsetSents.destroyById() instead.
        "::destroyById::companyRequest::endorsetSents": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/companyRequests/:id/endorsetSents/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use CompanyRequest.endorsetSents.updateById() instead.
        "::updateById::companyRequest::endorsetSents": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/companyRequests/:id/endorsetSents/:fk",
          method: "PUT"
        },

        // INTERNAL. Use CompanyRequest.endorsetSents() instead.
        "::get::companyRequest::endorsetSents": {
          isArray: true,
          url: urlBase + "/companyRequests/:id/endorsetSents",
          method: "GET"
        },

        // INTERNAL. Use CompanyRequest.endorsetSents.create() instead.
        "::create::companyRequest::endorsetSents": {
          url: urlBase + "/companyRequests/:id/endorsetSents",
          method: "POST"
        },

        // INTERNAL. Use CompanyRequest.endorsetSents.createMany() instead.
        "::createMany::companyRequest::endorsetSents": {
          isArray: true,
          url: urlBase + "/companyRequests/:id/endorsetSents",
          method: "POST"
        },

        // INTERNAL. Use CompanyRequest.endorsetSents.destroyAll() instead.
        "::delete::companyRequest::endorsetSents": {
          url: urlBase + "/companyRequests/:id/endorsetSents",
          method: "DELETE"
        },

        // INTERNAL. Use CompanyRequest.endorsetSents.count() instead.
        "::count::companyRequest::endorsetSents": {
          url: urlBase + "/companyRequests/:id/endorsetSents/count",
          method: "GET"
        },

        // INTERNAL. Use AssignEndorsets.endorsetSent() instead.
        "::get::assignEndorsets::endorsetSent": {
          url: urlBase + "/assignEndorsets/:id/endorsetSent",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.EndorsetSent#updateOrCreate
         * @methodOf lbServices.EndorsetSent
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsetSent` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.EndorsetSent#update
         * @methodOf lbServices.EndorsetSent
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.EndorsetSent#destroyById
         * @methodOf lbServices.EndorsetSent
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.EndorsetSent#removeById
         * @methodOf lbServices.EndorsetSent
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.EndorsetSent#modelName
    * @propertyOf lbServices.EndorsetSent
    * @description
    * The name of the model represented by this $resource,
    * i.e. `EndorsetSent`.
    */
    R.modelName = "EndorsetSent";


        /**
         * @ngdoc method
         * @name lbServices.EndorsetSent#userDetail
         * @methodOf lbServices.EndorsetSent
         *
         * @description
         *
         * Fetches belongsTo relation userDetail.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserDetail` object.)
         * </em>
         */
        R.userDetail = function() {
          var TargetResource = $injector.get("UserDetail");
          var action = TargetResource["::get::endorsetSent::userDetail"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.EndorsetSent#userProfile
         * @methodOf lbServices.EndorsetSent
         *
         * @description
         *
         * Fetches belongsTo relation userProfile.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserProfile` object.)
         * </em>
         */
        R.userProfile = function() {
          var TargetResource = $injector.get("UserProfile");
          var action = TargetResource["::get::endorsetSent::userProfile"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.EndorsetSent#companyUser
         * @methodOf lbServices.EndorsetSent
         *
         * @description
         *
         * Fetches belongsTo relation companyUser.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserDetail` object.)
         * </em>
         */
        R.companyUser = function() {
          var TargetResource = $injector.get("UserDetail");
          var action = TargetResource["::get::endorsetSent::companyUser"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.EndorsetSent#companyRequest
         * @methodOf lbServices.EndorsetSent
         *
         * @description
         *
         * Fetches belongsTo relation companyRequest.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `CompanyRequest` object.)
         * </em>
         */
        R.companyRequest = function() {
          var TargetResource = $injector.get("CompanyRequest");
          var action = TargetResource["::get::endorsetSent::companyRequest"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.EndorsetSent.endorsetSentId
     * @header lbServices.EndorsetSent.endorsetSentId
     * @object
     * @description
     *
     * The object `EndorsetSent.endorsetSentId` groups methods
     * manipulating `AssignEndorsets` instances related to `EndorsetSent`.
     *
     * Call {@link lbServices.EndorsetSent#endorsetSentId EndorsetSent.endorsetSentId()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.EndorsetSent#endorsetSentId
         * @methodOf lbServices.EndorsetSent
         *
         * @description
         *
         * Queries endorsetSentId of endorsetSent.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AssignEndorsets` object.)
         * </em>
         */
        R.endorsetSentId = function() {
          var TargetResource = $injector.get("AssignEndorsets");
          var action = TargetResource["::get::endorsetSent::endorsetSentId"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.EndorsetSent.endorsetSentId#count
         * @methodOf lbServices.EndorsetSent.endorsetSentId
         *
         * @description
         *
         * Counts endorsetSentId of endorsetSent.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.endorsetSentId.count = function() {
          var TargetResource = $injector.get("AssignEndorsets");
          var action = TargetResource["::count::endorsetSent::endorsetSentId"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.EndorsetSent.endorsetSentId#create
         * @methodOf lbServices.EndorsetSent.endorsetSentId
         *
         * @description
         *
         * Creates a new instance in endorsetSentId of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AssignEndorsets` object.)
         * </em>
         */
        R.endorsetSentId.create = function() {
          var TargetResource = $injector.get("AssignEndorsets");
          var action = TargetResource["::create::endorsetSent::endorsetSentId"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.EndorsetSent.endorsetSentId#createMany
         * @methodOf lbServices.EndorsetSent.endorsetSentId
         *
         * @description
         *
         * Creates a new instance in endorsetSentId of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AssignEndorsets` object.)
         * </em>
         */
        R.endorsetSentId.createMany = function() {
          var TargetResource = $injector.get("AssignEndorsets");
          var action = TargetResource["::createMany::endorsetSent::endorsetSentId"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.EndorsetSent.endorsetSentId#destroyAll
         * @methodOf lbServices.EndorsetSent.endorsetSentId
         *
         * @description
         *
         * Deletes all endorsetSentId of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.endorsetSentId.destroyAll = function() {
          var TargetResource = $injector.get("AssignEndorsets");
          var action = TargetResource["::delete::endorsetSent::endorsetSentId"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.EndorsetSent.endorsetSentId#destroyById
         * @methodOf lbServices.EndorsetSent.endorsetSentId
         *
         * @description
         *
         * Delete a related item by id for endorsetSentId.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for endorsetSentId
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.endorsetSentId.destroyById = function() {
          var TargetResource = $injector.get("AssignEndorsets");
          var action = TargetResource["::destroyById::endorsetSent::endorsetSentId"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.EndorsetSent.endorsetSentId#findById
         * @methodOf lbServices.EndorsetSent.endorsetSentId
         *
         * @description
         *
         * Find a related item by id for endorsetSentId.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for endorsetSentId
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AssignEndorsets` object.)
         * </em>
         */
        R.endorsetSentId.findById = function() {
          var TargetResource = $injector.get("AssignEndorsets");
          var action = TargetResource["::findById::endorsetSent::endorsetSentId"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.EndorsetSent.endorsetSentId#updateById
         * @methodOf lbServices.EndorsetSent.endorsetSentId
         *
         * @description
         *
         * Update a related item by id for endorsetSentId.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for endorsetSentId
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AssignEndorsets` object.)
         * </em>
         */
        R.endorsetSentId.updateById = function() {
          var TargetResource = $injector.get("AssignEndorsets");
          var action = TargetResource["::updateById::endorsetSent::endorsetSentId"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.CloudinaryImage
 * @header lbServices.CloudinaryImage
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `CloudinaryImage` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "CloudinaryImage",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/CloudinaryImages/:id",
      { 'id': '@id' },
      {

        /**
         * @ngdoc method
         * @name lbServices.CloudinaryImage#upload
         * @methodOf lbServices.CloudinaryImage
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `req` – `{object=}` - 
         *
         *  - `res` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `result` – `{object=}` - 
         */
        "upload": {
          url: urlBase + "/CloudinaryImages/upload",
          method: "POST"
        },
      }
    );




    /**
    * @ngdoc property
    * @name lbServices.CloudinaryImage#modelName
    * @propertyOf lbServices.CloudinaryImage
    * @description
    * The name of the model represented by this $resource,
    * i.e. `CloudinaryImage`.
    */
    R.modelName = "CloudinaryImage";


    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.Notification
 * @header lbServices.Notification
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Notification` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "Notification",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/notifications/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use Notification.userDetail() instead.
        "prototype$__get__userDetail": {
          url: urlBase + "/notifications/:id/userDetail",
          method: "GET"
        },

        // INTERNAL. Use Notification.createdByUser() instead.
        "prototype$__get__createdByUser": {
          url: urlBase + "/notifications/:id/createdByUser",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Notification#create
         * @methodOf lbServices.Notification
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Notification` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/notifications",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Notification#createMany
         * @methodOf lbServices.Notification
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Notification` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/notifications",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Notification#upsert
         * @methodOf lbServices.Notification
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Notification` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/notifications",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Notification#exists
         * @methodOf lbServices.Notification
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/notifications/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Notification#findById
         * @methodOf lbServices.Notification
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Notification` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/notifications/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Notification#find
         * @methodOf lbServices.Notification
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Notification` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/notifications",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Notification#findOne
         * @methodOf lbServices.Notification
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Notification` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/notifications/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Notification#updateAll
         * @methodOf lbServices.Notification
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "updateAll": {
          url: urlBase + "/notifications/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Notification#deleteById
         * @methodOf lbServices.Notification
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "deleteById": {
          url: urlBase + "/notifications/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Notification#count
         * @methodOf lbServices.Notification
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/notifications/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Notification#prototype$updateAttributes
         * @methodOf lbServices.Notification
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Notification` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/notifications/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Notification#createChangeStream
         * @methodOf lbServices.Notification
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/notifications/change-stream",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Notification#autoUpdate
         * @methodOf lbServices.Notification
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `msg` – `{string=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `greeting` – `{string=}` - 
         */
        "autoUpdate": {
          url: urlBase + "/notifications/autoUpdate",
          method: "POST"
        },

        // INTERNAL. Use UserDetail.notifications.findById() instead.
        "::findById::userDetail::notifications": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/notifications/:fk",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.notifications.destroyById() instead.
        "::destroyById::userDetail::notifications": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/notifications/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use UserDetail.notifications.updateById() instead.
        "::updateById::userDetail::notifications": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/notifications/:fk",
          method: "PUT"
        },

        // INTERNAL. Use UserDetail.notifications() instead.
        "::get::userDetail::notifications": {
          isArray: true,
          url: urlBase + "/userDetails/:id/notifications",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.notifications.create() instead.
        "::create::userDetail::notifications": {
          url: urlBase + "/userDetails/:id/notifications",
          method: "POST"
        },

        // INTERNAL. Use UserDetail.notifications.createMany() instead.
        "::createMany::userDetail::notifications": {
          isArray: true,
          url: urlBase + "/userDetails/:id/notifications",
          method: "POST"
        },

        // INTERNAL. Use UserDetail.notifications.destroyAll() instead.
        "::delete::userDetail::notifications": {
          url: urlBase + "/userDetails/:id/notifications",
          method: "DELETE"
        },

        // INTERNAL. Use UserDetail.notifications.count() instead.
        "::count::userDetail::notifications": {
          url: urlBase + "/userDetails/:id/notifications/count",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.Notification#updateOrCreate
         * @methodOf lbServices.Notification
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Notification` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.Notification#update
         * @methodOf lbServices.Notification
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.Notification#destroyById
         * @methodOf lbServices.Notification
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.Notification#removeById
         * @methodOf lbServices.Notification
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.Notification#modelName
    * @propertyOf lbServices.Notification
    * @description
    * The name of the model represented by this $resource,
    * i.e. `Notification`.
    */
    R.modelName = "Notification";


        /**
         * @ngdoc method
         * @name lbServices.Notification#userDetail
         * @methodOf lbServices.Notification
         *
         * @description
         *
         * Fetches belongsTo relation userDetail.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserDetail` object.)
         * </em>
         */
        R.userDetail = function() {
          var TargetResource = $injector.get("UserDetail");
          var action = TargetResource["::get::notification::userDetail"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Notification.createdByUser
     * @header lbServices.Notification.createdByUser
     * @object
     * @description
     *
     * The object `Notification.createdByUser` groups methods
     * manipulating `UserDetail` instances related to `Notification`.
     *
     * Call {@link lbServices.Notification#createdByUser Notification.createdByUser()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.Notification#createManydByUser
         * @methodOf lbServices.Notification
         *
         * @description
         *
         * Fetches belongsTo relation createdByUser.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserDetail` object.)
         * </em>
         */
        R.createManydByUser = function() {
          var TargetResource = $injector.get("UserDetail");
          var action = TargetResource["::get::notification::createManydByUser"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Notification#createdByUser
         * @methodOf lbServices.Notification
         *
         * @description
         *
         * Fetches belongsTo relation createdByUser.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserDetail` object.)
         * </em>
         */
        R.createdByUser = function() {
          var TargetResource = $injector.get("UserDetail");
          var action = TargetResource["::get::notification::createdByUser"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.InviteUser
 * @header lbServices.InviteUser
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `InviteUser` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "InviteUser",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/inviteUsers/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use InviteUser.adminUser() instead.
        "prototype$__get__adminUser": {
          url: urlBase + "/inviteUsers/:id/adminUser",
          method: "GET"
        },

        // INTERNAL. Use InviteUser.userDetail() instead.
        "prototype$__get__userDetail": {
          url: urlBase + "/inviteUsers/:id/userDetail",
          method: "GET"
        },

        // INTERNAL. Use InviteUser.assignEndorsets.findById() instead.
        "prototype$__findById__assignEndorsets": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/inviteUsers/:id/assignEndorsets/:fk",
          method: "GET"
        },

        // INTERNAL. Use InviteUser.assignEndorsets.destroyById() instead.
        "prototype$__destroyById__assignEndorsets": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/inviteUsers/:id/assignEndorsets/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use InviteUser.assignEndorsets.updateById() instead.
        "prototype$__updateById__assignEndorsets": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/inviteUsers/:id/assignEndorsets/:fk",
          method: "PUT"
        },

        // INTERNAL. Use InviteUser.assignEndorsets() instead.
        "prototype$__get__assignEndorsets": {
          isArray: true,
          url: urlBase + "/inviteUsers/:id/assignEndorsets",
          method: "GET"
        },

        // INTERNAL. Use InviteUser.assignEndorsets.create() instead.
        "prototype$__create__assignEndorsets": {
          url: urlBase + "/inviteUsers/:id/assignEndorsets",
          method: "POST"
        },

        // INTERNAL. Use InviteUser.assignEndorsets.destroyAll() instead.
        "prototype$__delete__assignEndorsets": {
          url: urlBase + "/inviteUsers/:id/assignEndorsets",
          method: "DELETE"
        },

        // INTERNAL. Use InviteUser.assignEndorsets.count() instead.
        "prototype$__count__assignEndorsets": {
          url: urlBase + "/inviteUsers/:id/assignEndorsets/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.InviteUser#create
         * @methodOf lbServices.InviteUser
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `InviteUser` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/inviteUsers",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.InviteUser#createMany
         * @methodOf lbServices.InviteUser
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `InviteUser` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/inviteUsers",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.InviteUser#upsert
         * @methodOf lbServices.InviteUser
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `InviteUser` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/inviteUsers",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.InviteUser#exists
         * @methodOf lbServices.InviteUser
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/inviteUsers/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.InviteUser#findById
         * @methodOf lbServices.InviteUser
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `InviteUser` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/inviteUsers/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.InviteUser#find
         * @methodOf lbServices.InviteUser
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `InviteUser` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/inviteUsers",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.InviteUser#findOne
         * @methodOf lbServices.InviteUser
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `InviteUser` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/inviteUsers/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.InviteUser#updateAll
         * @methodOf lbServices.InviteUser
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "updateAll": {
          url: urlBase + "/inviteUsers/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.InviteUser#deleteById
         * @methodOf lbServices.InviteUser
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "deleteById": {
          url: urlBase + "/inviteUsers/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.InviteUser#count
         * @methodOf lbServices.InviteUser
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/inviteUsers/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.InviteUser#prototype$updateAttributes
         * @methodOf lbServices.InviteUser
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `InviteUser` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/inviteUsers/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.InviteUser#createChangeStream
         * @methodOf lbServices.InviteUser
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/inviteUsers/change-stream",
          method: "POST"
        },

        // INTERNAL. Use UserDetail.invitedUsers.findById() instead.
        "::findById::userDetail::invitedUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/invitedUsers/:fk",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.invitedUsers.destroyById() instead.
        "::destroyById::userDetail::invitedUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/invitedUsers/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use UserDetail.invitedUsers.updateById() instead.
        "::updateById::userDetail::invitedUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/invitedUsers/:fk",
          method: "PUT"
        },

        // INTERNAL. Use UserDetail.invitations.findById() instead.
        "::findById::userDetail::invitations": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/invitations/:fk",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.invitations.destroyById() instead.
        "::destroyById::userDetail::invitations": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/invitations/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use UserDetail.invitations.updateById() instead.
        "::updateById::userDetail::invitations": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/invitations/:fk",
          method: "PUT"
        },

        // INTERNAL. Use UserDetail.invitedUsers() instead.
        "::get::userDetail::invitedUsers": {
          isArray: true,
          url: urlBase + "/userDetails/:id/invitedUsers",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.invitedUsers.create() instead.
        "::create::userDetail::invitedUsers": {
          url: urlBase + "/userDetails/:id/invitedUsers",
          method: "POST"
        },

        // INTERNAL. Use UserDetail.invitedUsers.createMany() instead.
        "::createMany::userDetail::invitedUsers": {
          isArray: true,
          url: urlBase + "/userDetails/:id/invitedUsers",
          method: "POST"
        },

        // INTERNAL. Use UserDetail.invitedUsers.destroyAll() instead.
        "::delete::userDetail::invitedUsers": {
          url: urlBase + "/userDetails/:id/invitedUsers",
          method: "DELETE"
        },

        // INTERNAL. Use UserDetail.invitedUsers.count() instead.
        "::count::userDetail::invitedUsers": {
          url: urlBase + "/userDetails/:id/invitedUsers/count",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.invitations() instead.
        "::get::userDetail::invitations": {
          isArray: true,
          url: urlBase + "/userDetails/:id/invitations",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.invitations.create() instead.
        "::create::userDetail::invitations": {
          url: urlBase + "/userDetails/:id/invitations",
          method: "POST"
        },

        // INTERNAL. Use UserDetail.invitations.createMany() instead.
        "::createMany::userDetail::invitations": {
          isArray: true,
          url: urlBase + "/userDetails/:id/invitations",
          method: "POST"
        },

        // INTERNAL. Use UserDetail.invitations.destroyAll() instead.
        "::delete::userDetail::invitations": {
          url: urlBase + "/userDetails/:id/invitations",
          method: "DELETE"
        },

        // INTERNAL. Use UserDetail.invitations.count() instead.
        "::count::userDetail::invitations": {
          url: urlBase + "/userDetails/:id/invitations/count",
          method: "GET"
        },

        // INTERNAL. Use AssignEndorsets.inviteUser() instead.
        "::get::assignEndorsets::inviteUser": {
          url: urlBase + "/assignEndorsets/:id/inviteUser",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.InviteUser#updateOrCreate
         * @methodOf lbServices.InviteUser
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `InviteUser` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.InviteUser#update
         * @methodOf lbServices.InviteUser
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.InviteUser#destroyById
         * @methodOf lbServices.InviteUser
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.InviteUser#removeById
         * @methodOf lbServices.InviteUser
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.InviteUser#modelName
    * @propertyOf lbServices.InviteUser
    * @description
    * The name of the model represented by this $resource,
    * i.e. `InviteUser`.
    */
    R.modelName = "InviteUser";


        /**
         * @ngdoc method
         * @name lbServices.InviteUser#adminUser
         * @methodOf lbServices.InviteUser
         *
         * @description
         *
         * Fetches belongsTo relation adminUser.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserDetail` object.)
         * </em>
         */
        R.adminUser = function() {
          var TargetResource = $injector.get("UserDetail");
          var action = TargetResource["::get::inviteUser::adminUser"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.InviteUser#userDetail
         * @methodOf lbServices.InviteUser
         *
         * @description
         *
         * Fetches belongsTo relation userDetail.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserDetail` object.)
         * </em>
         */
        R.userDetail = function() {
          var TargetResource = $injector.get("UserDetail");
          var action = TargetResource["::get::inviteUser::userDetail"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.InviteUser.assignEndorsets
     * @header lbServices.InviteUser.assignEndorsets
     * @object
     * @description
     *
     * The object `InviteUser.assignEndorsets` groups methods
     * manipulating `AssignEndorsets` instances related to `InviteUser`.
     *
     * Call {@link lbServices.InviteUser#assignEndorsets InviteUser.assignEndorsets()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.InviteUser#assignEndorsets
         * @methodOf lbServices.InviteUser
         *
         * @description
         *
         * Queries assignEndorsets of inviteUser.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AssignEndorsets` object.)
         * </em>
         */
        R.assignEndorsets = function() {
          var TargetResource = $injector.get("AssignEndorsets");
          var action = TargetResource["::get::inviteUser::assignEndorsets"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.InviteUser.assignEndorsets#count
         * @methodOf lbServices.InviteUser.assignEndorsets
         *
         * @description
         *
         * Counts assignEndorsets of inviteUser.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.assignEndorsets.count = function() {
          var TargetResource = $injector.get("AssignEndorsets");
          var action = TargetResource["::count::inviteUser::assignEndorsets"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.InviteUser.assignEndorsets#create
         * @methodOf lbServices.InviteUser.assignEndorsets
         *
         * @description
         *
         * Creates a new instance in assignEndorsets of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AssignEndorsets` object.)
         * </em>
         */
        R.assignEndorsets.create = function() {
          var TargetResource = $injector.get("AssignEndorsets");
          var action = TargetResource["::create::inviteUser::assignEndorsets"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.InviteUser.assignEndorsets#createMany
         * @methodOf lbServices.InviteUser.assignEndorsets
         *
         * @description
         *
         * Creates a new instance in assignEndorsets of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AssignEndorsets` object.)
         * </em>
         */
        R.assignEndorsets.createMany = function() {
          var TargetResource = $injector.get("AssignEndorsets");
          var action = TargetResource["::createMany::inviteUser::assignEndorsets"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.InviteUser.assignEndorsets#destroyAll
         * @methodOf lbServices.InviteUser.assignEndorsets
         *
         * @description
         *
         * Deletes all assignEndorsets of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.assignEndorsets.destroyAll = function() {
          var TargetResource = $injector.get("AssignEndorsets");
          var action = TargetResource["::delete::inviteUser::assignEndorsets"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.InviteUser.assignEndorsets#destroyById
         * @methodOf lbServices.InviteUser.assignEndorsets
         *
         * @description
         *
         * Delete a related item by id for assignEndorsets.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for assignEndorsets
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.assignEndorsets.destroyById = function() {
          var TargetResource = $injector.get("AssignEndorsets");
          var action = TargetResource["::destroyById::inviteUser::assignEndorsets"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.InviteUser.assignEndorsets#findById
         * @methodOf lbServices.InviteUser.assignEndorsets
         *
         * @description
         *
         * Find a related item by id for assignEndorsets.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for assignEndorsets
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AssignEndorsets` object.)
         * </em>
         */
        R.assignEndorsets.findById = function() {
          var TargetResource = $injector.get("AssignEndorsets");
          var action = TargetResource["::findById::inviteUser::assignEndorsets"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.InviteUser.assignEndorsets#updateById
         * @methodOf lbServices.InviteUser.assignEndorsets
         *
         * @description
         *
         * Update a related item by id for assignEndorsets.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for assignEndorsets
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AssignEndorsets` object.)
         * </em>
         */
        R.assignEndorsets.updateById = function() {
          var TargetResource = $injector.get("AssignEndorsets");
          var action = TargetResource["::updateById::inviteUser::assignEndorsets"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.AssignEndorsets
 * @header lbServices.AssignEndorsets
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `AssignEndorsets` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "AssignEndorsets",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/assignEndorsets/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use AssignEndorsets.userDetail() instead.
        "prototype$__get__userDetail": {
          url: urlBase + "/assignEndorsets/:id/userDetail",
          method: "GET"
        },

        // INTERNAL. Use AssignEndorsets.inviteUser() instead.
        "prototype$__get__inviteUser": {
          url: urlBase + "/assignEndorsets/:id/inviteUser",
          method: "GET"
        },

        // INTERNAL. Use AssignEndorsets.endorsetSent() instead.
        "prototype$__get__endorsetSent": {
          url: urlBase + "/assignEndorsets/:id/endorsetSent",
          method: "GET"
        },

        // INTERNAL. Use AssignEndorsets.companyUser() instead.
        "prototype$__get__companyUser": {
          url: urlBase + "/assignEndorsets/:id/companyUser",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.AssignEndorsets#create
         * @methodOf lbServices.AssignEndorsets
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AssignEndorsets` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/assignEndorsets",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.AssignEndorsets#createMany
         * @methodOf lbServices.AssignEndorsets
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AssignEndorsets` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/assignEndorsets",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.AssignEndorsets#upsert
         * @methodOf lbServices.AssignEndorsets
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AssignEndorsets` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/assignEndorsets",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.AssignEndorsets#exists
         * @methodOf lbServices.AssignEndorsets
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/assignEndorsets/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.AssignEndorsets#findById
         * @methodOf lbServices.AssignEndorsets
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AssignEndorsets` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/assignEndorsets/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.AssignEndorsets#find
         * @methodOf lbServices.AssignEndorsets
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AssignEndorsets` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/assignEndorsets",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.AssignEndorsets#findOne
         * @methodOf lbServices.AssignEndorsets
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AssignEndorsets` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/assignEndorsets/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.AssignEndorsets#updateAll
         * @methodOf lbServices.AssignEndorsets
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "updateAll": {
          url: urlBase + "/assignEndorsets/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.AssignEndorsets#deleteById
         * @methodOf lbServices.AssignEndorsets
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "deleteById": {
          url: urlBase + "/assignEndorsets/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.AssignEndorsets#count
         * @methodOf lbServices.AssignEndorsets
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/assignEndorsets/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.AssignEndorsets#prototype$updateAttributes
         * @methodOf lbServices.AssignEndorsets
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AssignEndorsets` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/assignEndorsets/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.AssignEndorsets#createChangeStream
         * @methodOf lbServices.AssignEndorsets
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/assignEndorsets/change-stream",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.AssignEndorsets#saveAssignments
         * @methodOf lbServices.AssignEndorsets
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `data` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `data` – `{object=}` - 
         */
        "saveAssignments": {
          url: urlBase + "/assignEndorsets/saveAssignments",
          method: "POST"
        },

        // INTERNAL. Use UserDetail.assignEndorsets.findById() instead.
        "::findById::userDetail::assignEndorsets": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/assignEndorsets/:fk",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.assignEndorsets.destroyById() instead.
        "::destroyById::userDetail::assignEndorsets": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/assignEndorsets/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use UserDetail.assignEndorsets.updateById() instead.
        "::updateById::userDetail::assignEndorsets": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/assignEndorsets/:fk",
          method: "PUT"
        },

        // INTERNAL. Use UserDetail.assignedEndorsets.findById() instead.
        "::findById::userDetail::assignedEndorsets": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/assignedEndorsets/:fk",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.assignedEndorsets.destroyById() instead.
        "::destroyById::userDetail::assignedEndorsets": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/assignedEndorsets/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use UserDetail.assignedEndorsets.updateById() instead.
        "::updateById::userDetail::assignedEndorsets": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/userDetails/:id/assignedEndorsets/:fk",
          method: "PUT"
        },

        // INTERNAL. Use UserDetail.assignEndorsets() instead.
        "::get::userDetail::assignEndorsets": {
          isArray: true,
          url: urlBase + "/userDetails/:id/assignEndorsets",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.assignEndorsets.create() instead.
        "::create::userDetail::assignEndorsets": {
          url: urlBase + "/userDetails/:id/assignEndorsets",
          method: "POST"
        },

        // INTERNAL. Use UserDetail.assignEndorsets.createMany() instead.
        "::createMany::userDetail::assignEndorsets": {
          isArray: true,
          url: urlBase + "/userDetails/:id/assignEndorsets",
          method: "POST"
        },

        // INTERNAL. Use UserDetail.assignEndorsets.destroyAll() instead.
        "::delete::userDetail::assignEndorsets": {
          url: urlBase + "/userDetails/:id/assignEndorsets",
          method: "DELETE"
        },

        // INTERNAL. Use UserDetail.assignEndorsets.count() instead.
        "::count::userDetail::assignEndorsets": {
          url: urlBase + "/userDetails/:id/assignEndorsets/count",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.assignedEndorsets() instead.
        "::get::userDetail::assignedEndorsets": {
          isArray: true,
          url: urlBase + "/userDetails/:id/assignedEndorsets",
          method: "GET"
        },

        // INTERNAL. Use UserDetail.assignedEndorsets.create() instead.
        "::create::userDetail::assignedEndorsets": {
          url: urlBase + "/userDetails/:id/assignedEndorsets",
          method: "POST"
        },

        // INTERNAL. Use UserDetail.assignedEndorsets.createMany() instead.
        "::createMany::userDetail::assignedEndorsets": {
          isArray: true,
          url: urlBase + "/userDetails/:id/assignedEndorsets",
          method: "POST"
        },

        // INTERNAL. Use UserDetail.assignedEndorsets.destroyAll() instead.
        "::delete::userDetail::assignedEndorsets": {
          url: urlBase + "/userDetails/:id/assignedEndorsets",
          method: "DELETE"
        },

        // INTERNAL. Use UserDetail.assignedEndorsets.count() instead.
        "::count::userDetail::assignedEndorsets": {
          url: urlBase + "/userDetails/:id/assignedEndorsets/count",
          method: "GET"
        },

        // INTERNAL. Use EndorsetSent.endorsetSentId.findById() instead.
        "::findById::endorsetSent::endorsetSentId": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/endorsetSents/:id/endorsetSentId/:fk",
          method: "GET"
        },

        // INTERNAL. Use EndorsetSent.endorsetSentId.destroyById() instead.
        "::destroyById::endorsetSent::endorsetSentId": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/endorsetSents/:id/endorsetSentId/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use EndorsetSent.endorsetSentId.updateById() instead.
        "::updateById::endorsetSent::endorsetSentId": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/endorsetSents/:id/endorsetSentId/:fk",
          method: "PUT"
        },

        // INTERNAL. Use EndorsetSent.endorsetSentId() instead.
        "::get::endorsetSent::endorsetSentId": {
          isArray: true,
          url: urlBase + "/endorsetSents/:id/endorsetSentId",
          method: "GET"
        },

        // INTERNAL. Use EndorsetSent.endorsetSentId.create() instead.
        "::create::endorsetSent::endorsetSentId": {
          url: urlBase + "/endorsetSents/:id/endorsetSentId",
          method: "POST"
        },

        // INTERNAL. Use EndorsetSent.endorsetSentId.createMany() instead.
        "::createMany::endorsetSent::endorsetSentId": {
          isArray: true,
          url: urlBase + "/endorsetSents/:id/endorsetSentId",
          method: "POST"
        },

        // INTERNAL. Use EndorsetSent.endorsetSentId.destroyAll() instead.
        "::delete::endorsetSent::endorsetSentId": {
          url: urlBase + "/endorsetSents/:id/endorsetSentId",
          method: "DELETE"
        },

        // INTERNAL. Use EndorsetSent.endorsetSentId.count() instead.
        "::count::endorsetSent::endorsetSentId": {
          url: urlBase + "/endorsetSents/:id/endorsetSentId/count",
          method: "GET"
        },

        // INTERNAL. Use InviteUser.assignEndorsets.findById() instead.
        "::findById::inviteUser::assignEndorsets": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/inviteUsers/:id/assignEndorsets/:fk",
          method: "GET"
        },

        // INTERNAL. Use InviteUser.assignEndorsets.destroyById() instead.
        "::destroyById::inviteUser::assignEndorsets": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/inviteUsers/:id/assignEndorsets/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use InviteUser.assignEndorsets.updateById() instead.
        "::updateById::inviteUser::assignEndorsets": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/inviteUsers/:id/assignEndorsets/:fk",
          method: "PUT"
        },

        // INTERNAL. Use InviteUser.assignEndorsets() instead.
        "::get::inviteUser::assignEndorsets": {
          isArray: true,
          url: urlBase + "/inviteUsers/:id/assignEndorsets",
          method: "GET"
        },

        // INTERNAL. Use InviteUser.assignEndorsets.create() instead.
        "::create::inviteUser::assignEndorsets": {
          url: urlBase + "/inviteUsers/:id/assignEndorsets",
          method: "POST"
        },

        // INTERNAL. Use InviteUser.assignEndorsets.createMany() instead.
        "::createMany::inviteUser::assignEndorsets": {
          isArray: true,
          url: urlBase + "/inviteUsers/:id/assignEndorsets",
          method: "POST"
        },

        // INTERNAL. Use InviteUser.assignEndorsets.destroyAll() instead.
        "::delete::inviteUser::assignEndorsets": {
          url: urlBase + "/inviteUsers/:id/assignEndorsets",
          method: "DELETE"
        },

        // INTERNAL. Use InviteUser.assignEndorsets.count() instead.
        "::count::inviteUser::assignEndorsets": {
          url: urlBase + "/inviteUsers/:id/assignEndorsets/count",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.AssignEndorsets#updateOrCreate
         * @methodOf lbServices.AssignEndorsets
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AssignEndorsets` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.AssignEndorsets#update
         * @methodOf lbServices.AssignEndorsets
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.AssignEndorsets#destroyById
         * @methodOf lbServices.AssignEndorsets
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.AssignEndorsets#removeById
         * @methodOf lbServices.AssignEndorsets
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.AssignEndorsets#modelName
    * @propertyOf lbServices.AssignEndorsets
    * @description
    * The name of the model represented by this $resource,
    * i.e. `AssignEndorsets`.
    */
    R.modelName = "AssignEndorsets";


        /**
         * @ngdoc method
         * @name lbServices.AssignEndorsets#userDetail
         * @methodOf lbServices.AssignEndorsets
         *
         * @description
         *
         * Fetches belongsTo relation userDetail.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserDetail` object.)
         * </em>
         */
        R.userDetail = function() {
          var TargetResource = $injector.get("UserDetail");
          var action = TargetResource["::get::assignEndorsets::userDetail"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.AssignEndorsets#inviteUser
         * @methodOf lbServices.AssignEndorsets
         *
         * @description
         *
         * Fetches belongsTo relation inviteUser.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `InviteUser` object.)
         * </em>
         */
        R.inviteUser = function() {
          var TargetResource = $injector.get("InviteUser");
          var action = TargetResource["::get::assignEndorsets::inviteUser"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.AssignEndorsets#endorsetSent
         * @methodOf lbServices.AssignEndorsets
         *
         * @description
         *
         * Fetches belongsTo relation endorsetSent.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `EndorsetSent` object.)
         * </em>
         */
        R.endorsetSent = function() {
          var TargetResource = $injector.get("EndorsetSent");
          var action = TargetResource["::get::assignEndorsets::endorsetSent"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.AssignEndorsets#companyUser
         * @methodOf lbServices.AssignEndorsets
         *
         * @description
         *
         * Fetches belongsTo relation companyUser.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserDetail` object.)
         * </em>
         */
        R.companyUser = function() {
          var TargetResource = $injector.get("UserDetail");
          var action = TargetResource["::get::assignEndorsets::companyUser"];
          return action.apply(R, arguments);
        };

    return R;
  }]);


module
  .factory('LoopBackAuth', function() {
    var props = ['accessTokenId', 'currentUserId'];
    var propsPrefix = '$LoopBack$';

    function LoopBackAuth() {
      var self = this;
      props.forEach(function(name) {
        self[name] = load(name);
      });
      this.rememberMe = undefined;
      this.currentUserData = null;
    }

    LoopBackAuth.prototype.save = function() {
      var self = this;
      var storage = this.rememberMe ? localStorage : sessionStorage;
      props.forEach(function(name) {
        save(storage, name, self[name]);
      });
    };

    LoopBackAuth.prototype.setUser = function(accessTokenId, userId, userData) {
      this.accessTokenId = accessTokenId;
      this.currentUserId = userId;
      this.currentUserData = userData;
    }

    LoopBackAuth.prototype.clearUser = function() {
      this.accessTokenId = null;
      this.currentUserId = null;
      this.currentUserData = null;
    }

    LoopBackAuth.prototype.clearStorage = function() {
      props.forEach(function(name) {
        save(sessionStorage, name, null);
        save(localStorage, name, null);
      });
    };

    return new LoopBackAuth();

    // Note: LocalStorage converts the value to string
    // We are using empty string as a marker for null/undefined values.
    function save(storage, name, value) {
      var key = propsPrefix + name;
      if (value == null) value = '';
      storage[key] = value;
    }

    function load(name) {
      var key = propsPrefix + name;
      return localStorage[key] || sessionStorage[key] || null;
    }
  })
  .config(['$httpProvider', function($httpProvider) {
    $httpProvider.interceptors.push('LoopBackAuthRequestInterceptor');
  }])
  .factory('LoopBackAuthRequestInterceptor', [ '$q', 'LoopBackAuth',
    function($q, LoopBackAuth) {
      return {
        'request': function(config) {

          // filter out non urlBase requests
          if (config.url.substr(0, urlBase.length) !== urlBase) {
            return config;
          }

          if (LoopBackAuth.accessTokenId) {
            config.headers[authHeader] = LoopBackAuth.accessTokenId;
          } else if (config.__isGetCurrentUser__) {
            // Return a stub 401 error for User.getCurrent() when
            // there is no user logged in
            var res = {
              body: { error: { status: 401 } },
              status: 401,
              config: config,
              headers: function() { return undefined; }
            };
            return $q.reject(res);
          }
          return config || $q.when(config);
        }
      }
    }])

  /**
   * @ngdoc object
   * @name lbServices.LoopBackResourceProvider
   * @header lbServices.LoopBackResourceProvider
   * @description
   * Use `LoopBackResourceProvider` to change the global configuration
   * settings used by all models. Note that the provider is available
   * to Configuration Blocks only, see
   * {@link https://docs.angularjs.org/guide/module#module-loading-dependencies Module Loading & Dependencies}
   * for more details.
   *
   * ## Example
   *
   * ```js
   * angular.module('app')
   *  .config(function(LoopBackResourceProvider) {
   *     LoopBackResourceProvider.setAuthHeader('X-Access-Token');
   *  });
   * ```
   */
  .provider('LoopBackResource', function LoopBackResourceProvider() {
    /**
     * @ngdoc method
     * @name lbServices.LoopBackResourceProvider#setAuthHeader
     * @methodOf lbServices.LoopBackResourceProvider
     * @param {string} header The header name to use, e.g. `X-Access-Token`
     * @description
     * Configure the REST transport to use a different header for sending
     * the authentication token. It is sent in the `Authorization` header
     * by default.
     */
    this.setAuthHeader = function(header) {
      authHeader = header;
    };

    /**
     * @ngdoc method
     * @name lbServices.LoopBackResourceProvider#setUrlBase
     * @methodOf lbServices.LoopBackResourceProvider
     * @param {string} url The URL to use, e.g. `/api` or `//example.com/api`.
     * @description
     * Change the URL of the REST API server. By default, the URL provided
     * to the code generator (`lb-ng` or `grunt-loopback-sdk-angular`) is used.
     */
    this.setUrlBase = function(url) {
      urlBase = url;
    };

    this.$get = ['$resource', function($resource) {
      return function(url, params, actions) {
        var resource = $resource(url, params, actions);

        // Angular always calls POST on $save()
        // This hack is based on
        // http://kirkbushell.me/angular-js-using-ng-resource-in-a-more-restful-manner/
        resource.prototype.$save = function(success, error) {
          // Fortunately, LoopBack provides a convenient `upsert` method
          // that exactly fits our needs.
          var result = resource.upsert.call(this, {}, this, success, error);
          return result.$promise || result;
        };
        return resource;
      };
    }];
  });

})(window, window.angular);
